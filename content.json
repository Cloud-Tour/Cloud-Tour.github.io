{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://Cloud-Tour.github.io","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2022-10-06T02:48:58.718Z","updated":"2022-10-06T02:48:58.718Z","comments":false,"path":"/404.html","permalink":"http://cloud-tour.github.io/404.html","excerpt":"","text":""},{"title":"书单","date":"2022-10-06T02:48:58.720Z","updated":"2022-10-06T02:48:58.720Z","comments":false,"path":"books/index.html","permalink":"http://cloud-tour.github.io/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2022-10-06T02:48:58.721Z","updated":"2022-10-06T02:48:58.721Z","comments":false,"path":"categories/index.html","permalink":"http://cloud-tour.github.io/categories/index.html","excerpt":"","text":""},{"title":"关于","date":"2022-10-06T02:48:58.720Z","updated":"2022-10-06T02:48:58.720Z","comments":false,"path":"about/index.html","permalink":"http://cloud-tour.github.io/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"Repositories","date":"2022-10-06T04:17:29.443Z","updated":"2022-10-06T02:48:58.722Z","comments":false,"path":"repository/index.html","permalink":"http://cloud-tour.github.io/repository/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2022-10-06T02:48:58.721Z","updated":"2022-10-06T02:48:58.721Z","comments":true,"path":"links/index.html","permalink":"http://cloud-tour.github.io/links/index.html","excerpt":"","text":""},{"title":"标签","date":"2022-10-06T02:48:58.722Z","updated":"2022-10-06T02:48:58.722Z","comments":false,"path":"tags/index.html","permalink":"http://cloud-tour.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"debian系统下安装nginx","slug":"debian系统下安装nginx","date":"2022-10-08T04:14:18.807Z","updated":"2022-10-08T04:29:18.082Z","comments":true,"path":"2022/10/08/debian系统下安装nginx/","link":"","permalink":"http://cloud-tour.github.io/2022/10/08/debian%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85nginx/","excerpt":"","text":"​ 博主在工作学习时，经常性使用到nginx，但是某些时候有一些指令总是忘记，去网上收缩有甚是繁琐，因此用本篇博客记录安装的指令，与最后各种文件存放的位置 debian下安装nginx 在安装nginx之前，需要先安装一些插件，使得后面nginx能够正常运行 gcc 1apt install -y build-essential 正则库 1apt install -y libpcre3 libpcre3-dev zlib库 1apt install -y zlib1g-dev OpenSSL库 1apt install -y openssl libssl-dev 下载nginx源码 1234567891011# 下载源码wget http://nginx.org/download/nginx-1.20.2.tar.gz# 解压源码tar -xf nginx-1.20.2.tar.gz# 进入源代码内cd nginx-1.20.2 配置 1234567891011121314151617181920212223242526272829303132333435363738./configure \\--prefix=/usr/local/nginx \\--user=www \\--group=www \\--sbin-path=/usr/local/nginx/sbin/nginx \\--conf-path=/usr/local/nginx/nginx.conf \\--error-log-path=/var/log/nginx/error.log \\--http-log-path=/var/log/nginx/access.log \\--pid-path=/var/run/nginx.pid \\--lock-path=/var/run/nginx.lock \\--http-client-body-temp-path=/var/cache/nginx/client_temp \\--http-proxy-temp-path=/var/cache/nginx/proxy_temp \\--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \\--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \\--http-scgi-temp-path=/var/cache/nginx/scgi_temp \\--with-file-aio \\--with-threads \\--with-http_addition_module \\--with-http_auth_request_module \\--with-http_dav_module \\--with-http_flv_module \\--with-http_gunzip_module \\--with-http_gzip_static_module \\--with-http_mp4_module \\--with-http_random_index_module \\--with-http_realip_module \\--with-http_secure_link_module \\--with-http_slice_module \\--with-http_ssl_module \\--with-http_stub_status_module \\--with-http_sub_module \\--with-http_v2_module \\--with-mail \\--with-mail_ssl_module \\--with-stream \\--with-stream_realip_module \\--with-stream_ssl_module \\--with-stream_ssl_preread_module 其中： --prefix：Nginx主要安装路径，后续Nginx子目录依照这个变量展开 --user：设置Nginx进程启动时，所属的用户 --group：设置Nginx进程启动时，所属的用户组 编译 1make 安装 1make install 创建systemctl守护，管理Nginx： 1vim /usr/lib/systemd/system/nginx.service 12345678910111213[Unit]Description=nginxAfter=network.target[Service]Type=forkingExecStart=/usr/local/nginx/sbin/nginxExecReload=/usr/local/nginx/sbin/nginx -s reloadExecStop=/usr/local/nginx/sbin/nginx -s quitPrivateTmp=true [Install]WantedBy=multi-user.target 启动各服务 123456789systemctl daemon-reload-------------------systemctl start nginx-------------------#观察nginx启动状态systemctl status nginx.service-------------------#查看80线程状态lsof -i:80 nginx命令 如果你是按我的方法编译，那么，需要注意。 /usr/local/nginx：为Nginx编译安装的地址。 /usr/local/nginx/conf/nginx.conf：Nginx默认配置文件。 同时，我们使用systemctl对Nginx进行管理： systemctl start nginx：启动Nginx服务。 systemctl reload nginx：Nginx配置重载。 systemctl stop nginx：停止Nginx服务。 本片文章参考https://www.php.cn/nginx/488924.html","categories":[{"name":"linux","slug":"linux","permalink":"http://cloud-tour.github.io/categories/linux/"}],"tags":[{"name":"debian","slug":"debian","permalink":"http://cloud-tour.github.io/tags/debian/"},{"name":"nginx","slug":"nginx","permalink":"http://cloud-tour.github.io/tags/nginx/"}]},{"title":"debian系统配置java11环境","slug":"debian系统配置java11环境","date":"2022-10-08T03:31:36.963Z","updated":"2022-10-08T03:47:19.584Z","comments":true,"path":"2022/10/08/debian系统配置java11环境/","link":"","permalink":"http://cloud-tour.github.io/2022/10/08/debian%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AEjava11%E7%8E%AF%E5%A2%83/","excerpt":"","text":"​ 博主最近在工作中使用到debian系统，在初始系统中要进行一些配置，使后续的程序能正常运行，因此用该篇文章记录一些配置的步骤。 博主用的debian系统为11.2版本 下载jdk11 分别输入下列两条指令 123apt search openjdk------------------------------sudo apt install default-jdk 输入查看java版本 1java -version 出现下列信息即为安装成功 其他操作 ​ 其实在上述操作后应该就可以正常运行java程序了，但是为了以防万一，再贴出其他操作 debian的系统环境变量 debian系统的环境变量位置位于/etc/profile 入若需要进行配置环境变量，直接vim即可 配置方式： ​ 配置环境变量时，需要先在windows中下载jdk11的安装包，然后传到debian的/etc/java中，再解压。具体信息步骤博主就不在这贴出了。自行百度，很简单的。","categories":[{"name":"linux","slug":"linux","permalink":"http://cloud-tour.github.io/categories/linux/"}],"tags":[{"name":"debian","slug":"debian","permalink":"http://cloud-tour.github.io/tags/debian/"},{"name":"java11","slug":"java11","permalink":"http://cloud-tour.github.io/tags/java11/"}]},{"title":"proteus8.9与keil4的简单使用","slug":"proteus8.9与keil4的简单使用","date":"2022-10-07T13:45:21.243Z","updated":"2022-10-07T14:28:39.430Z","comments":true,"path":"2022/10/07/proteus8.9与keil4的简单使用/","link":"","permalink":"http://cloud-tour.github.io/2022/10/07/proteus8.9%E4%B8%8Ekeil4%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/","excerpt":"","text":"[toc] 最近博主在学51单片机，因此接触到proteus和keil，本篇文章简单介绍一下这两款软件的使用以及如何结合起来，并用这两款软件简单操作一个51单片机实现一个LED灯的闪烁操作。 keil4 ​ 对于keil4，简单来说就是用来写代码的，将代码编译后生成**.hex**文件，将此文件烧入单片机中便可驱动单片机实现某些特定的操作。 创建工程 新建项目 new一个project 选择Atmel下的AT89C51（即51单片机） 下面这个是提醒是否使用汇编，直接选择否，因为我们使用的是c语言 新建.c文件 接下来new一个file文件 ctrl+s保存为.c文件 将该c文件假如到project中 配置项目编译时自动生成.hex文件 编写功能代码 编写代码 下面写的代码是控制p2的0口间隔输出高低电平 1234567891011121314151617181920212223#include&quot;reg51.h&quot;//代表p2口的0处sbit LED0=P2^0;//睡眠函数void sleep(unsigned int n)&#123; unsigned int i = 0,j=0; for(i=0;i&lt;n;i++)&#123; for(j=0;j&lt;120;j++); &#125;&#125;void main()&#123; while(1)&#123; //输出低电平 LED0=0; sleep(5); //输出高电平 LED0=1; sleep(5); &#125;&#125; 写完编译 无error即可 观察项目路径，已生成,hex文件 proteus8.9 ​ 对于proteus来说，可简单理解为是一个用来对单片机仿真的软件，可以用.hex文件驱动单片机进行特定的功能并显现出来。 创建工程 new一个新的工程，不用选择什么，一直下一步直至完成 制作仿真图 添加元器件仓库 添加AT89C51 选中双击即可 同理添加RES和LED-BIBY 置放元器件（单击后即可在图中置放元器件）添加一个电源 连线 修改电阻值（电阻的值必须大于250，否则可能出错） 烧入程序 将.hex文件烧入程序中。双击单片机 烧入成功后即可仿真 end ​ 这样就利用proteus和keil完成一个简单的单片机电路，实现对led控制闪烁。","categories":[{"name":"51单片机","slug":"51单片机","permalink":"http://cloud-tour.github.io/categories/51%E5%8D%95%E7%89%87%E6%9C%BA/"}],"tags":[{"name":"proteus","slug":"proteus","permalink":"http://cloud-tour.github.io/tags/proteus/"},{"name":"keil","slug":"keil","permalink":"http://cloud-tour.github.io/tags/keil/"}]}],"categories":[{"name":"linux","slug":"linux","permalink":"http://cloud-tour.github.io/categories/linux/"},{"name":"51单片机","slug":"51单片机","permalink":"http://cloud-tour.github.io/categories/51%E5%8D%95%E7%89%87%E6%9C%BA/"}],"tags":[{"name":"debian","slug":"debian","permalink":"http://cloud-tour.github.io/tags/debian/"},{"name":"nginx","slug":"nginx","permalink":"http://cloud-tour.github.io/tags/nginx/"},{"name":"java11","slug":"java11","permalink":"http://cloud-tour.github.io/tags/java11/"},{"name":"proteus","slug":"proteus","permalink":"http://cloud-tour.github.io/tags/proteus/"},{"name":"keil","slug":"keil","permalink":"http://cloud-tour.github.io/tags/keil/"}]}