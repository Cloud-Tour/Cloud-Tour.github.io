<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://cloud-tour.github.io/atom.xml" rel="self"/>
  
  <link href="http://cloud-tour.github.io/"/>
  <updated>2023-03-11T11:19:43.379Z</updated>
  <id>http://cloud-tour.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Kafka</title>
    <link href="http://cloud-tour.github.io/2023/03/11/kafka/"/>
    <id>http://cloud-tour.github.io/2023/03/11/kafka/</id>
    <published>2023-03-11T11:18:45.210Z</published>
    <updated>2023-03-11T11:19:43.379Z</updated>
    
    <content type="html"><![CDATA[<h1 id><a class="markdownIt-Anchor" href="#"></a> </h1><h1 id="1-介绍kafka"><a class="markdownIt-Anchor" href="#1-介绍kafka"></a> 1、介绍Kafka</h1><p><strong>简介</strong></p><p>Kafka是最初由Linkedin公司开发，是一个分布式、分区的、多副本的、多订阅者，基于zookeeper协调的分布式日志系统（也可以当做MQ系统），常见可以用于web/nginx日志、访问日志，消息服务等等。</p><p><strong>作用</strong></p><ul><li>以时间复杂度为O(1)的方式提供消息持久化能力，即使对TB级以上数据也能保证常数时间的访问性能</li><li>高吞吐率。即使在非常廉价的商用机器上也能做到单机支持每秒100K条消息的传输</li><li>支持Kafka Server间的消息分区，及分布式消费，同时保证每个partition内的消息顺序传输</li><li>同时支持离线数据处理和实时数据处理</li></ul><p><strong>应用场景</strong></p><ul><li><p>异步处理</p><ul><li><p>可以将一些比较耗时的操作放在其他系统中，通过消息队列将需要进行处理的消息进行存储，其他系统可以消费消息队列中的数据</p></li><li><p>比较常见的：发送短信验证码、发送邮件</p></li></ul></li><li><p>系统解耦</p><ul><li><p>原先一个微服务是通过接口（HTTP）调用另一个微服务，这时候耦合很严重，只要接口发生变化就会导致系统不可用</p></li><li><p>使用消息队列可以将系统进行解耦合，现在第一个微服务可以将消息放入到消息队列中，另一个微服务可以从消息队列中把消息取出来进行处理。进行系统解耦</p></li></ul></li><li><p>流量削峰</p><ul><li>因为消息队列是低延迟、高可靠、高吞吐的，可以应对大量并发</li></ul></li><li><p>日志处理</p><ul><li>可以使用消息队列作为临时存储，或者一种通信管道</li></ul></li></ul><p><strong>消息队列的两种模型</strong></p><ul><li>生产者、消费者模型<ul><li>生产者负责将消息生产到MQ中</li><li>消费者负责从MQ中获取消息</li><li>生产者和消费者是解耦的，可能是生产者一个程序、消费者是另外一个程序</li></ul></li><li>消息队列的模式<ul><li>点对点：<strong>一个消费者消费一个消息</strong>。当一个消费者消费了队列中的某条数据之后，该条数据则从消息队列中删除。该模式即使有多个消费者同时消费数据，也能保证数据处理的顺序。<strong>生产者发送一条消息到queue，只有一个消费者能收到</strong>。</li><li>发布订阅：<strong>多个消费者可以消费一个消息</strong>。与点对点消息系统不同的是，消费者可以订阅一个或多个topic，消费者可以消费该topic中所有的数据，同一条数据可以被多个消费者消费，数据被消费后不会立马删除。在发布-订阅消息系统中，消息的生产者称为发布者，消费者称为订阅者。<strong>发布者发送到topic的消息，只有订阅了topic的订阅者才会收到消息</strong>。</li></ul></li></ul><h1 id="2-kafka的重要组件"><a class="markdownIt-Anchor" href="#2-kafka的重要组件"></a> 2、Kafka的重要组件</h1><ul><li><p><strong>broker</strong>：kafka集群中包含一个或者多个服务实例（节点），这种服务实例被称为broker（一个broker就是一个节点/一个服务器）</p><ul><li>Kafka服务器进程，生产者、消费者都要连接broker。</li><li>一个集群由多个broker组成，功能实现Kafka集群的负载均衡、容错。</li><li><img src="/2023/03/11/kafka/image-20230310230649110.png" alt="image-20230310230649110" style="zoom:80%;"></li></ul></li><li><p><strong>topic</strong>：每条发布到kafka集群的消息都属于某个类别，这个类别就叫做topic。</p><ul><li>一个Kafka集群中，可以包含多个topic。一个topic可以包含多个分区</li><li>是一个逻辑结构，生产、消费消息都需要指定topic</li><li><img src="/2023/03/11/kafka/image-20230310230548646.png" alt="image-20230310230548646" style="zoom: 80%;"></li></ul></li><li><p><strong>partition</strong>：partition(分区)是一个物理上的概念，每个topic包含一个或者多个partition</p><ul><li>一个topic中的消息可以分布在topic中的不同partition中</li><li><img src="/2023/03/11/kafka/image-20230310230720773.png" alt="image-20230310230720773" style="zoom:80%;"></li></ul></li><li><p><strong>offset</strong>：偏移量。相对消费者、partition来说，可以通过offset来拉取数据</p><ul><li>消息在日志中的位置，可以理解是消息在 partition 上的偏移量，也是代表该消息的<strong>唯一序号</strong>。</li><li>同时也是主从之间的需要同步的信息</li><li><img src="/2023/03/11/kafka/image-20230310230745554.png" alt="image-20230310230745554" style="zoom:80%;"></li></ul></li><li><p><strong>segment</strong>：一个partition当中存在多个segment文件段，每个segment分为两部分，.log文件和 .index 文件，其中 .index 文件是索引文件，主要用于快速查询， .log 文件当中数据的偏移量位置</p></li><li><p><strong>replica</strong>： partition replicas（分区副本），实现Kafkaf集群的容错，实现partition的容错。一个topic至少应该包含大于1个的副本</p><ul><li><img src="/2023/03/11/kafka/image-20230310224554454.png" alt="image-20230310224554454"></li><li><img src="/2023/03/11/kafka/image-20230310230829847.png" alt="image-20230310230829847" style="zoom:80%;"></li></ul></li><li><p><strong>producer</strong>：消息的生产者，负责发布消息到 kafka 的 broker 中</p></li><li><p><strong>consumer</strong>：消息的消费者，向 kafka 的 broker 中读取消息的客户端</p></li><li><p><strong>consumer group</strong>：消费者组，每一个 consumer 属于一个特定的 consumer group（可以为每个consumer指定 groupName）</p><ul><li>一个消费者组中可以包含多个消费者，共同来消费topic中的数据</li><li>一个topic中如果只有一个分区，那么这个分区只能被某个组中的一个消费者消费</li><li>有多少个分区，那么就可以被同一个组内的多少个消费者消费</li></ul></li><li><p><strong>.log</strong>：存放数据文件</p></li><li><p><strong>.index</strong>：存放.log文件的索引数据</p></li></ul><p><strong>涵盖关系图</strong>：</p><p><img src="https://5b0988e595225.cdn.sohucs.com/images/20200403/288f7bb6cf0240059672a7737f5cf1ad.jpeg" alt="img"></p><h1 id="3-kafka消息幂等性解决"><a class="markdownIt-Anchor" href="#3-kafka消息幂等性解决"></a> 3、Kafka消息幂等性解决</h1><p><strong>消息幂等问题</strong></p><p>拿http举例来说，一次或多次请求，得到地响应是一致的（网络超时等问题除外），换句话说，就是执行多次操作与执行一次操作的影响是一样的。</p><p>Kafka生产者生产消息到partition，如果直接发送消息，kafka会将消息保存到分区中，但Kafka会返回一个ack给生产者，表示当前操作是否成功，是否已经保存了这条消息。如果ack响应的过程失败了，此时生产者会重试，继续发送没有发送成功的消息，Kafka又会保存一条一模一样的消息</p><p><strong>解决：</strong></p><ul><li>当Kafka的生产者生产消息时，会增加一个<strong>pid</strong>（生产者的唯一编号）和<strong>sequence number</strong>（针对消息的一个递增序列）<ul><li><strong>PID</strong>：每个Producer在初始化时，都会分配一个唯一的PID，这个PID对用户来说，是透明的。</li><li><strong>Sequence Number</strong>：针对每个生产者（对应PID）发送到指定主题分区的消息都对应一个从0开始递增的Sequence Number。</li></ul></li><li>发送消息，会连着pid和sequence number一块发送</li><li>kafka接收到消息，会将消息和pid、sequence number一并保存下来</li><li>如果ack响应失败，生产者重试，再次发送消息时，Kafka会根据pid、sequence number是否需要再保存一条消息</li><li>判断条件：生产者发送过来的sequence number 是否小于等于 partition中消息对应的sequence</li></ul><img src="/2023/03/11/kafka/image-20230310230320153.png" alt="image-20230310230320153" style="zoom: 67%;"><h1 id="4-消费组consumer-group-rebalance机制"><a class="markdownIt-Anchor" href="#4-消费组consumer-group-rebalance机制"></a> 4、消费组Consumer Group Rebalance机制</h1><ul><li>再均衡：在某些情况下，消费者组中的消费者消费的分区会产生变化，会导致消费者分配不均匀（例如：有两个消费者消费3个，因为某个partition崩溃了，还有一个消费者当前没有分区要削峰），Kafka Consumer Group就会启用rebalance机制，重新平衡这个Consumer Group内的消费者消费的分区分配。</li><li>触发时机<ul><li>消费者数量发生变化<ul><li>某个消费者crash</li><li>新增消费者</li><li><img src="/2023/03/11/kafka/image-20230311105623367.png" alt="image-20230311105623367"></li></ul></li><li>topic的数量发生变化<ul><li>某个topic被删除</li><li><img src="/2023/03/11/kafka/image-20230311105639834.png" alt="image-20230311105639834"></li></ul></li><li>partition的数量发生变化<ul><li>删除partition</li><li>新增partition</li><li><img src="/2023/03/11/kafka/image-20230311105658424.png" alt="image-20230311105658424"></li></ul></li></ul></li><li>不良影响<ul><li>发生rebalance，group中的所有的consumer将不再工作，共同来参与再均衡，直到每个消费者都已经被成功分配所需要消费的分区为止（rebalance结束）</li></ul></li></ul><h1 id="5-kafka分区策略"><a class="markdownIt-Anchor" href="#5-kafka分区策略"></a> 5、Kafka分区策略</h1><h2 id="生产者的分区写入策略"><a class="markdownIt-Anchor" href="#生产者的分区写入策略"></a> 生产者的分区写入策略</h2><ul><li>轮询（按照消息尽量保证每个分区的负载）策略，消息会均匀地分布到每个partition<ul><li>写入消息的时候，key为null的时候，默认使用的是轮询策略</li></ul></li><li>随机策略（不使用）</li><li>按key写入策略，key.hash() % 分区的数量(有可能会出现数据倾斜)</li><li>自定义分区策略（类似于MapReduce指定分区）</li></ul><blockquote><p>乱序问题</p><ul><li>在Kafka中生产者是有写入策略，如果topic有多个分区，就会将数据分散在不同的partition中存储</li><li>当partition数量大于1的时候，数据（消息）会打散分布在不同的partition中</li><li>如果只有一个分区，消息是有序的</li></ul></blockquote><h2 id="消费者的分区分配策略"><a class="markdownIt-Anchor" href="#消费者的分区分配策略"></a> 消费者的分区分配策略</h2><p>分区分配策略：保障每个消费者尽量能够均衡地消费分区的数据，不能出现某个消费者消费分区的数量特别多，某个消费者消费的分区特别少</p><ul><li>Range分配策略（范围分配策略）：Kafka默认的分配策略<ul><li>n：分区的数量 / 消费者数量</li><li>m：分区的数量 % 消费者数量</li><li>前m个消费者消费n+1个分区</li><li>剩余的消费者消费n个分区</li><li><img src="/2023/03/11/kafka/image-20230311110208463.png" alt="image-20230311110208463"></li></ul></li><li>RoundRobin分配策略（轮询分配策略）<ul><li>消费者挨个分配消费的分区</li><li><img src="/2023/03/11/kafka/image-20230311110414512.png" alt="image-20230311110414512"></li></ul></li><li>Striky粘性分配策略<ul><li>在没有发生rebalance跟轮询分配策略是一致的<ul><li><img src="/2023/03/11/kafka/image-20230311110530749.png" alt="image-20230311110530749"></li></ul></li><li>发生了rebalance，轮询分配策略，重新走一遍轮询分配的过程。而粘性会保证跟上一次的尽量一致，只是将新的需要分配的分区，均匀的分配到现有可用的消费者中即可<ul><li><img src="/2023/03/11/kafka/image-20230311110553487.png" alt="image-20230311110553487"></li></ul></li><li>减少上下文的切换</li></ul></li></ul><h1 id="6-副本的ack策略"><a class="markdownIt-Anchor" href="#6-副本的ack策略"></a> 6、副本的ACK策略</h1><p>producer是不断地往Kafka中写入数据，写入数据会有一个返回结果，表示是否写入成功。这里对应有一个ACKs的配置。</p><ul><li>acks = 0：生产者只管写入，不管是否写入成功，可能会数据丢失。性能是最好的</li><li>acks = 1：生产者会等到leader分区写入成功后，返回成功，接着发送下一条</li><li>acks = -1/all：确保消息写入到leader分区、还确保消息写入到对应副本都成功后，接着发送下一条，性能是最差的</li></ul><p>根据业务情况来选择ack机制，是要求性能最高，一部分数据丢失影响不大，可以选择0/1。如果要求数据一定不能丢失，就得配置为-1/all。</p><p>分区中是有leader和follower的概念，为了确保消费者消费的数据是一致的，只能从分区leader去读写消息，follower做的事情就是同步数据，Backup。</p><h1 id="7-leader和follower"><a class="markdownIt-Anchor" href="#7-leader和follower"></a> 7、leader和follower</h1><p>在Kafka中，每个topic都可以配置多个分区以及多个副本。<strong>每个分区</strong>都有一个<strong>leader</strong>以及0个或者多个<strong>follower</strong>，在创建topic时，Kafka会将每个分区的leader均匀地分配在每个broker上。我们正常使用kafka是感觉不到leader、follower的存在的。但其实，所有的<strong>读写</strong>操作都是由leader处理，而所有的follower都复制leader的<strong>日志数据文件</strong>，如果leader出现故障时，follower就会被选举为leader。</p><ul><li>Kafka中的leader和follower是相对于<strong>分区</strong>有意义，不是相对broker</li><li>Kafka在创建topic的时候，会尽量分配分区的leader在不同的broker中，其实就是负载均衡</li><li>leader职责：读写数据</li><li>follower职责：同步数据、参与选举（leader crash之后，会选举一个follower重新成为分区的leader）</li><li>注意和ZooKeeper区分<ul><li>ZK的leader负责读、写，follower可以读取</li><li>Kafka的leader负责读写、follower不能读写数据（确保每个消费者消费的数据是一致的），Kafka一个topic有多个分区leader，一样可以实现数据操作的负载均衡</li></ul></li></ul><p><img src="/2023/03/11/kafka/image-20230311111221055.png" alt="image-20230311111221055"></p><h2 id="arisrosr"><a class="markdownIt-Anchor" href="#arisrosr"></a> AR\ISR\OSR</h2><ul><li>AR：（Assigned Replicas——已分配的副本）表示一个topic下的所有副本</li><li>ISR：（In-Sync Replicas——在同步中的副本）所有与leader副本保持一定程度同步的副本（包括 leader 副本在内）组成</li><li>OSR：（Out of Sync Replicas——不再同步的副本）由于follower副本同步滞后过多的副本（不包括 leader 副本）组成</li><li>AR = ISR + OSR</li><li>正常情况下，所有的follower副本都应该与leader副本保持同步，即AR = ISR，OSR集合为空。</li></ul><p><img src="/2023/03/11/kafka/image-20230311111625983.png" alt="image-20230311111625983"></p><h2 id="leader选举"><a class="markdownIt-Anchor" href="#leader选举"></a> leader选举</h2><ul><li><p>Controller：controller是kafka集群的老大，前面leader和follower是针对partition，而controller是针对broker的</p><ul><li>Controller是高可用的，是用过ZK来进行选举，一旦某个broker崩溃，其他的broker会重新注册为Controller</li><li>Kafka启动时，会在所有的broker中选择一个controller</li><li>创建topic、或者添加分区、修改副本数量之类的管理任务都是由controller完成的</li><li>Kafka分区leader的选举，也是由controller决定的</li></ul></li><li><p>Leader：是针对partition的一个角色</p><ul><li>Leader是通过ISR来进行快速选举</li></ul></li></ul><p><strong>Controller选举Leader</strong></p><ul><li><p>所有Partition的leader选举都由controller决定</p></li><li><p>controller会将leader的改变直接通过RPC的方式通知需为此作出响应的Broker</p></li><li><p>controller读取到当前分区的ISR，只要有一个Replica还幸存，就选择其中一个作为leader；否则，则任意选这个一个Replica作为leader</p></li><li><p>如果该partition的所有Replica都已经宕机，则新的leader为-1</p></li></ul><p><strong>为什么不能通过ZK的方式来选举partition的leader？</strong></p><ul><li>Kafka集群如果业务很多的情况下，会有很多的partition</li><li>假设某个broker宕机，就会出现很多的partiton都需要重新选举leader</li><li>如果使用zookeeper选举leader，会给zookeeper带来巨大的压力。所以，kafka中leader的选举不能使用ZK来实现</li></ul><p><strong>leader负载均衡</strong></p><ul><li><p>leader的负载均衡</p><ul><li>如果某个broker crash之后，就可能会导致partition的leader分布不均匀，就是一个broker上存在一个topic下不同partition的leader</li><li>Kafka中引入了一个叫做「preferred-replica」的概念，意思就是：优先的Replica</li><li>在ISR列表中，第一个replica就是preferred-replica</li><li>第一个分区存放的broker，肯定就是preferred-replica</li><li>通过以下指令，可以将leader分配到优先的leader对应的broker，确保leader是均匀分配的</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-leader-election.sh --bootstrap-server node1.itcast.cn:9092 --topic test --partition=2 --election-type preferred</span><br></pre></td></tr></table></figure></li></ul><h2 id="kafka读写流程"><a class="markdownIt-Anchor" href="#kafka读写流程"></a> <strong>kafka读写流程</strong></h2><ul><li>写流程<ul><li>通过ZooKeeper找partition对应的leader，leader是负责写的</li><li>producer开始写入数据</li><li>broker进程上的leader将消息写入到本地log中</li><li>follower从leader上拉取消息，写入到本地log，并向leader发送ACK</li><li>leader接收到所有的ISR中的Replica的ACK后，并向生产者返回ACK</li><li><img src="/2023/03/11/kafka/image-20230311124448130.png" alt="image-20230311124448130"></li></ul></li><li>读流程<ul><li>通过ZooKeeper找partition对应的leader，leader是负责读的</li><li>通过ZooKeeper找到消费者对应的offset</li><li>然后开始从offset往后顺序拉取数据</li><li>提交offset（自动提交——每隔多少秒提交一次offset、手动提交——放入到事务中提交）</li><li><img src="/2023/03/11/kafka/image-20230311125007901.png" alt="image-20230311125007901"></li></ul></li></ul><h2 id="物理存储"><a class="markdownIt-Anchor" href="#物理存储"></a> 物理存储</h2><p><img src="/2023/03/11/kafka/image-20230311125207052.png" alt="image-20230311125207052"></p><ul><li>Kafka的数据组织结构<ul><li><p>topic</p></li><li><p>partition</p></li><li><p>segment</p><ul><li>.log数据文件</li><li>.index（稀疏索引）</li><li>.timeindex（根据时间做的索引）</li></ul></li><li><p><img src="/2023/03/11/kafka/image-20230311125607364.png" alt="image-20230311125607364"></p><ul><li><p>每个日志文件的文件名为起始偏移量，因为每个分区的起始偏移量是0，所以，分区的日志文件都以0000000000000000000.log开始</p></li><li><p>默认的每个日志文件最大为「log.segment.bytes =1024<em>1024</em>1024」1G</p><p>为了简化根据offset查找消息，Kafka日志文件名设计为开始的偏移量</p></li></ul></li></ul></li><li>深入了解读数据的流程<ul><li>消费者的offset是一个针对partition全局offset</li><li>可以根据这个offset找到segment段</li><li>接着需要将全局的offset转换成segment的局部offset</li><li>根据局部的offset，就可以从（.index稀疏索引）找到对应的数据位置</li><li>开始顺序读取</li></ul></li></ul><h1 id="8-kafka的数据不丢失性"><a class="markdownIt-Anchor" href="#8-kafka的数据不丢失性"></a> 8、Kafka的数据不丢失性</h1><ul><li><p>broker消息不丢失：因为有副本relicas的存在，会不断地从leader中同步副本，所以，一个broker crash，不会导致数据丢失，除非是只有一个副本。</p></li><li><p><strong>生产者消息不丢失:</strong></p><ul><li><p>生产者连接leader写入数据时，可以通过ACK机制来确保数据已经成功写入。ACK机制有三个可选配置</p><ul><li>配置ACK响应要求为 -1 时 —— 表示所有的节点都收到数据(leader和follower都接收到数据）</li><li>配置ACK响应要求为 1 时 —— 表示leader收到数据</li><li>配置ACK影响要求为 0 时 —— 生产者只负责发送数据，不关心数据是否丢失（这种情况可能会产生数据丢失，但性能是最好的）</li><li><strong>注意</strong>：如果broker端一直不返回ack状态，producer永远不知道是否成功；producer可以设置一个超时时间10s，超过时间认为失败。</li></ul></li><li><p>生产者可以采用同步和异步两种方式发送数据</p><ul><li><p><strong>同步方式</strong></p><p>发送一批数据给kafka后，等待kafka返回结果：</p><ul><li>生产者等待10s，如果broker没有给出ack响应，就认为失败</li><li>生产者重试3次，如果还没有响应，就报错</li></ul></li><li><p><strong>异步方式</strong></p><p>发送一批数据给kafka，只是提供一个回调函数：</p><ul><li>先将数据保存在生产者端的buffer中。buffer大小是2万条</li><li>满足数据阈值或者数量阈值其中的一个条件就可以发送数据</li><li>发送一批数据的大小是500条</li></ul></li></ul></li><li><p>如果broker迟迟不给ack，而buﬀer又满了，开发者可以设置是否直接清空buﬀer中的数据</p></li></ul></li><li><p><strong>消费者消费不丢失：</strong></p><ul><li>在消费者消费数据的时候，只要每个消费者记录好oﬀset值即可，就能保证数据不丢失。<ul><li>At-least once：一种数据可能会重复消费</li><li>Exactly-Once：仅被一次消费</li></ul></li></ul></li></ul><h1 id="9-kafka的数据清理和配额限速"><a class="markdownIt-Anchor" href="#9-kafka的数据清理和配额限速"></a> 9、Kafka的数据清理和配额限速</h1><ul><li><strong>数据清理</strong><ul><li>Log Deletion（日志删除）：如果消息达到一定的条件（时间、日志大小、offset大小），Kafka就会自动将日志设置为待删除（segment端的后缀名会以 .delete结尾），日志管理程序会定期清理这些日志<ul><li>默认是7天过期</li></ul></li><li>Log Compaction（日志合并）<ul><li>如果在一些key-value数据中，一个key可以对应多个不同版本的value</li><li>经过日志合并，就会只保留最新的一个版本</li></ul></li></ul></li><li><strong>配额限速</strong><ul><li>可以限制Producer、Consumer的速率</li><li>防止Kafka的速度过快，占用整个服务器（broker）的所有IO资源</li></ul></li></ul><h1 id="10-kafka性能好的原因"><a class="markdownIt-Anchor" href="#10-kafka性能好的原因"></a> 10、Kafka性能好的原因</h1><ul><li><p><strong>顺序写磁盘</strong></p><p>操作系统每次从磁盘读写数据的时候，需要先寻址，也就是先要找到数据在磁盘上的物理位置，然后再进行数据读写，如果是机械硬盘，寻址就需要较长的时间。 kafka的设计中，数据其实是存储在磁盘上面，一般来说，会把数据存储在内存上面性能才会好。但是kafka用的是顺序写，追加数据是追加到末尾，磁盘顺序写的性能极高，在磁盘个数一定，转数达到一定的情况下，基本和内存速度一致。随机写的话是在文件的某个位置修改数据，性能会较低。</p></li><li><p><strong>Page Cache</strong></p><p>Kafka 在 OS 系统方面使用了 Page Cache 而不是我们平常所用的 Buffer。Page Cache 其实不陌生，也不是什么新鲜事物</p><img src="/2023/03/11/kafka/image-20230311135618559.png" alt="image-20230311135618559" style="zoom:80%;"><p>我们在 linux 上查看内存的时候，经常可以看到 buff/cache，两者都是用来加速 IO 读写用的，而 cache 是作用于读，也就是说，磁盘的内容可以读到 cache 里面这样，应用程序读磁盘就非常快；而 buff 是作用于写，我们开发写磁盘都是，一般如果写入一个 buff 里面再 flush 就非常快。而 kafka 正是把这两者发挥了极致：</p><p>Kafka 虽然是 scala 写的，但是依旧在 Java 的虚拟机上运行，尽管如此，它尽量避开了 JVM 的限制，它利用了 Page cache 来存储，这样躲开了数据在 JVM 因为 GC 而发生的 STD。另一方面也是 Page Cache 使得它实现了零拷贝，具体下面会讲。</p></li><li><p><strong>零拷贝</strong></p><p>先来看看非零拷贝的情况：</p><img src="/2023/03/11/kafka/image-20230311135639432.png" alt="image-20230311135639432" style="zoom: 67%;"><p>可以看到数据的拷贝从内存拷贝到kafka服务进程那块，又拷贝到socket缓存那块，整个过程耗费的时间比较高，kafka利用了Linux的sendFile技术（NIO），省去了进程切换和一次数据拷贝，让性能变得更好。</p><img src="/2023/03/11/kafka/image-20230311135658036.png" alt="image-20230311135658036" style="zoom:67%;"><p><strong>传统的一次应用程请求数据的过程</strong></p><img src="/2023/03/11/kafka/image-20230311135725492.png" alt="image-20230311135725492" style="zoom: 67%;"><p>这里大致可以发传统的方式发生了 4 次拷贝，2 次 DMA 和 2 次 CPU，而 CPU 发生了 4 次的切换。（DMA 简单理解就是，在进行 I/O 设备和内存的数据传输的时候，数据搬运的工作全部交给 DMA 控制器，而 CPU 不再参与任何与数据搬运相关的事情）</p><p><strong>零拷贝的方式</strong></p><img src="/2023/03/11/kafka/image-20230311135749588.png" alt="image-20230311135749588" style="zoom:67%;"><p>通过优化我们可以发现，CPU 只发生了 2 次的上下文切换和 3 次数据拷贝。（linux 系统提供了系统事故调用函数“ sendfile()”，这样系统调用，可以直接把内核缓冲区里的数据拷贝到 socket 缓冲区里，不再拷贝到用户态）</p></li><li><p><strong>分区分段</strong></p><p>我们上面也介绍过了，kafka 采取了分区的模式，而每一个分区又对应到一个物理分段，而查找的时候可以根据二分查找快速定位。这样不仅提供了数据读的查询效率，也提供了并行操作的方式。</p></li><li><p><strong>数据压缩</strong></p><p>Kafka 对数据提供了：Gzip 和 Snappy 压缩协议等压缩协议，对消息结构体进行了压缩，一方面减少了带宽，也减少了数据传输的消耗。</p></li></ul><h1 id="11-日志如何分段存储"><a class="markdownIt-Anchor" href="#11-日志如何分段存储"></a> 11、日志如何分段存储</h1><p>Kafka规定了一个分区内的.log文件最大为1G，做这个限制目的是为了方便把.log加载到内存去操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">00000000000000000000.index</span><br><span class="line">00000000000000000000.log</span><br><span class="line">00000000000000000000.timeindex</span><br><span class="line"></span><br><span class="line">00000000000005367851.index</span><br><span class="line">00000000000005367851.log</span><br><span class="line">00000000000005367851.timeindex</span><br><span class="line"></span><br><span class="line">00000000000009936472.index</span><br><span class="line">00000000000009936472.log</span><br><span class="line">00000000000009936472.timeindex</span><br></pre></td></tr></table></figure><p>这个9936472之类的数字，就是代表了这个日志段文件里包含的起始offset，也就说明这个分区里至少都写入了接近1000万条数据了。Kafka broker有一个参数，log.segment.bytes，限定了每个日志段文件的大小，最大就是1GB，一个日志段文件满了，就自动开一个新的日志段文件来写入，避免单个文件过大，影响文件的读写性能，这个过程叫做log rolling，正在被写入的那个日志段文件，叫做active log segment。如果大家有看前面的两篇有关于HDFS的文章时，就会发现NameNode的edits log也会做出限制，所以这些框架都是会考虑到这些问题。</p><h1 id="12-kafka如何网络设计"><a class="markdownIt-Anchor" href="#12-kafka如何网络设计"></a> 12、Kafka如何网络设计？</h1><p>kafka的网络设计和Kafka的调优有关，这也是为什么它能支持高并发的原因：</p><p><img src="/2023/03/11/kafka/image-20230311135936685.png" alt="image-20230311135936685"></p><p>首先客户端发送请求全部会先发送给一个Acceptor，broker里面会存在3个线程（默认是3个），这3个线程都是叫做processor，Acceptor不会对客户端的请求做任何的处理，直接封装成一个个socketChannel发送给这些processor形成一个队列，发送的方式是轮询，就是先给第一个processor发送，然后再给第二个，第三个，然后又回到第一个。消费者线程去消费这些socketChannel时，会获取一个个request请求，这些request请求中就会伴随着数据。</p><p>线程池里面默认有8个线程，这些线程是用来处理request的，解析请求，如果request是写请求，就写到磁盘里。读的话返回结果。 processor会从response中读取响应数据，然后再返回给客户端。这就是Kafka的网络三层架构。</p><p>所以如果我们需要对kafka进行增强调优，增加processor并增加线程池里面的处理线程，就可以达到效果。request和response那一块部分其实就是起到了一个缓存的效果，是考虑到processor们生成请求太快，线程数不够不能及时处理的问题。所以这就是一个加强版的reactor网络线程模型。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#&quot;&gt;&lt;/a&gt; &lt;/h1&gt;
&lt;h1 id=&quot;1-介绍kafka&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-介绍kafka&quot;&gt;&lt;/a&gt; 1、介绍Kafka&lt;/h1</summary>
      
    
    
    
    <category term="kafka" scheme="http://cloud-tour.github.io/categories/kafka/"/>
    
    
    <category term="kafka" scheme="http://cloud-tour.github.io/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>基础</title>
    <link href="http://cloud-tour.github.io/2023/03/07/%E5%9F%BA%E7%A1%80/"/>
    <id>http://cloud-tour.github.io/2023/03/07/%E5%9F%BA%E7%A1%80/</id>
    <published>2023-03-07T10:42:48.718Z</published>
    <updated>2023-03-07T10:50:17.243Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础篇"><a class="markdownIt-Anchor" href="#基础篇"></a> 基础篇</h1><blockquote><p><em><strong>基础篇要点：算法、数据结构、基础设计模式</strong></em></p></blockquote><h2 id="1-二分查找"><a class="markdownIt-Anchor" href="#1-二分查找"></a> 1. 二分查找</h2><p><strong>要求</strong></p><ul><li>能够用自己语言描述二分查找算法</li><li>能够手写二分查找代码</li><li>能够解答一些变化后的考法</li></ul><p><strong>算法描述</strong></p><ol><li><p>前提：有已排序数组 A（假设已经做好）</p></li><li><p>定义左边界 L、右边界 R，确定搜索范围，循环执行二分查找（3、4两步）</p></li><li><p>获取中间索引 M = Floor((L+R) /2)</p></li><li><p>中间索引的值  A[M] 与待搜索的值 T 进行比较</p><p>① A[M] == T 表示找到，返回中间索引</p><p>② A[M] &gt; T，中间值右侧的其它元素都大于 T，无需比较，中间索引左边去找，M - 1 设置为右边界，重新查找</p><p>③ A[M] &lt; T，中间值左侧的其它元素都小于 T，无需比较，中间索引右边去找， M + 1 设置为左边界，重新查找</p></li><li><p>当 L &gt; R 时，表示没有找到，应结束循环</p></li></ol><blockquote><p><em>更形象的描述请参考：binary_search.html</em></p></blockquote><p><strong>算法实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> t)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>, r = a.length - <span class="number">1</span>, m;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">        m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (a[m] == t) &#123;</span><br><span class="line">            <span class="keyword">return</span> m;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a[m] &gt; t) &#123;</span><br><span class="line">            r = m - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            l = m + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] array = &#123;<span class="number">1</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">19</span>, <span class="number">22</span>, <span class="number">31</span>, <span class="number">35</span>, <span class="number">40</span>, <span class="number">45</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">50</span>&#125;;</span><br><span class="line">    <span class="type">int</span> <span class="variable">target</span> <span class="operator">=</span> <span class="number">47</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> binarySearch(array, target);</span><br><span class="line">    System.out.println(idx);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解决整数溢出问题</strong></p><p>当 l 和 r 都较大时，<code>l + r</code> 有可能超过整数范围，造成运算错误，解决方法有两种：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> l + (r - l) / <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>还有一种是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> (l + r) &gt;&gt;&gt; <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><strong>其它考法</strong></p><ol><li><p>有一个有序表为 1,5,8,11,19,22,31,35,40,45,48,49,50 当二分查找值为 48 的结点时，查找成功需要比较的次数</p></li><li><p>使用二分法在序列 1,4,6,7,15,33,39,50,64,78,75,81,89,96 中查找元素 81 时，需要经过（   ）次比较</p></li><li><p>在拥有128个元素的数组中二分查找一个数，需要比较的次数最多不超过多少次</p></li></ol><p>对于前两个题目，记得一个简要判断口诀：奇数二分取中间，偶数二分取中间靠左。对于后一道题目，需要知道公式：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>n</mi><mo>=</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>N</mi><mo>=</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>10</mn></msub><mi>N</mi><mi mathvariant="normal">/</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>10</mn></msub><mn>2</mn></mrow><annotation encoding="application/x-tex">n = log_2N = log_{10}N/log_{10}2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">2</span></span></span></span></span></p><p>其中 n 为查找次数，N 为元素个数</p><h2 id="2-冒泡排序"><a class="markdownIt-Anchor" href="#2-冒泡排序"></a> 2. 冒泡排序</h2><p><strong>要求</strong></p><ul><li>能够用自己语言描述冒泡排序算法</li><li>能够手写冒泡排序代码</li><li>了解一些冒泡排序的优化手段</li></ul><p><strong>算法描述</strong></p><ol><li>依次比较数组中相邻两个元素大小，若 a[j] &gt; a[j+1]，则交换两个元素，两两都比较一遍称为一轮冒泡，结果是让最大的元素排至最后</li><li>重复以上步骤，直到整个数组有序</li></ol><blockquote><p><em>更形象的描述请参考：bubble_sort.html</em></p></blockquote><p><strong>算法实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubble</span><span class="params">(<span class="type">int</span>[] a)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; a.length - <span class="number">1</span>; j++) &#123;</span><br><span class="line">        <span class="comment">// 一轮冒泡</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">swapped</span> <span class="operator">=</span> <span class="literal">false</span>; <span class="comment">// 是否发生了交换</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length - <span class="number">1</span> - j; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;比较次数&quot;</span> + i);</span><br><span class="line">            <span class="keyword">if</span> (a[i] &gt; a[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                Utils.swap(a, i, i + <span class="number">1</span>);</span><br><span class="line">                swapped = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;第&quot;</span> + j + <span class="string">&quot;轮冒泡&quot;</span></span><br><span class="line">                           + Arrays.toString(a));</span><br><span class="line">        <span class="keyword">if</span> (!swapped) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>优化点1：每经过一轮冒泡，内层循环就可以减少一次</li><li>优化点2：如果某一轮冒泡没有发生交换，则表示所有数据有序，可以结束外层循环</li></ul><p><strong>进一步优化</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubble_v2</span><span class="params">(<span class="type">int</span>[] a)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> a.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">last</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 表示最后一次交换索引位置</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;比较次数&quot;</span> + i);</span><br><span class="line">            <span class="keyword">if</span> (a[i] &gt; a[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                Utils.swap(a, i, i + <span class="number">1</span>);</span><br><span class="line">                last = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        n = last;</span><br><span class="line">        System.out.println(<span class="string">&quot;第轮冒泡&quot;</span></span><br><span class="line">                           + Arrays.toString(a));</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>每轮冒泡时，最后一次交换索引可以作为下一轮冒泡的比较次数，如果这个值为零，表示整个数组有序，直接退出外层循环即可</li></ul><h2 id="3-选择排序"><a class="markdownIt-Anchor" href="#3-选择排序"></a> 3. 选择排序</h2><p><strong>要求</strong></p><ul><li>能够用自己语言描述选择排序算法</li><li>能够比较选择排序与冒泡排序</li><li>理解非稳定排序与稳定排序</li></ul><p><strong>算法描述</strong></p><ol><li><p>将数组分为两个子集，排序的和未排序的，每一轮从未排序的子集中选出最小的元素，放入排序子集</p></li><li><p>重复以上步骤，直到整个数组有序</p></li></ol><blockquote><p><em>更形象的描述请参考：selection_sort.html</em></p></blockquote><p><strong>算法实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">selection</span><span class="params">(<span class="type">int</span>[] a)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// i 代表每轮选择最小元素要交换到的目标索引</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> i; <span class="comment">// 代表最小元素的索引</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> s + <span class="number">1</span>; j &lt; a.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[s] &gt; a[j]) &#123; <span class="comment">// j 元素比 s 元素还要小, 更新 s</span></span><br><span class="line">                s = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s != i) &#123;</span><br><span class="line">            swap(a, s, i);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>优化点：为减少交换次数，每一轮可以先找最小的索引，在每轮最后再交换元素</li></ul><p><strong>与冒泡排序比较</strong></p><ol><li><p>二者平均时间复杂度都是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p></li><li><p>选择排序一般要快于冒泡，因为其交换次数少</p></li><li><p>但如果集合有序度高，冒泡优于选择</p></li><li><p>冒泡属于稳定排序算法，而选择属于不稳定排序</p><ul><li>稳定排序指，按对象中不同字段进行多次排序，不会打乱同值元素的顺序</li><li>不稳定排序则反之</li></ul></li></ol><p><strong>稳定排序与不稳定排序</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;=================不稳定================&quot;</span>);</span><br><span class="line">Card[] cards = getStaticCards();</span><br><span class="line">System.out.println(Arrays.toString(cards));</span><br><span class="line">selection(cards, Comparator.comparingInt((Card a) -&gt; a.sharpOrder).reversed());</span><br><span class="line">System.out.println(Arrays.toString(cards));</span><br><span class="line">selection(cards, Comparator.comparingInt((Card a) -&gt; a.numberOrder).reversed());</span><br><span class="line">System.out.println(Arrays.toString(cards));</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;=================稳定=================&quot;</span>);</span><br><span class="line">cards = getStaticCards();</span><br><span class="line">System.out.println(Arrays.toString(cards));</span><br><span class="line">bubble(cards, Comparator.comparingInt((Card a) -&gt; a.sharpOrder).reversed());</span><br><span class="line">System.out.println(Arrays.toString(cards));</span><br><span class="line">bubble(cards, Comparator.comparingInt((Card a) -&gt; a.numberOrder).reversed());</span><br><span class="line">System.out.println(Arrays.toString(cards));</span><br></pre></td></tr></table></figure><p>都是先按照花色排序（♠♥♣♦），再按照数字排序（AKQJ…）</p><ul><li><p>不稳定排序算法按数字排序时，会打乱原本同值的花色顺序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[[♠7], [♠2], [♠4], [♠5], [♥2], [♥5]]</span><br><span class="line">[[♠7], [♠5], [♥5], [♠4], [♥2], [♠2]]</span><br></pre></td></tr></table></figure><p>原来 ♠2 在前 ♥2 在后，按数字再排后，他俩的位置变了</p></li><li><p>稳定排序算法按数字排序时，会保留原本同值的花色顺序，如下所示 ♠2 与 ♥2 的相对位置不变</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[[♠7], [♠2], [♠4], [♠5], [♥2], [♥5]]</span><br><span class="line">[[♠7], [♠5], [♥5], [♠4], [♠2], [♥2]]</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-插入排序"><a class="markdownIt-Anchor" href="#4-插入排序"></a> 4. 插入排序</h2><p><strong>要求</strong></p><ul><li>能够用自己语言描述插入排序算法</li><li>能够比较插入排序与选择排序</li></ul><p><strong>算法描述</strong></p><ol><li><p>将数组分为两个区域，排序区域和未排序区域，每一轮从未排序区域中取出第一个元素，插入到排序区域（需保证顺序）</p></li><li><p>重复以上步骤，直到整个数组有序</p></li></ol><blockquote><p><em>更形象的描述请参考：insertion_sort.html</em></p></blockquote><p><strong>算法实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改了代码与希尔排序一致</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span>[] a)</span> &#123;</span><br><span class="line">    <span class="comment">// i 代表待插入元素的索引</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> a[i]; <span class="comment">// 代表待插入的元素值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i;</span><br><span class="line">        System.out.println(j);</span><br><span class="line">        <span class="keyword">while</span> (j &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (t &lt; a[j - <span class="number">1</span>]) &#123; <span class="comment">// j-1 是上一个元素索引，如果 &gt; t，后移</span></span><br><span class="line">                a[j] = a[j - <span class="number">1</span>];</span><br><span class="line">                j--;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果 j-1 已经 &lt;= t, 则 j 就是插入位置</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        a[j] = t;</span><br><span class="line">        System.out.println(Arrays.toString(a) + <span class="string">&quot; &quot;</span> + j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>与选择排序比较</strong></p><ol><li><p>二者平均时间复杂度都是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p></li><li><p>大部分情况下，插入都略优于选择</p></li><li><p>有序集合插入的时间复杂度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></p></li><li><p>插入属于稳定排序算法，而选择属于不稳定排序</p></li></ol><p><strong>提示</strong></p><blockquote><p><em>插入排序通常被同学们所轻视，其实它的地位非常重要。小数据量排序，都会优先选择插入排序</em></p></blockquote><h2 id="5-希尔排序"><a class="markdownIt-Anchor" href="#5-希尔排序"></a> 5. 希尔排序</h2><p><strong>要求</strong></p><ul><li>能够用自己语言描述希尔排序算法</li></ul><p><strong>算法描述</strong></p><ol><li><p>首先选取一个间隙序列，如 (n/2，n/4 … 1)，n 为数组长度</p></li><li><p>每一轮将间隙相等的元素视为一组，对组内元素进行插入排序，目的有二</p><p>① 少量元素插入排序速度很快</p><p>② 让组内值较大的元素更快地移动到后方</p></li><li><p>当间隙逐渐减少，直至为 1 时，即可完成排序</p></li></ol><blockquote><p><em>更形象的描述请参考：shell_sort.html</em></p></blockquote><p><strong>算法实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">shell</span><span class="params">(<span class="type">int</span>[] a)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> a.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">gap</span> <span class="operator">=</span> n / <span class="number">2</span>; gap &gt; <span class="number">0</span>; gap /= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="comment">// i 代表待插入元素的索引</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> gap; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> a[i]; <span class="comment">// 代表待插入的元素值</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">while</span> (j &gt;= gap) &#123;</span><br><span class="line">                <span class="comment">// 每次与上一个间隙为 gap 的元素进行插入排序</span></span><br><span class="line">                <span class="keyword">if</span> (t &lt; a[j - gap]) &#123; <span class="comment">// j-gap 是上一个元素索引，如果 &gt; t，后移</span></span><br><span class="line">                    a[j] = a[j - gap];</span><br><span class="line">                    j -= gap;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果 j-1 已经 &lt;= t, 则 j 就是插入位置</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            a[j] = t;</span><br><span class="line">            System.out.println(Arrays.toString(a) + <span class="string">&quot; gap:&quot;</span> + gap);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>参考资料</strong></p><ul><li><a href="https://en.wikipedia.org/wiki/Shellsort">https://en.wikipedia.org/wiki/Shellsort</a></li></ul><h2 id="6-快速排序"><a class="markdownIt-Anchor" href="#6-快速排序"></a> 6. 快速排序</h2><p><strong>要求</strong></p><ul><li>能够用自己语言描述快速排序算法</li><li>掌握手写单边循环、双边循环代码之一</li><li>能够说明快排特点</li><li>了解洛穆托与霍尔两种分区方案的性能比较</li></ul><p><strong>算法描述</strong></p><ol><li>每一轮排序选择一个基准点（pivot）进行分区<ol><li>让小于基准点的元素的进入一个分区，大于基准点的元素的进入另一个分区</li><li>当分区完成时，基准点元素的位置就是其最终位置</li></ol></li><li>在子分区内重复以上过程，直至子分区元素个数少于等于 1，这体现的是分而治之的思想 （<a href="https://en.wikipedia.org/wiki/Divide-and-conquer_algorithm">divide-and-conquer</a>）</li><li>从以上描述可以看出，一个关键在于分区算法，常见的有洛穆托分区方案、双边循环分区方案、霍尔分区方案</li></ol><blockquote><p><em>更形象的描述请参考：quick_sort.html</em></p></blockquote><p><strong>单边循环快排（lomuto 洛穆托分区方案）</strong></p><ol><li><p>选择最右元素作为基准点元素</p></li><li><p>j 指针负责找到比基准点小的元素，一旦找到则与 i 进行交换</p></li><li><p>i 指针维护小于基准点元素的边界，也是每次交换的目标索引</p></li><li><p>最后基准点与 i 交换，i 即为分区位置</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">quick</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> l, <span class="type">int</span> h)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= h) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> partition(a, l, h); <span class="comment">// p 索引值</span></span><br><span class="line">    quick(a, l, p - <span class="number">1</span>); <span class="comment">// 左边分区的范围确定</span></span><br><span class="line">    quick(a, p + <span class="number">1</span>, h); <span class="comment">// 左边分区的范围确定</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">partition</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> l, <span class="type">int</span> h)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">pv</span> <span class="operator">=</span> a[h]; <span class="comment">// 基准点元素</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> l;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> l; j &lt; h; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[j] &lt; pv) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != j) &#123;</span><br><span class="line">                swap(a, i, j);</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i != h) &#123;</span><br><span class="line">        swap(a, h, i);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(Arrays.toString(a) + <span class="string">&quot; i=&quot;</span> + i);</span><br><span class="line">    <span class="comment">// 返回值代表了基准点元素所在的正确索引，用它确定下一轮分区的边界</span></span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>双边循环快排（不完全等价于 hoare 霍尔分区方案）</strong></p><ol><li>选择最左元素作为基准点元素</li><li>j 指针负责从右向左找比基准点小的元素，i 指针负责从左向右找比基准点大的元素，一旦找到二者交换，直至 i，j 相交</li><li>最后基准点与 i（此时 i 与 j 相等）交换，i 即为分区位置</li></ol><p>要点</p><ol><li><p>基准点在左边，并且要先 j 后 i</p></li><li><p>while( <strong>i</strong> <strong>&lt; j</strong> &amp;&amp; a[j] &gt; pv ) j–</p></li><li><p>while ( <strong>i</strong> <strong>&lt; j</strong> &amp;&amp; a[i] <strong>&lt;=</strong> pv ) i++</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">quick</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> l, <span class="type">int</span> h)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= h) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> partition(a, l, h);</span><br><span class="line">    quick(a, l, p - <span class="number">1</span>);</span><br><span class="line">    quick(a, p + <span class="number">1</span>, h);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">partition</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> l, <span class="type">int</span> h)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">pv</span> <span class="operator">=</span> a[l];</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> l;</span><br><span class="line">    <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> h;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">        <span class="comment">// j 从右找小的</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt; j &amp;&amp; a[j] &gt; pv) &#123;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// i 从左找大的</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt; j &amp;&amp; a[i] &lt;= pv) &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(a, i, j);</span><br><span class="line">    &#125;</span><br><span class="line">    swap(a, l, j);</span><br><span class="line">    System.out.println(Arrays.toString(a) + <span class="string">&quot; j=&quot;</span> + j);</span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>快排特点</strong></p><ol><li><p>平均时间复杂度是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mtext>⁡</mtext><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nlog_2⁡n )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">⁡</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>，最坏时间复杂度 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p></li><li><p>数据量较大时，优势非常明显</p></li><li><p>属于不稳定排序</p></li></ol><p><strong>洛穆托分区方案 vs 霍尔分区方案</strong></p><ul><li>霍尔的移动次数平均来讲比洛穆托少3倍</li><li><a href="https://qastack.cn/cs/11458/quicksort-partitioning-hoare-vs-lomuto">https://qastack.cn/cs/11458/quicksort-partitioning-hoare-vs-lomuto</a></li></ul><blockquote><p><em><strong>补充代码说明</strong></em></p><ul><li>day01.sort.QuickSort3 演示了空穴法改进的双边快排，比较次数更少</li><li>day01.sort.QuickSortHoare 演示了霍尔分区的实现</li><li>day01.sort.LomutoVsHoare 对四种分区实现的移动次数比较</li></ul></blockquote><h2 id="7-arraylist"><a class="markdownIt-Anchor" href="#7-arraylist"></a> 7. ArrayList</h2><p><strong>要求</strong></p><ul><li>掌握 ArrayList 扩容规则</li></ul><p><strong>扩容规则</strong></p><ol><li><p>ArrayList() 会使用长度为零的数组</p></li><li><p>ArrayList(int initialCapacity) 会使用指定容量的数组</p></li><li><p>public ArrayList(Collection&lt;? extends E&gt; c) 会使用 c 的大小作为数组容量</p></li><li><p>add(Object o) 首次扩容为 10，再次扩容为上次容量的 1.5 倍</p></li><li><p>addAll(Collection c) 没有元素时，扩容为 Math.max(10, 实际元素个数)，有元素时为 Math.max(原容量 1.5 倍, 实际元素个数)</p></li></ol><p>其中第 4 点必须知道，其它几点视个人情况而定</p><p><strong>提示</strong></p><ul><li>测试代码见 <code>day01.list.TestArrayList</code> ，这里不再列出</li><li>要<strong>注意</strong>的是，示例中用反射方式来更直观地反映 ArrayList 的扩容特征，但从 JDK 9 由于模块化的影响，对反射做了较多限制，需要在运行测试代码时添加 VM 参数 <code>--add-opens java.base/java.util=ALL-UNNAMED</code> 方能运行通过，后面的例子都有相同问题</li></ul><blockquote><p><em><strong>代码说明</strong></em></p><ul><li>day01.list.TestArrayList#arrayListGrowRule 演示了 add(Object) 方法的扩容规则，输入参数 n 代表打印多少次扩容后的数组长度</li></ul></blockquote><h2 id="8-iterator"><a class="markdownIt-Anchor" href="#8-iterator"></a> 8. Iterator</h2><p><strong>要求</strong></p><ul><li>掌握什么是 Fail-Fast、什么是 Fail-Safe</li></ul><p>Fail-Fast 与 Fail-Safe</p><ul><li><p>ArrayList 是 fail-fast 的典型代表，遍历的同时不能修改，尽快失败</p></li><li><p>CopyOnWriteArrayList 是 fail-safe 的典型代表，遍历的同时可以修改，原理是读写分离</p></li></ul><p><strong>提示</strong></p><ul><li>测试代码见 <code>day01.list.FailFastVsFailSafe</code>，这里不再列出</li></ul><h2 id="9-linkedlist"><a class="markdownIt-Anchor" href="#9-linkedlist"></a> 9. LinkedList</h2><p><strong>要求</strong></p><ul><li>能够说清楚 LinkedList 对比 ArrayList 的区别，并重视纠正部分错误的认知</li></ul><p><strong>LinkedList</strong></p><ol><li>基于双向链表，无需连续内存</li><li>随机访问慢（要沿着链表遍历）</li><li>头尾插入删除性能高</li><li>占用内存多</li></ol><p><strong>ArrayList</strong></p><ol><li>基于数组，需要连续内存</li><li>随机访问快（指根据下标访问）</li><li>尾部插入、删除性能可以，其它部分插入、删除都会移动数据，因此性能会低</li><li>可以利用 cpu 缓存，局部性原理</li></ol><blockquote><p><em><strong>代码说明</strong></em></p><ul><li>day01.list.ArrayListVsLinkedList#randomAccess 对比随机访问性能</li><li>day01.list.ArrayListVsLinkedList#addMiddle 对比向中间插入性能</li><li>day01.list.ArrayListVsLinkedList#addFirst 对比头部插入性能</li><li>day01.list.ArrayListVsLinkedList#addLast 对比尾部插入性能</li><li>day01.list.ArrayListVsLinkedList#linkedListSize 打印一个 LinkedList 占用内存</li><li>day01.list.ArrayListVsLinkedList#arrayListSize 打印一个 ArrayList 占用内存</li></ul></blockquote><h2 id="10-hashmap"><a class="markdownIt-Anchor" href="#10-hashmap"></a> 10. HashMap</h2><p><strong>要求</strong></p><ul><li>掌握 HashMap 的基本数据结构</li><li>掌握树化</li><li>理解索引计算方法、二次 hash 的意义、容量对索引计算的影响</li><li>掌握 put 流程、扩容、扩容因子</li><li>理解并发使用 HashMap 可能导致的问题</li><li>理解 key 的设计</li></ul><h3 id="1基本数据结构"><a class="markdownIt-Anchor" href="#1基本数据结构"></a> 1）基本数据结构</h3><ul><li>1.7 数组 + 链表</li><li>1.8 数组 + （链表 | 红黑树）</li></ul><blockquote><p>更形象的演示，见资料中的 hash-demo.jar，运行需要 jdk14 以上环境，进入 jar 包目录，执行下面命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar --add-exports java.base/jdk.internal.misc=ALL-UNNAMED hash-demo.jar</span><br></pre></td></tr></table></figure></blockquote><h3 id="2树化与退化"><a class="markdownIt-Anchor" href="#2树化与退化"></a> 2）树化与退化</h3><p><strong>树化意义</strong></p><ul><li>红黑树用来避免 DoS 攻击，防止链表超长时性能下降，树化应当是偶然情况，是保底策略</li><li>hash 表的查找，更新的时间复杂度是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>，而红黑树的查找，更新的时间复杂度是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mtext>⁡</mtext><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(log_2⁡n )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">⁡</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>，TreeNode 占用空间也比普通 Node 的大，如非必要，尽量还是使用链表</li><li>hash 值如果足够随机，则在 hash 表内按泊松分布，在负载因子 0.75 的情况下，长度超过 8 的链表出现概率是 0.00000006，树化阈值选择 8 就是为了让树化几率足够小</li></ul><p><strong>树化规则</strong></p><ul><li>当链表长度超过树化阈值 8 时，先尝试扩容来减少链表长度，如果数组容量已经 &gt;=64，才会进行树化</li></ul><p><strong>退化规则</strong></p><ul><li>情况1：在扩容时如果拆分树时，树元素个数 &lt;= 6 则会退化链表</li><li>情况2：remove 树节点时，若 root、root.left、root.right、root.left.left 有一个为 null ，也会退化为链表</li></ul><h3 id="3索引计算"><a class="markdownIt-Anchor" href="#3索引计算"></a> 3）索引计算</h3><p><strong>索引计算方法</strong></p><ul><li>首先，计算对象的 hashCode()</li><li>再进行调用 HashMap 的 hash() 方法进行二次哈希<ul><li>二次 hash() 是为了综合高位数据，让哈希分布更为均匀</li></ul></li><li>最后 &amp; (capacity – 1) 得到索引</li></ul><p><strong>数组容量为何是 2 的 n 次幂</strong></p><ol><li>计算索引时效率更高：如果是 2 的 n 次幂可以使用位与运算代替取模</li><li>扩容时重新计算索引效率更高： hash &amp; oldCap == 0 的元素留在原来位置 ，否则新位置 = 旧位置 + oldCap</li></ol><p><strong>注意</strong></p><ul><li>二次 hash 是为了配合 <strong>容量是 2 的 n 次幂</strong> 这一设计前提，如果 hash 表的容量不是 2 的 n 次幂，则不必二次 hash</li><li><strong>容量是 2 的 n 次幂</strong> 这一设计计算索引效率更好，但 hash 的分散性就不好，需要二次 hash 来作为补偿，没有采用这一设计的典型例子是 Hashtable</li></ul><h3 id="4put-与扩容"><a class="markdownIt-Anchor" href="#4put-与扩容"></a> 4）put 与扩容</h3><p><strong>put 流程</strong></p><ol><li>HashMap 是懒惰创建数组的，首次使用才创建数组</li><li>计算索引（桶下标）</li><li>如果桶下标还没人占用，创建 Node 占位返回</li><li>如果桶下标已经有人占用<ol><li>已经是 TreeNode 走红黑树的添加或更新逻辑</li><li>是普通 Node，走链表的添加或更新逻辑，如果链表长度超过树化阈值，走树化逻辑</li></ol></li><li>返回前检查容量是否超过阈值，一旦超过进行扩容</li></ol><p><strong>1.7 与 1.8 的区别</strong></p><ol><li><p>链表插入节点时，1.7 是头插法，1.8 是尾插法</p></li><li><p>1.7 是大于等于阈值且没有空位时才扩容，而 1.8 是大于阈值就扩容</p></li><li><p>1.8 在扩容计算 Node 索引时，会优化</p></li></ol><p><strong>扩容（加载）因子为何默认是 0.75f</strong></p><ol><li>在空间占用与查询时间之间取得较好的权衡</li><li>大于这个值，空间节省了，但链表就会比较长影响性能</li><li>小于这个值，冲突减少了，但扩容就会更频繁，空间占用也更多</li></ol><h3 id="5并发问题"><a class="markdownIt-Anchor" href="#5并发问题"></a> 5）并发问题</h3><p><strong>扩容死链（1.7 会存在）</strong></p><p>1.7 源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(Entry[] newTable, <span class="type">boolean</span> rehash)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> newTable.length;</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e : table) &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">null</span> != e) &#123;</span><br><span class="line">            Entry&lt;K,V&gt; next = e.next;</span><br><span class="line">            <span class="keyword">if</span> (rehash) &#123;</span><br><span class="line">                e.hash = <span class="literal">null</span> == e.key ? <span class="number">0</span> : hash(e.key);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> indexFor(e.hash, newCapacity);</span><br><span class="line">            e.next = newTable[i];</span><br><span class="line">            newTable[i] = e;</span><br><span class="line">            e = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>e 和 next 都是局部变量，用来指向当前节点和下一个节点</li><li>线程1（绿色）的临时变量 e 和 next 刚引用了这俩节点，还未来得及移动节点，发生了线程切换，由线程2（蓝色）完成扩容和迁移</li></ul><p><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210831084325075.png" alt="image-20210831084325075"></p><ul><li>线程2 扩容完成，由于头插法，链表顺序颠倒。但线程1 的临时变量 e 和 next 还引用了这俩节点，还要再来一遍迁移</li></ul><p><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210831084723383.png" alt="image-20210831084723383"></p><ul><li>第一次循环<ul><li>循环接着线程切换前运行，注意此时 e 指向的是节点 a，next 指向的是节点 b</li><li>e 头插 a 节点，注意图中画了两份 a 节点，但事实上只有一个（为了不让箭头特别乱画了两份）</li><li>当循环结束是 e 会指向 next 也就是 b 节点</li></ul></li></ul><p><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210831084855348.png" alt="image-20210831084855348"></p><ul><li>第二次循环<ul><li>next 指向了节点 a</li><li>e 头插节点 b</li><li>当循环结束时，e 指向 next 也就是节点 a</li></ul></li></ul><p><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210831085329449.png" alt="image-20210831085329449"></p><ul><li>第三次循环<ul><li>next 指向了 null</li><li>e 头插节点 a，<strong>a 的 next 指向了 b</strong>（之前 a.next 一直是 null），b 的 next 指向 a，死链已成</li><li>当循环结束时，e 指向 next 也就是 null，因此第四次循环时会正常退出</li></ul></li></ul><p><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210831085543224.png" alt="image-20210831085543224"></p><p><strong>数据错乱（1.7，1.8 都会存在）</strong></p><ul><li>代码参考 <code>day01.map.HashMapMissData</code>，具体调试步骤参考视频</li></ul><blockquote><p><em><strong>补充代码说明</strong></em></p><ul><li>day01.map.HashMapDistribution 演示 map 中链表长度符合泊松分布</li><li>day01.map.DistributionAffectedByCapacity 演示容量及 hashCode 取值对分布的影响<ul><li>day01.map.DistributionAffectedByCapacity#hashtableGrowRule 演示了 Hashtable 的扩容规律</li><li>day01.sort.Utils#randomArray 如果 hashCode 足够随机，容量是否是 2 的 n 次幂影响不大</li><li>day01.sort.Utils#lowSameArray 如果 hashCode 低位一样的多，容量是 2 的 n 次幂会导致分布不均匀</li><li>day01.sort.Utils#evenArray 如果 hashCode 偶数的多，容量是 2 的 n 次幂会导致分布不均匀</li><li>由此得出对于容量是 2 的 n 次幂的设计来讲，二次 hash 非常重要</li></ul></li><li>day01.map.HashMapVsHashtable 演示了对于同样数量的单词字符串放入 HashMap 和 Hashtable 分布上的区别</li></ul></blockquote><h3 id="6key-的设计"><a class="markdownIt-Anchor" href="#6key-的设计"></a> 6）key 的设计</h3><p><strong>key 的设计要求</strong></p><ol><li>HashMap 的 key 可以为 null，但 Map 的其他实现则不然</li><li>作为 key 的对象，必须实现 hashCode 和 equals，并且 key 的内容不能修改（不可变）</li><li>key 的 hashCode 应该有良好的散列性</li></ol><p>如果 key 可变，例如修改了 age 会导致再次查询时查询不到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashMapMutableKey</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        HashMap&lt;Student, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        map.put(stu, <span class="keyword">new</span> <span class="title class_">Object</span>());</span><br><span class="line"></span><br><span class="line">        System.out.println(map.get(stu));</span><br><span class="line"></span><br><span class="line">        stu.age = <span class="number">19</span>;</span><br><span class="line">        System.out.println(map.get(stu));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">        String name;</span><br><span class="line">        <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) o;</span><br><span class="line">            <span class="keyword">return</span> age == student.age &amp;&amp; Objects.equals(name, student.name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Objects.hash(name, age);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>String 对象的 hashCode() 设计</strong></p><ul><li>目标是达到较为均匀的散列效果，每个字符串的 hashCode 足够独特</li><li>字符串中的每个字符都可以表现为一个数字，称为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">S_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，其中 i 的范围是 0 ~ n - 1</li><li>散列公式为： <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mn>0</mn></msub><mtext>∗</mtext><mn>3</mn><msup><mn>1</mn><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msup><mo>+</mo><msub><mi>S</mi><mn>1</mn></msub><mtext>∗</mtext><mn>3</mn><msup><mn>1</mn><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo></mrow></msup><mo>+</mo><mo>…</mo><msub><mi>S</mi><mi>i</mi></msub><mtext>∗</mtext><mn>3</mn><msup><mn>1</mn><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo>−</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo>+</mo><mo>…</mo><msub><mi>S</mi><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msub><mtext>∗</mtext><mn>3</mn><msup><mn>1</mn><mn>0</mn></msup></mrow><annotation encoding="application/x-tex">S_0∗31^{(n-1)}+ S_1∗31^{(n-2)}+ … S_i ∗ 31^{(n-1-i)}+ …S_{(n-1)}∗31^0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0379999999999998em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∗</span><span class="mord">3</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0379999999999998em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∗</span><span class="mord">3</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">2</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0379999999999998em;vertical-align:-0.15em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∗</span><span class="mord">3</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1693079999999998em;vertical-align:-0.3551999999999999em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span><span class="mord">∗</span><span class="mord">3</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span></li><li>31 代入公式有较好的散列特性，并且 31 * h 可以被优化为<ul><li>即 $32 ∗h -h $</li><li>即 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>5</mn></msup><mtext>∗</mtext><mi>h</mi><mo>−</mo><mi>h</mi></mrow><annotation encoding="application/x-tex">2^5  ∗h -h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span><span class="mord">∗</span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">h</span></span></span></span></li><li>即 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo>≪</mo><mn>5</mn><mo>−</mo><mi>h</mi></mrow><annotation encoding="application/x-tex">h≪5  -h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≪</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">5</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">h</span></span></span></span></li></ul></li></ul><h2 id="11-单例模式"><a class="markdownIt-Anchor" href="#11-单例模式"></a> 11. 单例模式</h2><p><strong>要求</strong></p><ul><li>掌握五种单例模式的实现方式</li><li>理解为何 DCL 实现时要使用 volatile 修饰静态变量</li><li>了解 jdk 中用到单例的场景</li></ul><p><strong>饿汉式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton1</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (INSTANCE != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;单例对象不能重复创建&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;private Singleton1()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton1</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton1</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton1 <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">otherMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;otherMethod()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">readResolve</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>构造方法抛出异常是防止反射破坏单例</li><li><code>readResolve()</code> 是防止反序列化破坏单例</li></ul><p><strong>枚举饿汉式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Singleton2</span> &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;private Singleton2()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getClass().getName() + <span class="string">&quot;@&quot;</span> + Integer.toHexString(hashCode());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton2 <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">otherMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;otherMethod()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>枚举饿汉式能天然防止反射、反序列化破坏单例</li></ul><p><strong>懒汉式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton3</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton3</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;private Singleton3()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton3</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Singleton3.class</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton3 <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (INSTANCE == <span class="literal">null</span>) &#123;</span><br><span class="line">            INSTANCE = <span class="keyword">new</span> <span class="title class_">Singleton3</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">otherMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;otherMethod()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>其实只有首次创建单例对象时才需要同步，但该代码实际上每次调用都会同步</li><li>因此有了下面的双检锁改进</li></ul><p><strong>双检锁懒汉式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton4</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton4</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;private Singleton4()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">Singleton4</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="literal">null</span>; <span class="comment">// 可见性，有序性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton4 <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (INSTANCE == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton4.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (INSTANCE == <span class="literal">null</span>) &#123;</span><br><span class="line">                    INSTANCE = <span class="keyword">new</span> <span class="title class_">Singleton4</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">otherMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;otherMethod()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为何必须加 volatile：</p><ul><li><code>INSTANCE = new Singleton4()</code> 不是原子的，分成 3 步：创建对象、调用构造、给静态变量赋值，其中后两步可能被指令重排序优化，变成先赋值、再调用构造</li><li>如果线程1 先执行了赋值，线程2 执行到第一个 <code>INSTANCE == null</code> 时发现 INSTANCE 已经不为 null，此时就会返回一个未完全构造的对象</li></ul><p><strong>内部类懒汉式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton5</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton5</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;private Singleton5()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Holder</span> &#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="type">Singleton5</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton5</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton5 <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Holder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">otherMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;otherMethod()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>避免了双检锁的缺点</li></ul><p><strong>JDK 中单例的体现</strong></p><ul><li>Runtime 体现了饿汉式单例</li><li>Console 体现了双检锁懒汉式单例</li><li>Collections 中的 EmptyNavigableSet 内部类懒汉式单例</li><li>ReverseComparator.REVERSE_ORDER 内部类懒汉式单例</li><li>Comparators.NaturalOrderComparator.INSTANCE 枚举饿汉式单例</li></ul><h1 id="并发篇"><a class="markdownIt-Anchor" href="#并发篇"></a> 并发篇</h1><h2 id="1-线程状态"><a class="markdownIt-Anchor" href="#1-线程状态"></a> 1. 线程状态</h2><p><strong>要求</strong></p><ul><li>掌握 Java 线程六种状态</li><li>掌握 Java 线程状态转换</li><li>能理解五种状态与六种状态两种说法的区别</li></ul><p><strong>六种状态及转换</strong></p><p><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210831090722658.png" alt="image-20210831090722658"></p><p>分别是</p><ul><li>新建<ul><li>当一个线程对象被创建，但还未调用 start 方法时处于<strong>新建</strong>状态</li><li>此时未与操作系统底层线程关联</li></ul></li><li>可运行<ul><li>调用了 start 方法，就会由<strong>新建</strong>进入<strong>可运行</strong></li><li>此时与底层线程关联，由操作系统调度执行</li></ul></li><li>终结<ul><li>线程内代码已经执行完毕，由<strong>可运行</strong>进入<strong>终结</strong></li><li>此时会取消与底层线程关联</li></ul></li><li>阻塞<ul><li>当获取锁失败后，由<strong>可运行</strong>进入 Monitor 的阻塞队列<strong>阻塞</strong>，此时不占用 cpu 时间</li><li>当持锁线程释放锁时，会按照一定规则唤醒阻塞队列中的<strong>阻塞</strong>线程，唤醒后的线程进入<strong>可运行</strong>状态</li></ul></li><li>等待<ul><li>当获取锁成功后，但由于条件不满足，调用了 wait() 方法，此时从<strong>可运行</strong>状态释放锁进入 Monitor 等待集合<strong>等待</strong>，同样不占用 cpu 时间</li><li>当其它持锁线程调用 notify() 或 notifyAll() 方法，会按照一定规则唤醒等待集合中的<strong>等待</strong>线程，恢复为<strong>可运行</strong>状态</li></ul></li><li>有时限等待<ul><li>当获取锁成功后，但由于条件不满足，调用了 wait(long) 方法，此时从<strong>可运行</strong>状态释放锁进入 Monitor 等待集合进行<strong>有时限等待</strong>，同样不占用 cpu 时间</li><li>当其它持锁线程调用 notify() 或 notifyAll() 方法，会按照一定规则唤醒等待集合中的<strong>有时限等待</strong>线程，恢复为<strong>可运行</strong>状态，并重新去竞争锁</li><li>如果等待超时，也会从<strong>有时限等待</strong>状态恢复为<strong>可运行</strong>状态，并重新去竞争锁</li><li>还有一种情况是调用 sleep(long) 方法也会从<strong>可运行</strong>状态进入<strong>有时限等待</strong>状态，但与 Monitor 无关，不需要主动唤醒，超时时间到自然恢复为<strong>可运行</strong>状态</li></ul></li></ul><blockquote><p><em><strong>其它情况（只需了解）</strong></em></p><ul><li>可以用 interrupt() 方法打断<strong>等待</strong>、<strong>有时限等待</strong>的线程，让它们恢复为<strong>可运行</strong>状态</li><li>park，unpark 等方法也可以让线程等待和唤醒</li></ul></blockquote><p><strong>五种状态</strong></p><p>五种状态的说法来自于操作系统层面的划分</p><p><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210831092652602.png" alt="image-20210831092652602"></p><ul><li>运行态：分到 cpu 时间，能真正执行线程内代码的</li><li>就绪态：有资格分到 cpu 时间，但还未轮到它的</li><li>阻塞态：没资格分到 cpu 时间的<ul><li>涵盖了 java 状态中提到的<strong>阻塞</strong>、<strong>等待</strong>、<strong>有时限等待</strong></li><li>多出了阻塞 I/O，指线程在调用阻塞 I/O 时，实际活由 I/O 设备完成，此时线程无事可做，只能干等</li></ul></li><li>新建与终结态：与 java 中同名状态类似，不再啰嗦</li></ul><h2 id="2-线程池"><a class="markdownIt-Anchor" href="#2-线程池"></a> 2. 线程池</h2><p><strong>要求</strong></p><ul><li>掌握线程池的 7 大核心参数</li></ul><p><strong>七大参数</strong></p><ol><li>corePoolSize 核心线程数目 - 池中会保留的最多线程数</li><li>maximumPoolSize 最大线程数目 - 核心线程+救急线程的最大数目</li><li>keepAliveTime 生存时间 - 救急线程的生存时间，生存时间内没有新任务，此线程资源会释放</li><li>unit 时间单位 - 救急线程的生存时间单位，如秒、毫秒等</li><li>workQueue - 当没有空闲核心线程时，新来任务会加入到此队列排队，队列满会创建救急线程执行任务</li><li>threadFactory 线程工厂 - 可以定制线程对象的创建，例如设置线程名字、是否是守护线程等</li><li>handler 拒绝策略 - 当所有线程都在繁忙，workQueue 也放满时，会触发拒绝策略<ol><li>AbortPolicy：抛异常 java.util.concurrent.ThreadPoolExecutor.AbortPolicy</li><li>CallerRunsPolicy：由调用者执行任务 java.util.concurrent.ThreadPoolExecutor.CallerRunsPolicy</li><li>DiscardPolicy：丢弃任务 java.util.concurrent.ThreadPoolExecutor.DiscardPolicy</li><li>DiscardOldestPolicy：丢弃最早排队任务 java.util.concurrent.ThreadPoolExecutor.DiscardOldestPolicy</li></ol></li></ol><p><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210831093204388.png" alt="image-20210831093204388"></p><blockquote><p><em><strong>代码说明</strong></em></p><p>day02.TestThreadPoolExecutor 以较为形象的方式演示了线程池的核心组成</p></blockquote><h2 id="3-wait-vs-sleep"><a class="markdownIt-Anchor" href="#3-wait-vs-sleep"></a> 3. wait vs sleep</h2><p><strong>要求</strong></p><ul><li>能够说出二者区别</li></ul><p><strong>一个共同点，三个不同点</strong></p><p>共同点</p><ul><li>wait() ，wait(long) 和 sleep(long) 的效果都是让当前线程暂时放弃 CPU 的使用权，进入阻塞状态</li></ul><p>不同点</p><ul><li><p>方法归属不同</p><ul><li>sleep(long) 是 Thread 的静态方法</li><li>而 wait()，wait(long) 都是 Object 的成员方法，每个对象都有</li></ul></li><li><p>醒来时机不同</p><ul><li>执行 sleep(long) 和 wait(long) 的线程都会在等待相应毫秒后醒来</li><li>wait(long) 和 wait() 还可以被 notify 唤醒，wait() 如果不唤醒就一直等下去</li><li>它们都可以被打断唤醒</li></ul></li><li><p>锁特性不同（重点）</p><ul><li>wait 方法的调用必须先获取 wait 对象的锁，而 sleep 则无此限制</li><li>wait 方法执行后会释放对象锁，允许其它线程获得该对象锁（我放弃 cpu，但你们还可以用）</li><li>而 sleep 如果在 synchronized 代码块中执行，并不会释放对象锁（我放弃 cpu，你们也用不了）</li></ul></li></ul><h2 id="4-lock-vs-synchronized"><a class="markdownIt-Anchor" href="#4-lock-vs-synchronized"></a> 4. lock vs synchronized</h2><p><strong>要求</strong></p><ul><li>掌握 lock 与 synchronized 的区别</li><li>理解 ReentrantLock 的公平、非公平锁</li><li>理解 ReentrantLock 中的条件变量</li></ul><p><strong>三个层面</strong></p><p>不同点</p><ul><li>语法层面<ul><li>synchronized 是关键字，源码在 jvm 中，用 c++ 语言实现</li><li>Lock 是接口，源码由 jdk 提供，用 java 语言实现</li><li>使用 synchronized 时，退出同步代码块锁会自动释放，而使用 Lock 时，需要手动调用 unlock 方法释放锁</li></ul></li><li>功能层面<ul><li>二者均属于悲观锁、都具备基本的互斥、同步、锁重入功能</li><li>Lock 提供了许多 synchronized 不具备的功能，例如获取等待状态、公平锁、可打断、可超时、多条件变量</li><li>Lock 有适合不同场景的实现，如 ReentrantLock， ReentrantReadWriteLock</li></ul></li><li>性能层面<ul><li>在没有竞争时，synchronized 做了很多优化，如偏向锁、轻量级锁，性能不赖</li><li>在竞争激烈时，Lock 的实现通常会提供更好的性能</li></ul></li></ul><p><strong>公平锁</strong></p><ul><li>公平锁的公平体现<ul><li><strong>已经处在阻塞队列</strong>中的线程（不考虑超时）始终都是公平的，先进先出</li><li>公平锁是指<strong>未处于阻塞队列</strong>中的线程来争抢锁，如果队列不为空，则老实到队尾等待</li><li>非公平锁是指<strong>未处于阻塞队列</strong>中的线程来争抢锁，与队列头唤醒的线程去竞争，谁抢到算谁的</li></ul></li><li>公平锁会降低吞吐量，一般不用</li></ul><p><strong>条件变量</strong></p><ul><li>ReentrantLock 中的条件变量功能类似于普通 synchronized 的 wait，notify，用在当线程获得锁后，发现条件不满足时，临时等待的链表结构</li><li>与 synchronized 的等待集合不同之处在于，ReentrantLock 中的条件变量可以有多个，可以实现更精细的等待、唤醒控制</li></ul><blockquote><p><em><strong>代码说明</strong></em></p><ul><li>day02.TestReentrantLock 用较为形象的方式演示 ReentrantLock 的内部结构</li></ul></blockquote><h2 id="5-volatile"><a class="markdownIt-Anchor" href="#5-volatile"></a> 5. volatile</h2><p><strong>要求</strong></p><ul><li>掌握线程安全要考虑的三个问题</li><li>掌握 volatile 能解决哪些问题</li></ul><p><strong>原子性</strong></p><ul><li>起因：多线程下，不同线程的<strong>指令发生了交错</strong>导致的共享变量的读写混乱</li><li>解决：用悲观锁或乐观锁解决，volatile 并不能解决原子性</li></ul><p><strong>可见性</strong></p><ul><li>起因：由于<strong>编译器优化、或缓存优化、或 CPU 指令重排序优化</strong>导致的对共享变量所做的修改另外的线程看不到</li><li>解决：用 volatile 修饰共享变量，能够防止编译器等优化发生，让一个线程对共享变量的修改对另一个线程可见</li></ul><p><strong>有序性</strong></p><ul><li>起因：由于<strong>编译器优化、或缓存优化、或 CPU 指令重排序优化</strong>导致指令的实际执行顺序与编写顺序不一致</li><li>解决：用 volatile 修饰共享变量会在读、写共享变量时加入不同的屏障，阻止其他读写操作越过屏障，从而达到阻止重排序的效果</li><li>注意：<ul><li><strong>volatile 变量写</strong>加的屏障是阻止上方其它写操作越过屏障排到 <strong>volatile 变量写</strong>之下</li><li><strong>volatile 变量读</strong>加的屏障是阻止下方其它读操作越过屏障排到 <strong>volatile 变量读</strong>之上</li><li>volatile 读写加入的屏障只能防止同一线程内的指令重排</li></ul></li></ul><blockquote><p><em><strong>代码说明</strong></em></p><ul><li>day02.threadsafe.AddAndSubtract 演示原子性</li><li>day02.threadsafe.ForeverLoop 演示可见性<ul><li>注意：本例经实践检验是编译器优化导致的可见性问题</li></ul></li><li>day02.threadsafe.Reordering 演示有序性<ul><li>需要打成 jar 包后测试</li></ul></li><li>请同时参考视频讲解</li></ul></blockquote><h2 id="6-悲观锁-vs-乐观锁"><a class="markdownIt-Anchor" href="#6-悲观锁-vs-乐观锁"></a> 6. 悲观锁 vs 乐观锁</h2><p><strong>要求</strong></p><ul><li>掌握悲观锁和乐观锁的区别</li></ul><p><strong>对比悲观锁与乐观锁</strong></p><ul><li><p>悲观锁的代表是 synchronized 和 Lock 锁</p><ul><li>其核心思想是【线程只有占有了锁，才能去操作共享变量，每次只有一个线程占锁成功，获取锁失败的线程，都得停下来等待】</li><li>线程从运行到阻塞、再从阻塞到唤醒，涉及线程上下文切换，如果频繁发生，影响性能</li><li>实际上，线程在获取 synchronized 和 Lock 锁时，如果锁已被占用，都会做几次重试操作，减少阻塞的机会</li></ul></li><li><p>乐观锁的代表是 AtomicInteger，使用 cas 来保证原子性</p><ul><li>其核心思想是【无需加锁，每次只有一个线程能成功修改共享变量，其它失败的线程不需要停止，不断重试直至成功】</li><li>由于线程一直运行，不需要阻塞，因此不涉及线程上下文切换</li><li>它需要多核 cpu 支持，且线程数不应超过 cpu 核数</li></ul></li></ul><blockquote><p><em><strong>代码说明</strong></em></p><ul><li>day02.SyncVsCas 演示了分别使用乐观锁和悲观锁解决原子赋值</li><li>请同时参考视频讲解</li></ul></blockquote><h2 id="7-hashtable-vs-concurrenthashmap"><a class="markdownIt-Anchor" href="#7-hashtable-vs-concurrenthashmap"></a> 7. Hashtable vs ConcurrentHashMap</h2><p><strong>要求</strong></p><ul><li>掌握 Hashtable 与 ConcurrentHashMap 的区别</li><li>掌握 ConcurrentHashMap 在不同版本的实现区别</li></ul><blockquote><p>更形象的演示，见资料中的 hash-demo.jar，运行需要 jdk14 以上环境，进入 jar 包目录，执行下面命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar --add-exports java.base/jdk.internal.misc=ALL-UNNAMED hash-demo.jar</span><br></pre></td></tr></table></figure></blockquote><p><strong>Hashtable 对比 ConcurrentHashMap</strong></p><ul><li>Hashtable 与 ConcurrentHashMap 都是线程安全的 Map 集合</li><li>Hashtable 并发度低，整个 Hashtable 对应一把锁，同一时刻，只能有一个线程操作它</li><li>ConcurrentHashMap 并发度高，整个 ConcurrentHashMap 对应多把锁，只要线程访问的是不同锁，那么不会冲突</li></ul><p><strong>ConcurrentHashMap 1.7</strong></p><ul><li>数据结构：<code>Segment(大数组) + HashEntry(小数组) + 链表</code>，每个 Segment 对应一把锁，如果多个线程访问不同的 Segment，则不会冲突</li><li>并发度：Segment 数组大小即并发度，决定了同一时刻最多能有多少个线程并发访问。Segment 数组不能扩容，意味着并发度在 ConcurrentHashMap 创建时就固定了</li><li>索引计算<ul><li>假设大数组长度是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>m</mi></msup></mrow><annotation encoding="application/x-tex">2^m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span></span></span></span></span></span></span>，key 在大数组内的索引是 key 的二次 hash 值的高 m 位</li><li>假设小数组长度是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span>，key 在小数组内的索引是 key 的二次 hash 值的低 n 位</li></ul></li><li>扩容：每个小数组的扩容相对独立，小数组在超过扩容因子时会触发扩容，每次扩容翻倍</li><li>Segment[0] 原型：首次创建其它小数组时，会以此原型为依据，数组长度，扩容因子都会以原型为准</li></ul><p><strong>ConcurrentHashMap 1.8</strong></p><ul><li>数据结构：<code>Node 数组 + 链表或红黑树</code>，数组的每个头节点作为锁，如果多个线程访问的头节点不同，则不会冲突。一个位置上<strong>首次</strong>生成头节点时如果发生竞争，利用 cas 而非 syncronized，进一步提升性能。后续继续在这个位置上添加节点才会利用syncronized。</li><li>并发度：Node 数组有多大，并发度就有多大，与 1.7 不同，Node 数组可以扩容</li><li>扩容条件：Node 数组满 3/4 时就会扩容</li><li>扩容单位：以链表为单位从后向前迁移链表，迁移完成的将旧数组头节点替换为 ForwardingNode</li><li>扩容时并发 get<ul><li>根据是否为 ForwardingNode 来决定是在新数组查找还是在旧数组查找，不会阻塞</li><li>如果链表长度超过 1，则需要对节点进行复制（创建新节点），怕的是节点迁移后 next 指针改变</li><li>如果链表最后几个元素扩容后索引不变，则节点无需复制</li></ul></li><li>扩容时并发 put<ul><li>如果 put 的线程与扩容线程操作的链表是同一个，put 线程会阻塞</li><li>如果 put 的线程操作的链表还未迁移完成，即头节点不是 ForwardingNode，则可以并发执行</li><li>如果 put 的线程操作的链表已经迁移完成，即头结点是 ForwardingNode，则可以协助扩容</li></ul></li><li>与 1.7 相比是懒惰初始化</li><li>capacity 代表预估的元素个数，capacity / factory 来计算出初始数组大小，需要贴近 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span></li><li>loadFactor 只在计算初始数组大小时被使用，之后扩容固定为 3/4</li><li>超过树化阈值时的扩容问题，如果容量已经是 64，直接树化，否则在原来容量基础上做 3 轮扩容</li></ul><h2 id="8-threadlocal"><a class="markdownIt-Anchor" href="#8-threadlocal"></a> 8. ThreadLocal</h2><p><strong>要求</strong></p><ul><li>掌握 ThreadLocal 的作用与原理</li><li>掌握 ThreadLocal 的内存释放时机</li></ul><p><strong>作用</strong></p><ul><li>ThreadLocal 可以实现【资源对象】的线程隔离，让每个线程各用各的【资源对象】，避免争用引发的线程安全问题</li><li>ThreadLocal 同时实现了线程内的资源共享</li></ul><p><strong>原理</strong></p><p>每个线程内有一个 ThreadLocalMap 类型的成员变量，用来存储资源对象</p><ul><li>调用 set 方法，就是以 ThreadLocal 自己作为 key，资源对象作为 value，放入当前线程的 ThreadLocalMap 集合中</li><li>调用 get 方法，就是以 ThreadLocal 自己作为 key，到当前线程中查找关联的资源值</li><li>调用 remove 方法，就是以 ThreadLocal 自己作为 key，移除当前线程关联的资源值</li></ul><p>ThreadLocalMap 的一些特点</p><ul><li>key 的 hash 值统一分配</li><li>初始容量 16，扩容因子 2/3，扩容容量翻倍</li><li>key 索引冲突后用开放寻址法解决冲突</li></ul><p><strong>弱引用 key</strong></p><p>ThreadLocalMap 中的 key 被设计为弱引用，原因如下</p><ul><li>Thread 可能需要长时间运行（如线程池中的线程），如果 key 不再使用，需要在内存不足（GC）时释放其占用的内存</li></ul><p><strong>内存释放时机</strong></p><ul><li>被动 GC 释放 key<ul><li>仅是让 key 的内存释放，关联 value 的内存并不会释放</li></ul></li><li>懒惰被动释放 value<ul><li>get key 时，发现是 null key，则释放其 value 内存</li><li>set key 时，会使用启发式扫描，清除临近的 null key 的 value 内存，启发次数与元素个数，是否发现 null key 有关</li></ul></li><li>主动 remove 释放 key，value<ul><li>会同时释放 key，value 的内存，也会清除临近的 null key 的 value 内存</li><li>推荐使用它，因为一般使用 ThreadLocal 时都把它作为静态变量（即强引用），因此无法被动依靠 GC 回收</li></ul></li></ul><h1 id="虚拟机篇"><a class="markdownIt-Anchor" href="#虚拟机篇"></a> 虚拟机篇</h1><h2 id="1-jvm-内存结构"><a class="markdownIt-Anchor" href="#1-jvm-内存结构"></a> 1. JVM 内存结构</h2><p><strong>要求</strong></p><ul><li>掌握 JVM 内存结构划分</li><li>尤其要知道方法区、永久代、元空间的关系</li></ul><p><strong>结合一段 java 代码的执行理解内存划分</strong></p><p><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210831165728217.png" alt="image-20210831165728217"></p><ul><li>执行 javac 命令编译源代码为字节码</li><li>执行 java 命令<ol><li>创建 JVM，调用类加载子系统加载 class，将类的信息存入<strong>方法区</strong></li><li>创建 main 线程，使用的内存区域是 <strong>JVM 虚拟机栈</strong>，开始执行 main 方法代码</li><li>如果遇到了未见过的类，会继续触发类加载过程，同样会存入<strong>方法区</strong></li><li>需要创建对象，会使用<strong>堆</strong>内存来存储对象</li><li>不再使用的对象，会由<strong>垃圾回收器</strong>在内存不足时回收其内存</li><li>调用方法时，方法内的局部变量、方法参数所使用的是  <strong>JVM 虚拟机栈</strong>中的栈帧内存</li><li>调用方法时，先要到<strong>方法区</strong>获得到该方法的字节码指令，由<strong>解释器</strong>将字节码指令解释为机器码执行</li><li>调用方法时，会将要执行的指令行号读到<strong>程序计数器</strong>，这样当发生了线程切换，恢复时就可以从中断的位置继续</li><li>对于非 java 实现的方法调用，使用内存称为<strong>本地方法栈</strong>（见说明）</li><li>对于热点方法调用，或者频繁的循环代码，由 <strong>JIT 即时编译器</strong>将这些代码编译成机器码缓存，提高执行性能</li></ol></li></ul><p>说明</p><ul><li>加粗字体代表了 JVM 虚拟机组件</li><li>对于 Oracle 的 Hotspot 虚拟机实现，不区分虚拟机栈和本地方法栈</li></ul><p><strong>会发生内存溢出的区域</strong></p><ul><li>不会出现内存溢出的区域 – 程序计数器</li><li>出现 OutOfMemoryError 的情况<ul><li>堆内存耗尽 – 对象越来越多，又一直在使用，不能被垃圾回收</li><li>方法区内存耗尽 – 加载的类越来越多，很多框架都会在运行期间动态产生新的类</li><li>虚拟机栈累积 – 每个线程最多会占用 1 M 内存，线程个数越来越多，而又长时间运行不销毁时</li></ul></li><li>出现 StackOverflowError 的区域<ul><li>JVM 虚拟机栈，原因有方法递归调用未正确结束、反序列化 json 时循环引用</li></ul></li></ul><p><strong>方法区、永久代、元空间</strong></p><ul><li><strong>方法区</strong>是 JVM 规范中定义的一块内存区域，用来存储类元数据、方法字节码、即时编译器需要的信息等</li><li><strong>永久代</strong>是 Hotspot 虚拟机对 JVM 规范的实现（1.8 之前）</li><li><strong>元空间</strong>是 Hotspot 虚拟机对 JVM 规范的另一种实现（1.8 以后），使用本地内存作为这些信息的存储空间</li></ul><p><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210831170457337.png" alt="image-20210831170457337"></p><p>从这张图学到三点</p><ul><li>当第一次用到某个类是，由类加载器将 class 文件的类元信息读入，并存储于元空间</li><li>X，Y 的类元信息是存储于元空间中，无法直接访问</li><li>可以用 X.class，Y.class 间接访问类元信息，它们俩属于 java 对象，我们的代码中可以使用</li></ul><p><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210831170512418.png" alt="image-20210831170512418"></p><p>从这张图可以学到</p><ul><li>堆内存中：当一个<strong>类加载器对象</strong>，这个类加载器对象加载的所有<strong>类对象</strong>，这些类对象对应的所有<strong>实例对象</strong>都没人引用时，GC 时就会对它们占用的对内存进行释放</li><li>元空间中：内存释放<strong>以类加载器为单位</strong>，当堆中类加载器内存释放时，对应的元空间中的类元信息也会释放</li></ul><h2 id="2-jvm-内存参数"><a class="markdownIt-Anchor" href="#2-jvm-内存参数"></a> 2. JVM 内存参数</h2><p><strong>要求</strong></p><ul><li>熟悉常见的 JVM 参数，尤其和大小相关的</li></ul><p><strong>堆内存，按大小设置</strong></p><p><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210831173130717.png" alt="image-20210831173130717"></p><p>解释：</p><ul><li>-Xms 最小堆内存（包括新生代和老年代）</li><li>-Xmx 最大对内存（包括新生代和老年代）</li><li>通常建议将 -Xms 与 -Xmx 设置为大小相等，即不需要保留内存，不需要从小到大增长，这样性能较好</li><li>-XX:NewSize 与 -XX:MaxNewSize 设置新生代的最小与最大值，但一般不建议设置，由 JVM 自己控制</li><li>-Xmn 设置新生代大小，相当于同时设置了 -XX:NewSize 与 -XX:MaxNewSize 并且取值相等</li><li>保留是指，一开始不会占用那么多内存，随着使用内存越来越多，会逐步使用这部分保留内存。下同</li></ul><p><strong>堆内存，按比例设置</strong></p><p><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210831173045700.png" alt="image-20210831173045700"></p><p>解释：</p><ul><li>-XX:NewRatio=2:1 表示老年代占两份，新生代占一份</li><li>-XX:SurvivorRatio=4:1 表示新生代分成六份，伊甸园占四份，from 和 to 各占一份</li></ul><p><strong>元空间内存设置</strong></p><p><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210831173118634.png" alt="image-20210831173118634"></p><p>解释：</p><ul><li>class space 存储类的基本信息，最大值受 -XX:CompressedClassSpaceSize 控制</li><li>non-class space 存储除类的基本信息以外的其它信息（如方法字节码、注解等）</li><li>class space 和 non-class space 总大小受 -XX:MaxMetaspaceSize 控制</li></ul><p>注意：</p><ul><li>这里 -XX:CompressedClassSpaceSize 这段空间还与是否开启了指针压缩有关，这里暂不深入展开，可以简单认为指针压缩默认开启</li></ul><p><strong>代码缓存内存设置</strong></p><p><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210831173148816.png" alt="image-20210831173148816"></p><p>解释：</p><ul><li>如果 -XX:ReservedCodeCacheSize &lt; 240m，所有优化机器代码不加区分存在一起</li><li>否则，分成三个区域（图中笔误 mthod 拼写错误，少一个 e）<ul><li>non-nmethods - JVM 自己用的代码</li><li>profiled nmethods - 部分优化的机器码</li><li>non-profiled nmethods - 完全优化的机器码</li></ul></li></ul><p><strong>线程内存设置</strong></p><p><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210831173155481.png" alt="image-20210831173155481"></p><blockquote><p><em><strong>官方参考文档</strong></em></p><ul><li><a href="https://docs.oracle.com/en/java/javase/11/tools/java.html#GUID-3B1CE181-CD30-4178-9602-230B800D4FAE">https://docs.oracle.com/en/java/javase/11/tools/java.html#GUID-3B1CE181-CD30-4178-9602-230B800D4FAE</a></li></ul></blockquote><h2 id="3-jvm-垃圾回收"><a class="markdownIt-Anchor" href="#3-jvm-垃圾回收"></a> 3. JVM 垃圾回收</h2><p><strong>要求</strong></p><ul><li>掌握垃圾回收算法</li><li>掌握分代回收思想</li><li>理解三色标记及漏标处理</li><li>了解常见垃圾回收器</li></ul><p><strong>三种垃圾回收算法</strong></p><p>标记清除法</p><p><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210831211008162.png" alt="image-20210831211008162"></p><p>解释：</p><ol><li>找到 GC Root 对象，即那些一定不会被回收的对象，如正执行方法内局部变量引用的对象、静态变量引用的对象</li><li>标记阶段：沿着 GC Root 对象的引用链找，直接或间接引用到的对象加上标记</li><li>清除阶段：释放未加标记的对象占用的内存</li></ol><p>要点：</p><ul><li>标记速度与存活对象线性关系</li><li>清除速度与内存大小线性关系</li><li>缺点是会产生内存碎片</li></ul><p>标记整理法</p><p><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210831211641241.png" alt="image-20210831211641241"></p><p>解释：</p><ol><li>前面的标记阶段、清理阶段与标记清除法类似</li><li>多了一步整理的动作，将存活对象向一端移动，可以避免内存碎片产生</li></ol><p>特点：</p><ul><li><p>标记速度与存活对象线性关系</p></li><li><p>清除与整理速度与内存大小成线性关系</p></li><li><p>缺点是性能上较慢</p></li></ul><p>标记复制法</p><p><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210831212125813.png" alt="image-20210831212125813"></p><p>解释：</p><ol><li>将整个内存分成两个大小相等的区域，from 和 to，其中 to 总是处于空闲，from 存储新创建的对象</li><li>标记阶段与前面的算法类似</li><li>在找出存活对象后，会将它们从 from 复制到 to 区域，复制的过程中自然完成了碎片整理</li><li>复制完成后，交换 from 和 to 的位置即可</li></ol><p>特点：</p><ul><li>标记与复制速度与存活对象成线性关系</li><li>缺点是会占用成倍的空间</li></ul><p><strong>GC 与分代回收算法</strong></p><p>GC 的目的在于实现无用对象内存自动释放，减少内存碎片、加快分配速度</p><p>GC 要点：</p><ul><li>回收区域是<strong>堆内存</strong>，不包括虚拟机栈</li><li>判断无用对象，使用<strong>可达性分析算法</strong>，<strong>三色标记法</strong>标记存活对象，回收未标记对象</li><li>GC 具体的实现称为<strong>垃圾回收器</strong></li><li>GC 大都采用了<strong>分代回收思想</strong><ul><li>理论依据是大部分对象朝生夕灭，用完立刻就可以回收，另有少部分对象会长时间存活，每次很难回收</li><li>根据这两类对象的特性将回收区域分为<strong>新生代</strong>和<strong>老年代</strong>，新生代采用标记复制法、老年代一般采用标记整理法</li></ul></li><li>根据 GC 的规模可以分成 <strong>Minor GC</strong>，<strong>Mixed GC</strong>，<strong>Full GC</strong></li></ul><p><strong>分代回收</strong></p><ol><li>伊甸园 eden，最初对象都分配到这里，与幸存区 survivor（分成 from 和 to）合称新生代，</li></ol><p><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210831213622704.png" alt="image-20210831213622704"></p><ol start="2"><li>当伊甸园内存不足，标记伊甸园与 from（现阶段没有）的存活对象</li></ol><p><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210831213640110.png" alt="image-20210831213640110"></p><ol start="3"><li>将存活对象采用复制算法复制到 to 中，复制完毕后，伊甸园和 from 内存都得到释放</li></ol><p><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210831213657861.png" alt="image-20210831213657861"></p><ol start="4"><li>将 from 和 to 交换位置</li></ol><p><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210831213708776.png" alt="image-20210831213708776"></p><ol start="5"><li>经过一段时间后伊甸园的内存又出现不足</li></ol><p><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210831213724858.png" alt="image-20210831213724858"></p><ol start="6"><li>标记伊甸园与 from（现阶段没有）的存活对象</li></ol><p><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210831213737669.png" alt="image-20210831213737669"></p><ol start="7"><li>将存活对象采用复制算法复制到 to 中</li></ol><p><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210831213804315.png" alt="image-20210831213804315"></p><ol start="8"><li>复制完毕后，伊甸园和 from 内存都得到释放</li></ol><p><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210831213815371.png" alt="image-20210831213815371"></p><ol start="9"><li>将 from 和 to 交换位置</li></ol><p><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210831213826017.png" alt="image-20210831213826017"></p><ol start="10"><li>老年代 old，当幸存区对象熬过几次回收（最多15次），晋升到老年代（幸存区内存不足或大对象会导致提前晋升）</li></ol><p><strong>GC 规模</strong></p><ul><li><p>Minor GC 发生在新生代的垃圾回收，暂停时间短</p></li><li><p>Mixed GC 新生代 + 老年代部分区域的垃圾回收，G1 收集器特有</p></li><li><p>Full GC 新生代 + 老年代完整垃圾回收，暂停时间长，<strong>应尽力避免</strong></p></li></ul><p><strong>三色标记</strong></p><p>即用三种颜色记录对象的标记状态</p><ul><li>黑色 – 已标记</li><li>灰色 – 标记中</li><li>白色 – 还未标记</li></ul><ol><li>起始的三个对象还未处理完成，用灰色表示</li></ol><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210831215016566.png" alt="image-20210831215016566" style="zoom:50%;"><ol start="2"><li>该对象的引用已经处理完成，用黑色表示，黑色引用的对象变为灰色</li></ol><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210831215033510.png" alt="image-20210831215033510" style="zoom:50%;"><ol start="3"><li>依次类推</li></ol><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210831215105280.png" alt="image-20210831215105280" style="zoom:50%;"><ol start="4"><li>沿着引用链都标记了一遍</li></ol><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210831215146276.png" alt="image-20210831215146276" style="zoom:50%;"><ol start="5"><li>最后为标记的白色对象，即为垃圾</li></ol><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210831215158311.png" alt="image-20210831215158311" style="zoom:50%;"><p><strong>并发漏标问题</strong></p><p>比较先进的垃圾回收器都支持<strong>并发标记</strong>，即在标记过程中，用户线程仍然能工作。但这样带来一个新的问题，如果用户线程修改了对象引用，那么就存在漏标问题。例如：</p><ol><li>如图所示标记工作尚未完成</li></ol><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210831215846876.png" alt="image-20210831215846876" style="zoom:50%;"><ol start="2"><li>用户线程同时在工作，断开了第一层 3、4 两个对象之间的引用，这时对于正在处理 3 号对象的垃圾回收线程来讲，它会将 4 号对象当做是白色垃圾</li></ol><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210831215904073.png" alt="image-20210831215904073" style="zoom:50%;"><ol start="3"><li>但如果其他用户线程又建立了 2、4 两个对象的引用，这时因为 2 号对象是黑色已处理对象了，因此垃圾回收线程不会察觉到这个引用关系的变化，从而产生了漏标</li></ol><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210831215919493.png" alt="image-20210831215919493" style="zoom:50%;"><ol start="4"><li>如果用户线程让黑色对象引用了一个新增对象，一样会存在漏标问题</li></ol><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210831220004062.png" alt="image-20210831220004062" style="zoom:50%;"><p>因此对于<strong>并发标记</strong>而言，必须解决漏标问题，也就是要记录标记过程中的变化。有两种解决方法：</p><ol><li>Incremental Update 增量更新法，CMS 垃圾回收器采用<ul><li>思路是拦截每次赋值动作，只要赋值发生，被赋值的对象就会被记录下来，在重新标记阶段再确认一遍</li></ul></li><li>Snapshot At The Beginning，SATB 原始快照法，G1 垃圾回收器采用<ul><li>思路也是拦截每次赋值动作，不过记录的对象不同，也需要在重新标记阶段对这些对象二次处理</li><li>新加对象会被记录</li><li>被删除引用关系的对象也被记录</li></ul></li></ol><p><strong>垃圾回收器 - Parallel GC</strong></p><ul><li><p>eden 内存不足发生 Minor GC，采用标记复制算法，需要暂停用户线程</p></li><li><p>old 内存不足发生 Full GC，采用标记整理算法，需要暂停用户线程</p></li><li><p><strong>注重吞吐量</strong></p></li></ul><p><strong>垃圾回收器 - ConcurrentMarkSweep GC</strong></p><ul><li><p>它是工作在 old 老年代，支持<strong>并发标记</strong>的一款回收器，采用<strong>并发清除</strong>算法</p><ul><li>并发标记时不需暂停用户线程</li><li>重新标记时仍需暂停用户线程</li></ul></li><li><p>如果并发失败（即回收速度赶不上创建新对象速度），会触发 Full GC</p></li><li><p><strong>注重响应时间</strong></p></li></ul><p><strong>垃圾回收器 - G1 GC</strong></p><ul><li><strong>响应时间与吞吐量兼顾</strong></li><li>划分成多个区域，每个区域都可以充当 eden，survivor，old， humongous，其中 humongous 专为大对象准备</li><li>分成三个阶段：新生代回收、并发标记、混合收集</li><li>如果并发失败（即回收速度赶不上创建新对象速度），会触发 Full GC</li></ul><p><strong>G1 回收阶段 - 新生代回收</strong></p><ol><li>初始时，所有区域都处于空闲状态</li></ol><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210831222639754.png" alt="image-20210831222639754" style="zoom:50%;"><ol start="2"><li>创建了一些对象，挑出一些空闲区域作为伊甸园区存储这些对象</li></ol><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210831222653802.png" alt="image-20210831222653802" style="zoom:50%;"><ol start="3"><li>当伊甸园需要垃圾回收时，挑出一个空闲区域作为幸存区，用复制算法复制存活对象，需要暂停用户线程</li></ol><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210831222705814.png" alt="image-20210831222705814" style="zoom:50%;"><ol start="4"><li>复制完成，将之前的伊甸园内存释放</li></ol><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210831222724999.png" alt="image-20210831222724999" style="zoom:50%;"><ol start="5"><li>随着时间流逝，伊甸园的内存又有不足</li></ol><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210831222737928.png" alt="image-20210831222737928" style="zoom:50%;"><ol start="6"><li>将伊甸园以及之前幸存区中的存活对象，采用复制算法，复制到新的幸存区，其中较老对象晋升至老年代</li></ol><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210831222752787.png" alt="image-20210831222752787" style="zoom:50%;"><ol start="7"><li>释放伊甸园以及之前幸存区的内存</li></ol><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210831222803281.png" alt="image-20210831222803281" style="zoom:50%;"><p><strong>G1 回收阶段 - 并发标记与混合收集</strong></p><ol><li>当老年代占用内存超过阈值后，触发并发标记，这时无需暂停用户线程</li></ol><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210831222813959.png" alt="image-20210831222813959" style="zoom:50%;"><ol start="2"><li>并发标记之后，会有重新标记阶段解决漏标问题，此时需要暂停用户线程。这些都完成后就知道了老年代有哪些存活对象，随后进入混合收集阶段。此时不会对所有老年代区域进行回收，而是根据<strong>暂停时间目标</strong>优先回收价值高（存活对象少）的区域（这也是 Gabage First 名称的由来）。</li></ol><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210831222828104.png" alt="image-20210831222828104" style="zoom:50%;"><ol start="3"><li>混合收集阶段中，参与复制的有 eden、survivor、old，下图显示了伊甸园和幸存区的存活对象复制</li></ol><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210831222841096.png" alt="image-20210831222841096" style="zoom:50%;"><ol start="4"><li>下图显示了老年代和幸存区晋升的存活对象的复制</li></ol><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210831222859760.png" alt="image-20210831222859760" style="zoom:50%;"><ol start="5"><li>复制完成，内存得到释放。进入下一轮的新生代回收、并发标记、混合收集</li></ol><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210831222919182.png" alt="image-20210831222919182" style="zoom:50%;"><h2 id="4-内存溢出"><a class="markdownIt-Anchor" href="#4-内存溢出"></a> 4. 内存溢出</h2><p><strong>要求</strong></p><ul><li>能够说出几种典型的导致内存溢出的情况</li></ul><p><strong>典型情况</strong></p><ul><li>误用线程池导致的内存溢出<ul><li>参考 day03.TestOomThreadPool</li><li>任务队列使用无界队列时，重复多次往队列中添加任务，占满内存时会出现内存溢出</li><li>任务队列使用有界队列，但救急线程数过多时，创建过多救急线程将内存占满也会出现内存溢出</li></ul></li><li>查询数据量太大导致的内存溢出<ul><li>参考 day03.TestOomTooManyObject</li></ul></li><li>动态生成类导致的内存溢出<ul><li>参考 day03.TestOomTooManyClass</li></ul></li></ul><h2 id="5-类加载"><a class="markdownIt-Anchor" href="#5-类加载"></a> 5. 类加载</h2><p><strong>要求</strong></p><ul><li>掌握类加载阶段</li><li>掌握类加载器</li><li>理解双亲委派机制</li></ul><p><strong>类加载过程的三个阶段</strong></p><ol><li><p>加载</p><ol><li><p>将类的字节码载入方法区，并创建类.class 对象</p></li><li><p>如果此类的父类没有加载，先加载父类</p></li><li><p>加载是懒惰执行</p></li></ol></li><li><p>链接</p><ol><li>验证 – 验证类是否符合 Class 规范，合法性、安全性检查</li><li>准备 – 为 static 变量分配空间，设置默认值</li><li>解析 – 将常量池的符号引用解析为直接引用</li></ol></li><li><p>初始化</p><ol><li>静态代码块、static 修饰的变量赋值、static final 修饰的<strong>引用类型</strong>变量赋值，会被合并成一个 <code>&lt;cinit&gt;</code> 方法，在初始化时被调用</li><li>static final 修饰的基本类型变量赋值，在链接阶段就已完成</li><li>初始化是懒惰执行</li></ol></li></ol><blockquote><p><em><strong>验证手段</strong></em></p><ul><li>使用 jps 查看进程号</li><li>使用 jhsdb 调试，执行命令 <code>jhsdb.exe hsdb</code> 打开它的图形界面<ul><li>Class Browser 可以查看当前 jvm 中加载了哪些类</li><li>控制台的 universe 命令查看堆内存范围</li><li>控制台的 g1regiondetails 命令查看 region 详情</li><li><code>scanoops 起始地址 结束地址 对象类型</code> 可以根据类型查找某个区间内的对象地址</li><li>控制台的 <code>inspect 地址</code> 指令能够查看这个地址对应的对象详情</li></ul></li><li>使用 javap 命令可以查看 class 字节码</li></ul></blockquote><blockquote><p><em><strong>代码说明</strong></em></p><ul><li>day03.loader.TestLazy - 验证类的加载是懒惰的，用到时才触发类加载</li><li>day03.loader.TestFinal - 验证使用 final 修饰的变量不会触发类加载</li></ul></blockquote><p><strong>jdk 8 的类加载器</strong></p><table><thead><tr><th><strong>名称</strong></th><th><strong>加载哪的类</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Bootstrap ClassLoader</td><td>JAVA_HOME/jre/lib</td><td>无法直接访问</td></tr><tr><td>ClassLoader</td><td>JAVA_HOME/jre/lib/ext</td><td>上级为 Bootstrap，显示为  null</td></tr><tr><td>Application ClassLoader</td><td>classpath</td><td>上级为 Extension</td></tr><tr><td>自定义类加载器</td><td>自定义</td><td>上级为 Application</td></tr></tbody></table><p><strong>双亲委派机制</strong></p><p>所谓的双亲委派，就是指优先委派上级类加载器进行加载，如果上级类加载器</p><ul><li>能找到这个类，由上级加载，加载后该类也对下级加载器可见</li><li>找不到这个类，则下级类加载器才有资格执行加载</li></ul><p>双亲委派的目的有两点</p><ol><li><p>让上级类加载器中的类对下级共享（反之不行），即能让你的类能依赖到 jdk 提供的核心类</p></li><li><p>让类的加载有优先次序，保证核心类优先加载</p></li></ol><p><strong>对双亲委派的误解</strong></p><p>下面面试题的回答是错误的</p><p><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210901110910016.png" alt="image-20210901110910016"></p><p>错在哪了？</p><ul><li><p>自己编写类加载器就能加载一个假冒的 java.lang.System 吗? 答案是不行。</p></li><li><p>假设你自己的类加载器用双亲委派，那么优先由启动类加载器加载真正的 java.lang.System，自然不会加载假冒的</p></li><li><p>假设你自己的类加载器不用双亲委派，那么你的类加载器加载假冒的 java.lang.System 时，它需要先加载父类 java.lang.Object，而你没有用委派，找不到 java.lang.Object 所以加载会失败</p></li><li><p><strong>以上也仅仅是假设</strong>。事实上操作你就会发现，自定义类加载器加载以 java. 打头的类时，会抛安全异常，在 jdk9 以上版本这些特殊包名都与模块进行了绑定，更连编译都过不了</p></li></ul><blockquote><p><em><strong>代码说明</strong></em></p><ul><li>day03.loader.TestJdk9ClassLoader - 演示类加载器与模块的绑定关系</li></ul></blockquote><h2 id="6-四种引用"><a class="markdownIt-Anchor" href="#6-四种引用"></a> 6. 四种引用</h2><p><strong>要求</strong></p><ul><li>掌握四种引用</li></ul><p><strong>强引用</strong></p><ol><li><p>普通变量赋值即为强引用，如 A a = new A();</p></li><li><p>通过 GC Root 的引用链，如果强引用不到该对象，该对象才能被回收</p></li></ol><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210901111903574.png" alt="image-20210901111903574" style="zoom:80%;"><p><strong>软引用（SoftReference）</strong></p><ol><li><p>例如：SoftReference a = new SoftReference(new A());</p></li><li><p>如果仅有软引用该对象时，首次垃圾回收不会回收该对象，如果内存仍不足，再次回收时才会释放对象</p></li><li><p>软引用自身需要配合引用队列来释放</p></li><li><p>典型例子是反射数据</p></li></ol><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210901111957328.png" alt="image-20210901111957328" style="zoom:80%;"><p><strong>弱引用（WeakReference）</strong></p><ol><li><p>例如：WeakReference a = new WeakReference(new A());</p></li><li><p>如果仅有弱引用引用该对象时，只要发生垃圾回收，就会释放该对象</p></li><li><p>弱引用自身需要配合引用队列来释放</p></li><li><p>典型例子是 ThreadLocalMap 中的 Entry 对象</p></li></ol><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210901112107707.png" alt="image-20210901112107707" style="zoom:80%;"><p><strong>虚引用（PhantomReference）</strong></p><ol><li><p>例如： PhantomReference a = new PhantomReference(new A(), referenceQueue);</p></li><li><p>必须配合引用队列一起使用，当虚引用所引用的对象被回收时，由 Reference Handler 线程将虚引用对象入队，这样就可以知道哪些对象被回收，从而对它们关联的资源做进一步处理</p></li><li><p>典型例子是 Cleaner 释放 DirectByteBuffer 关联的直接内存</p></li></ol><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210901112157901.png" alt="image-20210901112157901" style="zoom:80%;"><blockquote><p><em><strong>代码说明</strong></em></p><ul><li>day03.reference.TestPhantomReference - 演示虚引用的基本用法</li><li>day03.reference.TestWeakReference - 模拟 ThreadLocalMap, 采用引用队列释放 entry 内存</li></ul></blockquote><h2 id="7-finalize"><a class="markdownIt-Anchor" href="#7-finalize"></a> 7. finalize</h2><p><strong>要求</strong></p><ul><li>掌握 finalize 的工作原理与缺点</li></ul><p><strong>finalize</strong></p><ul><li>它是 Object 中的一个方法，如果子类重写它，垃圾回收时此方法会被调用，可以在其中进行资源释放和清理工作</li><li>将资源释放和清理放在 finalize 方法中非常不好，非常影响性能，严重时甚至会引起 OOM，从 Java9 开始就被标注为 @Deprecated，不建议被使用了</li></ul><p><strong>finalize 原理</strong></p><ol><li>对 finalize 方法进行处理的核心逻辑位于 java.lang.ref.Finalizer 类中，它包含了名为 unfinalized 的静态变量（双向链表结构），Finalizer 也可被视为另一种引用对象（地位与软、弱、虚相当，只是不对外，无法直接使用）</li><li>当重写了 finalize 方法的对象，在构造方法调用之时，JVM 都会将其包装成一个 Finalizer 对象，并加入 unfinalized 链表中</li></ol><p><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210901121032813.png" alt="image-20210901121032813"></p><ol start="3"><li>Finalizer 类中还有另一个重要的静态变量，即 ReferenceQueue 引用队列，刚开始它是空的。当狗对象可以被当作垃圾回收时，就会把这些狗对象对应的 Finalizer 对象加入此引用队列</li><li>但此时 Dog 对象还没法被立刻回收，因为 unfinalized -&gt; Finalizer 这一引用链还在引用它嘛，为的是【先别着急回收啊，等我调完 finalize 方法，再回收】</li><li>FinalizerThread 线程会从 ReferenceQueue 中逐一取出每个 Finalizer 对象，把它们从链表断开并真正调用 finallize 方法</li></ol><p><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210901122228916.png" alt="image-20210901122228916"></p><ol start="6"><li>由于整个 Finalizer 对象已经从 unfinalized 链表中断开，这样没谁能引用到它和狗对象，所以下次 gc 时就被回收了</li></ol><p><strong>finalize 缺点</strong></p><ul><li>无法保证资源释放：FinalizerThread 是守护线程，代码很有可能没来得及执行完，线程就结束了</li><li>无法判断是否发生错误：执行 finalize 方法时，会吞掉任意异常（Throwable）</li><li>内存释放不及时：重写了 finalize 方法的对象在第一次被 gc 时，并不能及时释放它占用的内存，因为要等着 FinalizerThread 调用完 finalize，把它从 unfinalized 队列移除后，第二次 gc 时才能真正释放内存</li><li>可以想象gc本就因为内存不足引起，finalize调用又很慢（两个队列的移除操作，都是串行执行的，用来释放连接类的资源也应该不快），不能及时释放内存，对象释放不及时就会逐渐移入老年代，老年代垃圾积累过多就会容易full gc，full gc后释放速度如果仍跟不上创建新  对象的速度，就会OOM</li><li>有的文章提到【Finalizer 线程会和我们的主线程进行竞争，不过由于它的优先级较低，获取到的CPU时间较少，因此它永远也赶不上主线程的步伐】这个显然是错误的，FinalizerThread 的优先级较普通线程更高，原因应该是 finalize 串行执行慢等原因综合导致</li></ul><blockquote><p><em><strong>代码说明</strong></em></p><ul><li>day03.reference.TestFinalize - finalize 的测试代码</li></ul></blockquote><h1 id="框架篇"><a class="markdownIt-Anchor" href="#框架篇"></a> 框架篇</h1><h2 id="1-spring-refresh-流程"><a class="markdownIt-Anchor" href="#1-spring-refresh-流程"></a> 1. Spring refresh 流程</h2><p><strong>要求</strong></p><ul><li>掌握 refresh 的 12 个步骤</li></ul><p><strong>Spring refresh 概述</strong></p><p>refresh 是 AbstractApplicationContext 中的一个方法，负责初始化 ApplicationContext 容器，容器必须调用 refresh 才能正常工作。它的内部主要会调用 12 个方法，我们把它们称为 refresh 的 12 个步骤：</p><ol><li><p>prepareRefresh</p></li><li><p>obtainFreshBeanFactory</p></li><li><p>prepareBeanFactory</p></li><li><p>postProcessBeanFactory</p></li><li><p>invokeBeanFactoryPostProcessors</p></li><li><p>registerBeanPostProcessors</p></li><li><p>initMessageSource</p></li><li><p>initApplicationEventMulticaster</p></li><li><p>onRefresh</p></li><li><p>registerListeners</p></li><li><p>finishBeanFactoryInitialization</p></li><li><p>finishRefresh</p></li></ol><blockquote><p><em><strong>功能分类</strong></em></p><ul><li><p>1 为准备环境</p></li><li><p>2 3 4 5 6 为准备 BeanFactory</p></li><li><p>7 8 9 10 12 为准备 ApplicationContext</p></li><li><p>11 为初始化 BeanFactory 中非延迟单例 bean</p></li></ul></blockquote><p><strong>1. prepareRefresh</strong></p><ul><li><p>这一步创建和准备了 Environment 对象，它作为 ApplicationContext 的一个成员变量</p></li><li><p>Environment 对象的作用之一是为后续 @Value，值注入时提供键值</p></li><li><p>Environment 分成三个主要部分</p><ul><li>systemProperties - 保存 java 环境键值</li><li>systemEnvironment - 保存系统环境键值</li><li>自定义 PropertySource - 保存自定义键值，例如来自于 *.properties 文件的键值</li></ul></li></ul><p><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210902181639048.png" alt="image-20210902181639048"></p><p><strong>2. obtainFreshBeanFactory</strong></p><ul><li>这一步获取（或创建） BeanFactory，它也是作为 ApplicationContext 的一个成员变量</li><li>BeanFactory 的作用是负责 bean 的创建、依赖注入和初始化，bean 的各项特征由 BeanDefinition 定义<ul><li>BeanDefinition 作为 bean 的设计蓝图，规定了 bean 的特征，如单例多例、依赖关系、初始销毁方法等</li><li>BeanDefinition 的来源有多种多样，可以是通过 xml 获得、配置类获得、组件扫描获得，也可以是编程添加</li></ul></li><li>所有的 BeanDefinition 会存入 BeanFactory 中的 beanDefinitionMap 集合</li></ul><p><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210902182004819.png" alt="image-20210902182004819"></p><p><strong>3. prepareBeanFactory</strong></p><ul><li>这一步会进一步完善 BeanFactory，为它的各项成员变量赋值</li><li>beanExpressionResolver 用来解析 SpEL，常见实现为 StandardBeanExpressionResolver</li><li>propertyEditorRegistrars 会注册类型转换器<ul><li>它在这里使用了 ResourceEditorRegistrar 实现类</li><li>并应用 ApplicationContext 提供的 Environment 完成 ${ } 解析</li></ul></li><li>registerResolvableDependency 来注册 beanFactory 以及 ApplicationContext，让它们也能用于依赖注入</li><li>beanPostProcessors 是 bean 后处理器集合，会工作在 bean 的生命周期各个阶段，此处会添加两个：<ul><li>ApplicationContextAwareProcessor 用来解析 Aware 接口</li><li>ApplicationListenerDetector 用来识别容器中 ApplicationListener 类型的 bean</li></ul></li></ul><p><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210902182541925.png" alt="image-20210902182541925"></p><p><strong>4. postProcessBeanFactory</strong></p><ul><li>这一步是空实现，留给子类扩展。<ul><li>一般 Web 环境的 ApplicationContext 都要利用它注册新的 Scope，完善 Web 下的 BeanFactory</li></ul></li><li>这里体现的是模板方法设计模式</li></ul><p><strong>5. invokeBeanFactoryPostProcessors</strong></p><ul><li>这一步会调用 beanFactory 后处理器</li><li>beanFactory 后处理器，充当 beanFactory 的扩展点，可以用来补充或修改 BeanDefinition</li><li>常见的 beanFactory 后处理器有<ul><li>ConfigurationClassPostProcessor – 解析 @Configuration、@Bean、@Import、@PropertySource 等</li><li>PropertySourcesPlaceHolderConfigurer – 替换 BeanDefinition 中的 ${ }</li><li>MapperScannerConfigurer – 补充 Mapper 接口对应的 BeanDefinition</li></ul></li></ul><p><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210902183232114.png" alt="image-20210902183232114"></p><p><strong>6. registerBeanPostProcessors</strong></p><ul><li>这一步是继续从 beanFactory 中找出 bean 后处理器，添加至 beanPostProcessors 集合中</li><li>bean 后处理器，充当 bean 的扩展点，可以工作在 bean 的实例化、依赖注入、初始化阶段，常见的有：<ul><li>AutowiredAnnotationBeanPostProcessor 功能有：解析 @Autowired，@Value 注解</li><li>CommonAnnotationBeanPostProcessor 功能有：解析 @Resource，@PostConstruct，@PreDestroy</li><li>AnnotationAwareAspectJAutoProxyCreator 功能有：为符合切点的目标 bean 自动创建代理</li></ul></li></ul><p><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210902183520307.png" alt="image-20210902183520307"></p><p><strong>7. initMessageSource</strong></p><ul><li>这一步是为 ApplicationContext 添加 messageSource 成员，实现国际化功能</li><li>去 beanFactory 内找名为 messageSource 的 bean，如果没有，则提供空的 MessageSource 实现</li></ul><p><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210902183819984.png" alt="image-20210902183819984"></p><p><strong>8. initApplicationContextEventMulticaster</strong></p><ul><li>这一步为 ApplicationContext 添加事件广播器成员，即 applicationContextEventMulticaster</li><li>它的作用是发布事件给监听器</li><li>去 beanFactory 找名为 applicationEventMulticaster 的 bean 作为事件广播器，若没有，会创建默认的事件广播器</li><li>之后就可以调用 ApplicationContext.publishEvent(事件对象) 来发布事件</li></ul><p><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210902183943469.png" alt="image-20210902183943469"></p><p><strong>9. onRefresh</strong></p><ul><li>这一步是空实现，留给子类扩展<ul><li>SpringBoot 中的子类在这里准备了 WebServer，即内嵌 web 容器</li></ul></li><li>体现的是模板方法设计模式</li></ul><p><strong>10. registerListeners</strong></p><ul><li>这一步会从多种途径找到事件监听器，并添加至 applicationEventMulticaster</li><li>事件监听器顾名思义，用来接收事件广播器发布的事件，有如下来源<ul><li>事先编程添加的</li><li>来自容器中的 bean</li><li>来自于 @EventListener 的解析</li></ul></li><li>要实现事件监听器，只需要实现 ApplicationListener 接口，重写其中 onApplicationEvent(E e) 方法即可</li></ul><p><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210902184343872.png" alt="image-20210902184343872"></p><p><strong>11. finishBeanFactoryInitialization</strong></p><ul><li>这一步会将 beanFactory 的成员补充完毕，并初始化所有非延迟单例 bean</li><li>conversionService 也是一套转换机制，作为对 PropertyEditor 的补充</li><li>embeddedValueResolvers 即内嵌值解析器，用来解析 @Value 中的 ${ }，借用的是 Environment 的功能</li><li>singletonObjects 即单例池，缓存所有单例对象<ul><li>对象的创建都分三个阶段，每一阶段都有不同的 bean 后处理器参与进来，扩展功能</li></ul></li></ul><p><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210902184641623.png" alt="image-20210902184641623"></p><p><strong>12. finishRefresh</strong></p><ul><li>这一步会为 ApplicationContext 添加 lifecycleProcessor 成员，用来控制容器内需要生命周期管理的 bean</li><li>如果容器中有名称为 lifecycleProcessor 的 bean 就用它，否则创建默认的生命周期管理器</li><li>准备好生命周期管理器，就可以实现<ul><li>调用 context 的 start，即可触发所有实现 LifeCycle 接口 bean 的 start</li><li>调用 context 的 stop，即可触发所有实现 LifeCycle 接口 bean 的 stop</li></ul></li><li>发布 ContextRefreshed 事件，整个 refresh 执行完成</li></ul><p><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210902185052433.png" alt="image-20210902185052433"></p><p><strong>总结</strong></p><p><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20221118111241871.png" alt="image-20221118111241871"></p><h2 id="2-spring-bean-生命周期"><a class="markdownIt-Anchor" href="#2-spring-bean-生命周期"></a> 2. Spring bean 生命周期</h2><p><strong>要求</strong></p><ul><li>掌握 Spring bean 的生命周期</li></ul><p><strong>bean 生命周期 概述</strong></p><p>bean 的生命周期从调用 beanFactory 的 getBean 开始，到这个 bean 被销毁，可以总结为以下七个阶段：</p><ol><li>处理名称，检查缓存</li><li>处理父子容器</li><li>处理 dependsOn</li><li>选择 scope 策略</li><li>创建 bean</li></ol><p>​① 创建 bean 实例- @Autowired，唯一带参构造，默认构造</p><p>​② 依赖注入-@Autowired @Value,@Resource,ByName ByType,精确指定</p><p>​③ 初始化-Aware接口处理,@PostConstruct,InitializingBean,initMethod</p><p>​④ 创建代理</p><p>​⑤ 登记可销毁 bean</p><p>​6. 类型转换处理</p><p>​7. 销毁 bean</p><blockquote><p><em><strong>注意</strong></em></p><ul><li>划分的阶段和名称并不重要，重要的是理解整个过程中做了哪些事情</li></ul></blockquote><p><strong>1. 处理名称，检查缓存</strong></p><ul><li>这一步会处理别名，将别名解析为实际名称</li><li>对 FactoryBean 也会特殊处理，如果以 &amp; 开头表示要获取 FactoryBean 本身，否则表示要获取其产品</li><li>这里针对单例对象会检查一级、二级、三级缓存<ul><li>singletonFactories 三级缓存，存放单例工厂对象</li><li>earlySingletonObjects 二级缓存，存放单例工厂的产品对象<ul><li>如果发生循环依赖，产品是代理；无循环依赖，产品是原始对象</li></ul></li><li>singletonObjects 一级缓存，存放单例成品对象</li></ul></li></ul><p><strong>2. 处理父子容器</strong></p><ul><li>如果当前容器根据名字找不到这个 bean，此时若父容器存在，则执行父容器的 getBean 流程</li><li>父子容器的 bean 名称可以重复</li></ul><p><strong>3. 处理 dependsOn</strong></p><ul><li>如果当前 bean 有通过 dependsOn 指定了非显式依赖的 bean，这一步会提前创建这些 dependsOn 的 bean</li><li>所谓非显式依赖，就是指两个 bean 之间不存在直接依赖关系，但需要控制它们的创建先后顺序</li></ul><p><strong>4. 选择 scope 策略</strong></p><ul><li>对于 singleton scope，首先到单例池去获取 bean，如果有则直接返回，没有再进入创建流程</li><li>对于 prototype scope，每次都会进入创建流程</li><li>对于自定义 scope，例如 request，首先到 request 域获取 bean，如果有则直接返回，没有再进入创建流程</li></ul><p><strong>5.1 创建 bean - 创建 bean 实例</strong></p><table><thead><tr><th><strong>要点</strong></th><th><strong>总结</strong></th></tr></thead><tbody><tr><td>有自定义 TargetSource 的情况</td><td>由 AnnotationAwareAspectJAutoProxyCreator 创建代理返回</td></tr><tr><td>Supplier 方式创建 bean 实例</td><td>为 Spring 5.0 新增功能，方便编程方式创建  bean  实例</td></tr><tr><td>FactoryMethod 方式  创建 bean  实例</td><td>① 分成静态工厂与实例工厂；② 工厂方法若有参数，需要对工厂方法参数进行解析，利用  resolveDependency；③ 如果有多个工厂方法候选者，还要进一步按权重筛选</td></tr><tr><td><strong>AutowiredAnnotationBeanPostProcessor</strong></td><td>① 优先选择带  @Autowired  注解的构造；② 若有唯一的带参构造，也会入选</td></tr><tr><td>mbd.getPreferredConstructors</td><td>选择所有公共构造，这些构造之间按权重筛选</td></tr><tr><td><strong>采用默认构造</strong></td><td>如果上面的后处理器和 BeanDefiniation 都没找到构造，采用默认构造，即使是私有的</td></tr></tbody></table><p><strong>5.2 创建 bean - 依赖注入</strong></p><table><thead><tr><th><strong>要点</strong></th><th><strong>总结</strong></th></tr></thead><tbody><tr><td><strong>AutowiredAnnotationBeanPostProcessor(注解匹配)</strong></td><td>识别   @Autowired  及 @Value  标注的成员，封装为  InjectionMetadata 进行依赖注入</td></tr><tr><td><strong>CommonAnnotationBeanPostProcessor（注解匹配）</strong></td><td>识别   @Resource  标注的成员，封装为  InjectionMetadata 进行依赖注入</td></tr><tr><td>resolveDependency</td><td>用来查找要装配的值，可以识别：① Optional；② ObjectFactory 及 ObjectProvider；③ @Lazy  注解；④ @Value  注解（${  }, #{ }, 类型转换）；⑤ 集合类型（Collection，Map，数组等）；⑥ 泛型和  @Qualifier（用来区分类型歧义）；⑦ primary  及名字匹配（用来区分类型歧义）</td></tr><tr><td><strong>AUTOWIRE_BY_NAME（根据名字匹配）</strong></td><td>根据成员名字找 bean 对象，修改 mbd 的 propertyValues，不会考虑简单类型的成员</td></tr><tr><td><strong>AUTOWIRE_BY_TYPE（根据类型匹配）</strong></td><td>根据成员类型执行 resolveDependency 找到依赖注入的值，修改  mbd 的 propertyValues</td></tr><tr><td><strong>applyPropertyValues（即xml中&lt;property name ref|value/&gt;）(精确指定)</strong></td><td>根据 mbd 的 propertyValues 进行依赖注入（即xml中 `&lt;property name ref</td></tr></tbody></table><p><strong>5.3 创建 bean - 初始化</strong></p><table><thead><tr><th><strong>要点</strong></th><th><strong>总结</strong></th></tr></thead><tbody><tr><td><strong>内置 Aware 接口的装配</strong></td><td>包括 BeanNameAware，BeanFactoryAware 等</td></tr><tr><td><strong>扩展 Aware 接口的装配</strong></td><td>由 ApplicationContextAwareProcessor 解析，执行时机在  postProcessBeforeInitialization</td></tr><tr><td><strong>@PostConstruct</strong></td><td>由 CommonAnnotationBeanPostProcessor 解析，执行时机在  postProcessBeforeInitialization</td></tr><tr><td><strong>InitializingBean</strong></td><td>通过接口回调执行初始化</td></tr><tr><td><strong>initMethod</strong></td><td>根据 BeanDefinition 得到的初始化方法执行初始化，即 <code>&lt;bean init-method&gt;</code> 或 @Bean(initMethod)</td></tr><tr><td><strong>创建 aop 代理</strong></td><td>由 AnnotationAwareAspectJAutoProxyCreator 创建，执行时机在  postProcessAfterInitialization</td></tr></tbody></table><p><strong>5.4 创建 bean - 注册可销毁 bean</strong></p><p>在这一步判断并登记可销毁 bean</p><ul><li>判断依据<ul><li>如果实现了 DisposableBean 或 AutoCloseable 接口，则为可销毁 bean</li><li>如果自定义了 destroyMethod，则为可销毁 bean</li><li>如果采用 @Bean 没有指定 destroyMethod，则采用自动推断方式获取销毁方法名（close，shutdown）</li><li>如果有 @PreDestroy 标注的方法</li></ul></li><li>存储位置<ul><li>singleton scope 的可销毁 bean 会存储于 beanFactory 的成员当中</li><li>自定义 scope 的可销毁 bean 会存储于对应的域对象当中</li><li>prototype scope 不会存储，需要自己找到此对象销毁</li></ul></li><li>存储时都会封装为 DisposableBeanAdapter 类型对销毁方法的调用进行适配</li></ul><p><strong>6. 类型转换处理</strong></p><ul><li>如果 getBean 的 requiredType 参数与实际得到的对象类型不同，会尝试进行类型转换</li></ul><p><strong>7. 销毁 bean</strong></p><ul><li>销毁时机<ul><li>singleton bean 的销毁在 ApplicationContext.close 时，此时会找到所有 DisposableBean 的名字，逐一销毁</li><li>自定义 scope bean 的销毁在作用域对象生命周期结束时</li><li>prototype bean 的销毁可以通过自己手动调用 AutowireCapableBeanFactory.destroyBean 方法执行销毁</li></ul></li><li>同一 bean 中不同形式销毁方法的调用次序<ul><li>优先后处理器销毁，即 @PreDestroy</li><li>其次 DisposableBean 接口销毁</li><li>最后 destroyMethod 销毁（包括自定义名称，推断名称，AutoCloseable 接口 多选一）</li></ul></li></ul><h2 id="3-spring-bean-循环依赖"><a class="markdownIt-Anchor" href="#3-spring-bean-循环依赖"></a> 3. Spring bean 循环依赖</h2><p><strong>要求</strong></p><ul><li>掌握单例 set 方式循环依赖的原理</li><li>掌握其它循环依赖的解决方法</li></ul><p><strong>循环依赖的产生</strong></p><ul><li>首先要明白，bean 的创建要遵循一定的步骤，必须是创建、注入、初始化三步，这些顺序不能乱</li></ul><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210903085238916.png" alt="image-20210903085238916" style="zoom:50%;"><ul><li><p>set 方法（包括成员变量）的循环依赖如图所示</p><ul><li><p>可以在【a 创建】和【a set 注入 b】之间加入 b 的整个流程来解决</p></li><li><p>【b set 注入 a】 时可以成功，因为之前 a 的实例已经创建完毕</p></li><li><p>a 的顺序，及 b 的顺序都能得到保障</p></li></ul></li></ul><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210903085454603.png" alt="image-20210903085454603" style="zoom: 33%;"><ul><li>构造方法的循环依赖如图所示，显然无法用前面的方法解决</li></ul><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210903085906315.png" alt="image-20210903085906315" style="zoom: 50%;"><p><strong>构造循环依赖的解决</strong>(同时也能解决多例循环依赖)</p><ul><li>思路1<ul><li>a 注入 b 的代理对象，这样能够保证 a 的流程走通</li><li>后续需要用到 b 的真实对象时，可以通过代理间接访问</li></ul></li></ul><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210903091627659.png" alt="image-20210903091627659" style="zoom: 50%;"><ul><li>思路2<ul><li>a 注入 b 的工厂对象，让 b 的实例创建被推迟，这样能够保证 a 的流程先走通</li><li>后续需要用到 b 的真实对象时，再通过 ObjectFactory 工厂间接访问</li></ul></li></ul><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210903091743366.png" alt="image-20210903091743366" style="zoom:50%;"><ul><li>示例1：用 @Lazy 为构造方法参数生成代理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App60_1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        <span class="keyword">private</span> B b;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">A</span><span class="params">(<span class="meta">@Lazy</span> B b)</span> &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;A(B b) &#123;&#125;&quot;</span>, b.getClass());</span><br><span class="line">            <span class="built_in">this</span>.b = b;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@PostConstruct</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;init()&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">        <span class="keyword">private</span> A a;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">B</span><span class="params">(A a)</span> &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;B(&#123;&#125;)&quot;</span>, a);</span><br><span class="line">            <span class="built_in">this</span>.a = a;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@PostConstruct</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;init()&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">GenericApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericApplicationContext</span>();</span><br><span class="line">        context.registerBean(<span class="string">&quot;a&quot;</span>, A.class);</span><br><span class="line">        context.registerBean(<span class="string">&quot;b&quot;</span>, B.class);</span><br><span class="line">        AnnotationConfigUtils.registerAnnotationConfigProcessors(context.getDefaultListableBeanFactory());</span><br><span class="line">        context.refresh();</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>示例2：用 ObjectProvider 延迟依赖对象的创建</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App60_2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        <span class="keyword">private</span> ObjectProvider&lt;B&gt; b;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">A</span><span class="params">(ObjectProvider&lt;B&gt; b)</span> &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;A(&#123;&#125;)&quot;</span>, b);</span><br><span class="line">            <span class="built_in">this</span>.b = b;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@PostConstruct</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;init()&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">        <span class="keyword">private</span> A a;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">B</span><span class="params">(A a)</span> &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;B(&#123;&#125;)&quot;</span>, a);</span><br><span class="line">            <span class="built_in">this</span>.a = a;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@PostConstruct</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;init()&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">GenericApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericApplicationContext</span>();</span><br><span class="line">        context.registerBean(<span class="string">&quot;a&quot;</span>, A.class);</span><br><span class="line">        context.registerBean(<span class="string">&quot;b&quot;</span>, B.class);</span><br><span class="line">        AnnotationConfigUtils.registerAnnotationConfigProcessors(context.getDefaultListableBeanFactory());</span><br><span class="line">        context.refresh();</span><br><span class="line"></span><br><span class="line">        System.out.println(context.getBean(A.class).b.getObject());</span><br><span class="line">        System.out.println(context.getBean(B.class));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>示例3：用 @Scope 产生代理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App60_3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">GenericApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericApplicationContext</span>();</span><br><span class="line">        <span class="type">ClassPathBeanDefinitionScanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathBeanDefinitionScanner</span>(context.getDefaultListableBeanFactory());</span><br><span class="line">        scanner.scan(<span class="string">&quot;com.itheima.app60.sub&quot;</span>);</span><br><span class="line">        context.refresh();</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> B b;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">(B b)</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;A(B b) &#123;&#125;&quot;</span>, b.getClass());</span><br><span class="line">        <span class="built_in">this</span>.b = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;init()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Scope(proxyMode = ScopedProxyMode.TARGET_CLASS)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> A a;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">B</span><span class="params">(A a)</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;B(&#123;&#125;)&quot;</span>, a);</span><br><span class="line">        <span class="built_in">this</span>.a = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;init()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>示例4：用 Provider 接口解决，原理上与 ObjectProvider 一样，Provider 接口是独立的 jar 包，需要加入依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.inject<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.inject<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App60_4</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        <span class="keyword">private</span> Provider&lt;B&gt; b;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">A</span><span class="params">(Provider&lt;B&gt; b)</span> &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;A(&#123;&#125;&#125;)&quot;</span>, b);</span><br><span class="line">            <span class="built_in">this</span>.b = b;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@PostConstruct</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;init()&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">        <span class="keyword">private</span> A a;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">B</span><span class="params">(A a)</span> &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;B(&#123;&#125;&#125;)&quot;</span>, a);</span><br><span class="line">            <span class="built_in">this</span>.a = a;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@PostConstruct</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;init()&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">GenericApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericApplicationContext</span>();</span><br><span class="line">        context.registerBean(<span class="string">&quot;a&quot;</span>, A.class);</span><br><span class="line">        context.registerBean(<span class="string">&quot;b&quot;</span>, B.class);</span><br><span class="line">        AnnotationConfigUtils.registerAnnotationConfigProcessors(context.getDefaultListableBeanFactory());</span><br><span class="line">        context.refresh();</span><br><span class="line"></span><br><span class="line">        System.out.println(context.getBean(A.class).b.get());</span><br><span class="line">        System.out.println(context.getBean(B.class));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解决-set-循环依赖的原理"><a class="markdownIt-Anchor" href="#解决-set-循环依赖的原理"></a> 解决 set 循环依赖的原理</h3><p><strong>一级缓存</strong></p><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210903100752165.png" alt="image-20210903100752165" style="zoom:80%;"><p>作用是保证单例对象仅被创建一次</p><ul><li>第一次走 <code>getBean(&quot;a&quot;)</code> 流程后，最后会将成品 a 放入 singletonObjects 一级缓存</li><li>后续再走 <code>getBean(&quot;a&quot;)</code> 流程时，先从一级缓存中找，这时已经有成品 a，就无需再次创建</li></ul><p><strong>一级缓存与循环依赖</strong></p><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210903100914140.png" alt="image-20210903100914140" style="zoom:80%;"><p>一级缓存无法解决循环依赖问题，分析如下</p><ul><li>无论是获取 bean a 还是获取 bean b，走的方法都是同一个 getBean 方法，假设先走 <code>getBean(&quot;a&quot;)</code></li><li>当 a 的实例对象创建，接下来执行 <code>a.setB()</code> 时，需要走 <code>getBean(&quot;b&quot;)</code> 流程，红色箭头 1</li><li>当 b 的实例对象创建，接下来执行 <code>b.setA()</code> 时，又回到了 <code>getBean(&quot;a&quot;)</code> 的流程，红色箭头 2</li><li>但此时 singletonObjects 一级缓存内没有成品的 a，陷入了死循环</li></ul><p><strong>二级缓存</strong></p><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210903101849924.png" alt="image-20210903101849924" style="zoom:80%;"><p>解决思路如下：</p><ul><li>再增加一个 singletonFactories 缓存</li><li>在依赖注入前，即 <code>a.setB()</code> 以及 <code>b.setA()</code> 将 a 及 b 的半成品对象（未完成依赖注入和初始化）放入此缓存</li><li>执行依赖注入时，先看看 singletonFactories 缓存中是否有半成品的对象，如果有拿来注入，顺利走完流程</li></ul><p>对于上面的图</p><ul><li><code>a = new A()</code> 执行之后就会把这个半成品的 a 放入 singletonFactories 缓存，即 <code>factories.put(a)</code></li><li>接下来执行 <code>a.setB()</code>，走入 <code>getBean(&quot;b&quot;)</code> 流程，红色箭头 3</li><li>这回再执行到 <code>b.setA()</code> 时，需要一个 a 对象，有没有呢？有！</li><li><code>factories.get()</code> 在 singletonFactories  缓存中就可以找到，红色箭头 4 和 5</li><li>b 的流程能够顺利走完，将 b 成品放入 singletonObject 一级缓存，返回到 a 的依赖注入流程，红色箭头 6</li></ul><p><strong>二级缓存与创建代理</strong></p><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210903103030877.png" alt="image-20210903103030877" style="zoom:80%;"><p>二级缓存无法正确处理循环依赖并且包含有代理创建的场景，分析如下</p><ul><li>spring 默认要求，在 <code>a.init</code> 完成之后才能创建代理 <code>pa = proxy(a)</code></li><li>由于 a 的代理创建时机靠后，在执行 <code>factories.put(a)</code> 向 singletonFactories 中放入的还是原始对象</li><li>接下来箭头 3、4、5 这几步 b 对象拿到和注入的都是原始对象</li></ul><p><strong>三级缓存</strong></p><p><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210903103628639.png" alt="image-20210903103628639"></p><p>简单分析的话，只需要将代理的创建时机放在依赖注入之前即可，但 spring 仍然希望代理的创建时机在 init 之后，只有出现循环依赖时，才会将代理的创建时机提前。所以解决思路稍显复杂：</p><ul><li>图中 <code>factories.put(fa)</code> 放入的既不是原始对象，也不是代理对象而是工厂对象 fa</li><li>当检查出发生循环依赖时，fa 的产品就是代理 pa，没有发生循环依赖，fa 的产品是原始对象 a</li><li>假设出现了循环依赖，拿到了 singletonFactories 中的工厂对象，通过在依赖注入前获得了 pa，红色箭头 5</li><li>这回 <code>b.setA()</code> 注入的就是代理对象，保证了正确性，红色箭头 7</li><li>还需要把 pa 存入新加的 earlySingletonObjects 缓存，红色箭头 6</li><li><code>a.init</code> 完成后，无需二次创建代理，从哪儿找到 pa 呢？earlySingletonObjects 已经缓存，蓝色箭头 9</li></ul><p>当成品对象产生，放入 singletonObject 后，singletonFactories 和 earlySingletonObjects 就中的对象就没有用处，清除即可</p><h2 id="4-spring-事务失效"><a class="markdownIt-Anchor" href="#4-spring-事务失效"></a> 4. Spring 事务失效</h2><p><strong>要求</strong></p><ul><li>掌握事务失效的八种场景</li></ul><p><strong>1. 抛出检查异常导致事务不能正确回滚</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Service1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountMapper accountMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to, <span class="type">int</span> amount)</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">fromBalance</span> <span class="operator">=</span> accountMapper.findBalanceBy(from);</span><br><span class="line">        <span class="keyword">if</span> (fromBalance - amount &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            accountMapper.update(from, -<span class="number">1</span> * amount);</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">            accountMapper.update(to, amount);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>原因：Spring 默认只会回滚非检查异常</p></li><li><p>解法：配置 rollbackFor 属性</p><ul><li><code>@Transactional(rollbackFor = Exception.class)</code></li></ul></li></ul><p><strong>2. 业务方法内自己 try-catch 异常导致事务不能正确回滚</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Service2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountMapper accountMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to, <span class="type">int</span> amount)</span>  &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">fromBalance</span> <span class="operator">=</span> accountMapper.findBalanceBy(from);</span><br><span class="line">            <span class="keyword">if</span> (fromBalance - amount &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                accountMapper.update(from, -<span class="number">1</span> * amount);</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">                accountMapper.update(to, amount);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>原因：事务通知只有捉到了目标抛出的异常，才能进行后续的回滚处理，如果目标自己处理掉异常，事务通知无法知悉</p></li><li><p>解法1：异常原样抛出</p><ul><li>在 catch 块添加 <code>throw new RuntimeException(e);</code></li></ul></li><li><p>解法2：手动设置 TransactionStatus.setRollbackOnly()</p><ul><li>在 catch 块添加 <code>TransactionInterceptor.currentTransactionStatus().setRollbackOnly();</code></li></ul></li></ul><p><strong>3. aop 切面顺序导致导致事务不能正确回滚</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Service3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountMapper accountMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to, <span class="type">int</span> amount)</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">fromBalance</span> <span class="operator">=</span> accountMapper.findBalanceBy(from);</span><br><span class="line">        <span class="keyword">if</span> (fromBalance - amount &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            accountMapper.update(from, -<span class="number">1</span> * amount);</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">            accountMapper.update(to, amount);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line">    <span class="meta">@Around(&quot;execution(* transfer(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        LoggerUtils.get().debug(<span class="string">&quot;log:&#123;&#125;&quot;</span>, pjp.getTarget());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> pjp.proceed();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>原因：事务切面优先级最低，但如果自定义的切面优先级和他一样，则还是自定义切面在内层，这时若自定义切面没有正确抛出异常…</p></li><li><p>解法1、2：同情况2 中的解法:1、2</p></li><li><p>解法3：调整切面顺序，在 MyAspect 上添加 <code>@Order(Ordered.LOWEST_PRECEDENCE - 1)</code> （不推荐）</p></li></ul><p><strong>4. 非 public 方法导致的事务失效</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Service4</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountMapper accountMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to, <span class="type">int</span> amount)</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">fromBalance</span> <span class="operator">=</span> accountMapper.findBalanceBy(from);</span><br><span class="line">        <span class="keyword">if</span> (fromBalance - amount &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            accountMapper.update(from, -<span class="number">1</span> * amount);</span><br><span class="line">            accountMapper.update(to, amount);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>原因：Spring 为方法创建代理、添加事务通知、前提条件都是该方法是 public 的</p></li><li><p>解法1：改为 public 方法</p></li><li><p>解法2：添加 bean 配置如下（不推荐）</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> TransactionAttributeSource <span class="title function_">transactionAttributeSource</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AnnotationTransactionAttributeSource</span>(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5. 父子容器导致的事务失效</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day04.tx.app.service;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Service5</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountMapper accountMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to, <span class="type">int</span> amount)</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">fromBalance</span> <span class="operator">=</span> accountMapper.findBalanceBy(from);</span><br><span class="line">        <span class="keyword">if</span> (fromBalance - amount &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            accountMapper.update(from, -<span class="number">1</span> * amount);</span><br><span class="line">            accountMapper.update(to, amount);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制器类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day04.tx.app.controller;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> Service5 service;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to, <span class="type">int</span> amount)</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        service.transfer(from, to, amount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>App 配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;day04.tx.app.service&quot;)</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line">    <span class="comment">// ... 有事务相关配置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Web 配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;day04.tx.app&quot;)</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> &#123;</span><br><span class="line">    <span class="comment">// ... 无事务配置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在配置了父子容器，WebConfig 对应子容器，AppConfig 对应父容器，发现事务依然失效</p><ul><li><p>原因：子容器扫描范围过大，把未加事务配置的 service 扫描进来</p></li><li><p>解法1：各扫描各的，不要图简便</p></li><li><p>解法2：不要用父子容器，所有 bean 放在同一容器</p></li></ul><p><strong>6. 调用本类方法导致传播行为失效</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Service6</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        LoggerUtils.get().debug(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">        bar();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRES_NEW, rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bar</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        LoggerUtils.get().debug(<span class="string">&quot;bar&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>原因：本类方法调用不经过代理，因此无法增强</p></li><li><p>解法1：依赖注入自己（代理）来调用</p></li><li><p>解法2：通过 AopContext 拿到代理对象，来调用</p></li><li><p>解法3：通过 CTW，LTW 实现功能增强</p></li></ul><p>解法1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Service6</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Service6 proxy; <span class="comment">// 本质上是一种循环依赖</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        LoggerUtils.get().debug(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">System.out.println(proxy.getClass());</span><br><span class="line">proxy.bar();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRES_NEW, rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bar</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        LoggerUtils.get().debug(<span class="string">&quot;bar&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解法2，还需要在 AppConfig 上添加 <code>@EnableAspectJAutoProxy(exposeProxy = true)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Service6</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        LoggerUtils.get().debug(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">        ((Service6) AopContext.currentProxy()).bar();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRES_NEW, rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bar</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        LoggerUtils.get().debug(<span class="string">&quot;bar&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>7. @Transactional 没有保证原子行为</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Service7</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(Service7.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountMapper accountMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to, <span class="type">int</span> amount)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">fromBalance</span> <span class="operator">=</span> accountMapper.findBalanceBy(from);</span><br><span class="line">        logger.debug(<span class="string">&quot;更新前查询余额为: &#123;&#125;&quot;</span>, fromBalance);</span><br><span class="line">        <span class="keyword">if</span> (fromBalance - amount &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            accountMapper.update(from, -<span class="number">1</span> * amount);</span><br><span class="line">            accountMapper.update(to, amount);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findBalance</span><span class="params">(<span class="type">int</span> accountNo)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> accountMapper.findBalanceBy(accountNo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码实际上是有 bug 的，假设 from 余额为 1000，两个线程都来转账 1000，可能会出现扣减为负数的情况</p><ul><li>原因：事务的原子性仅涵盖 insert、update、delete、select … for update 语句，select 方法并不阻塞</li></ul><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210903120436365.png" alt="image-20210903120436365" style="zoom: 50%;"><ul><li>如上图所示，红色线程和蓝色线程的查询都发生在扣减之前，都以为自己有足够的余额做扣减</li></ul><p><strong>8. @Transactional 方法导致的 synchronized 失效</strong></p><p>针对上面的问题，能否在方法上加 synchronized 锁来解决呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Service7</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(Service7.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountMapper accountMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to, <span class="type">int</span> amount)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">fromBalance</span> <span class="operator">=</span> accountMapper.findBalanceBy(from);</span><br><span class="line">        logger.debug(<span class="string">&quot;更新前查询余额为: &#123;&#125;&quot;</span>, fromBalance);</span><br><span class="line">        <span class="keyword">if</span> (fromBalance - amount &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            accountMapper.update(from, -<span class="number">1</span> * amount);</span><br><span class="line">            accountMapper.update(to, amount);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findBalance</span><span class="params">(<span class="type">int</span> accountNo)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> accountMapper.findBalanceBy(accountNo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>答案是不行，原因如下：</p><ul><li>synchronized 保证的仅是目标方法的原子性，环绕目标方法的还有 commit 等操作，它们并未处于 sync 块内</li><li>可以参考下图发现，蓝色线程的查询只要在红色线程提交之前执行，那么依然会查询到有 1000 足够余额来转账</li></ul><p><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210903120800185.png" alt="image-20210903120800185"></p><ul><li><p>解法1：synchronized 范围应扩大至代理方法调用</p></li><li><p>解法2：使用 select … for update 替换 select</p></li></ul><h2 id="5-spring-mvc-执行流程"><a class="markdownIt-Anchor" href="#5-spring-mvc-执行流程"></a> 5. Spring MVC 执行流程</h2><p><strong>要求</strong></p><ul><li>掌握 Spring MVC 的执行流程</li><li>了解 Spring MVC 的重要组件的作用</li></ul><p><strong>概要</strong></p><p>我把整个流程分成三个阶段</p><ul><li>准备阶段</li><li>匹配阶段</li><li>执行阶段</li></ul><p><strong>准备阶段</strong></p><ol><li><p>在 Web 容器第一次用到 DispatcherServlet 的时候，会创建其对象并执行 init 方法</p></li><li><p>init 方法内会创建 Spring Web 容器，并调用容器 refresh 方法</p></li><li><p>refresh 过程中会创建并初始化 SpringMVC 中的重要组件， 例如 MultipartResolver，HandlerMapping，HandlerAdapter，HandlerExceptionResolver、ViewResolver 等</p></li><li><p>容器初始化后，会将上一步初始化好的重要组件，赋值给   DispatcherServlet 的成员变量，留待后用</p></li></ol><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210903140657163.png" alt="image-20210903140657163" style="zoom: 80%;"><p><strong>匹配阶段</strong></p><ol><li><p>用户发送的请求统一到达前端控制器 DispatcherServlet</p></li><li><p>DispatcherServlet 遍历所有 HandlerMapping ，找到与路径匹配的处理器</p><p>① HandlerMapping 有多个，每个 HandlerMapping 会返回不同的处理器对象，谁先匹配，返回谁的处理器。其中能识别 @RequestMapping 的优先级最高</p><p>② 对应 @RequestMapping 的处理器是 HandlerMethod，它包含了控制器对象和控制器方法信息</p><p>③ 其中路径与处理器的映射关系在 HandlerMapping 初始化时就会建立好</p></li></ol><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210903141017502.png" alt="image-20210903141017502" style="zoom:80%;"><ol start="3"><li>将 HandlerMethod 连同匹配到的拦截器，生成调用链对象 HandlerExecutionChain 返回</li></ol><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210903141124911.png" alt="image-20210903141124911" style="zoom:80%;"><ol start="4"><li>遍历HandlerAdapter 处理器适配器，找到能处理 HandlerMethod 的适配器对象，开始调用</li></ol><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210903141204799.png" alt="image-20210903141204799" style="zoom:80%;"><p><strong>调用阶段</strong></p><ol><li>执行拦截器 preHandle</li></ol><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210903141445870.png" alt="image-20210903141445870" style="zoom: 67%;"><ol start="2"><li><p>由 HandlerAdapter 调用 HandlerMethod</p><p>① 调用前处理不同类型的参数</p><p>② 调用后处理不同类型的返回值</p></li></ol><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210903141658199.png" alt="image-20210903141658199" style="zoom:67%;"><ol start="3"><li><p>第 2 步没有异常</p><p>① 返回 ModelAndView</p><p>② 执行拦截器 postHandle 方法</p><p>③ 解析视图，得到 View 对象，进行视图渲染</p></li></ol><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210903141749830.png" alt="image-20210903141749830" style="zoom:67%;"><ol start="4"><li>第 2 步有异常，进入 HandlerExceptionResolver 异常处理流程</li></ol><img src="/2023/03/07/%E5%9F%BA%E7%A1%80/image-20210903141844185.png" alt="image-20210903141844185" style="zoom:67%;"><ol start="5"><li><p>最后都会执行拦截器的 afterCompletion 方法</p></li><li><p>如果控制器方法标注了 @ResponseBody 注解，则在第 2 步，就会生成 json 结果，并标记 ModelAndView 已处理，这样就不会执行第 3 步的视图渲染</p></li></ol><h2 id="6-spring-注解"><a class="markdownIt-Anchor" href="#6-spring-注解"></a> 6. Spring 注解</h2><p><strong>要求</strong></p><ul><li>掌握 Spring 常见注解</li></ul><blockquote><p><em><strong>提示</strong></em></p><ul><li>注解的详细列表请参考：面试题-spring-注解.xmind</li><li>下面列出了视频中重点提及的注解，考虑到大部分注解同学们已经比较熟悉了，仅对个别的作简要说明</li></ul></blockquote><p><strong>事务注解</strong></p><ul><li>@EnableTransactionManagement，会额外加载 4 个 bean<ul><li>BeanFactoryTransactionAttributeSourceAdvisor 事务切面类</li><li>TransactionAttributeSource 用来解析事务属性</li><li>TransactionInterceptor 事务拦截器</li><li>TransactionalEventListenerFactory 事务监听器工厂</li></ul></li><li>@Transactional</li></ul><p><strong>核心</strong></p><ul><li>@Order<ul><li>控制bean的执行顺序</li></ul></li></ul><p><strong>切面</strong></p><ul><li>@EnableAspectJAutoProxy  -------（切面相关）<ul><li>会加载 AnnotationAwareAspectJAutoProxyCreator，它是一个 bean 后处理器，用来创建代理</li><li>如果没有配置 @EnableAspectJAutoProxy，又需要用到代理（如事务）则会使用 InfrastructureAdvisorAutoProxyCreator 这个 bean 后处理器</li></ul></li></ul><p><strong>组件扫描与配置类</strong></p><ul><li><p>@Component</p></li><li><p>@Controller</p></li><li><p>@Service</p></li><li><p>@Repository</p></li><li><p>@ComponentScan</p></li><li><p>@Conditional</p></li><li><p>@Configuration</p><ul><li>配置类其实相当于一个工厂, 标注 @Bean 注解的方法相当于工厂方法</li><li>@Bean 不支持方法重载, 如果有多个重载方法, 仅有一个能入选为工厂方法</li><li>@Configuration 默认会为标注的类生成代理, 其目的是保证 @Bean 方法相互调用时, 仍然能保证其单例特性</li><li>@Configuration 中如果含有 BeanFactory 后处理器, 则实例工厂方法会导致 MyConfig 提前创建, 造成其依赖注入失败，解决方法是改用静态工厂方法或直接为 @Bean 的方法参数依赖注入, 针对 Mapper 扫描可以改用注解方式</li></ul></li><li><p>@Bean</p></li><li><p>@Import</p><ul><li><p>四种用法</p><p>① 引入单个 bean</p><p>② 引入一个配置类</p><p>③ 通过 Selector 引入多个类</p><p>④ 通过 beanDefinition 注册器</p></li><li><p>解析规则</p><ul><li>同一配置类中, @Import 先解析  @Bean 后解析</li><li>同名定义, 默认后面解析的会覆盖前面解析的</li><li>不允许覆盖的情况下, 如何能够让 MyConfig(主配置类) 的配置优先? (虽然覆盖方式能解决)</li><li>采用 DeferredImportSelector，因为它最后工作, 可以简单认为先解析 @Bean, 再 Import</li></ul></li></ul></li><li><p>@Lazy</p><ul><li>加在类上，表示此类延迟实例化、初始化</li><li>加在方法参数上，此参数会以代理方式注入</li></ul></li><li><p>@PropertySource ---- 读取properties文件键值信息</p></li></ul><p><strong>依赖注入</strong></p><ul><li>@Autowired</li><li>@Qualifier</li><li>@Value</li></ul><p><strong>mvc mapping</strong></p><ul><li>@RequestMapping，可以派生多个注解如 @GetMapping 等</li></ul><p><strong>mvc rest</strong></p><ul><li>@RequestBody   将请求体中的json数据转化为java对象</li><li>@ResponseBody，将java对象转为json数据组成响应体，组合 @Controller =&gt;  @RestController</li><li>@ResponseStatus，控制响应的状态码</li></ul><p><strong>mvc 统一处理</strong></p><ul><li>@ControllerAdvice，组合 @ResponseBody =&gt; @RestControllerAdvice</li><li>@ExceptionHandler</li></ul><p><strong>mvc 参数</strong></p><ul><li>@PathVariable</li></ul><p><strong>mvc ajax</strong></p><ul><li>@CrossOrigin，解决跨域问题</li></ul><p><strong>boot auto</strong></p><ul><li>@SpringBootApplication</li><li>@EnableAutoConfiguration</li><li>@SpringBootConfiguration</li></ul><p><strong>boot condition</strong></p><ul><li>@ConditionalOnClass，classpath 下存在某个 class 时，条件才成立</li><li>@ConditionalOnMissingBean，beanFactory 内不存在某个 bean 时，条件才成立</li><li>@ConditionalOnProperty，配置文件中存在某个 property（键、值）时，条件才成立</li></ul><p><strong>boot properties</strong></p><ul><li>@ConfigurationProperties，会将当前 bean 的属性与配置文件中的键值进行绑定</li><li>@EnableConfigurationProperties，会添加两个较为重要的 bean<ul><li>ConfigurationPropertiesBindingPostProcessor，bean 后处理器，在 bean 初始化前调用下面的 binder</li><li>ConfigurationPropertiesBinder，真正执行绑定操作</li></ul></li></ul><h2 id="7-springboot-自动配置原理"><a class="markdownIt-Anchor" href="#7-springboot-自动配置原理"></a> 7. SpringBoot 自动配置原理</h2><p><strong>要求</strong></p><ul><li>掌握 SpringBoot 自动配置原理</li></ul><p><strong>自动配置原理</strong></p><p>@SpringBootApplication是一个组合注解，由 @ComponentScan、@EnableAutoConfiguration 和 @SpringBootConfiguration 组成</p><ol><li><p>@SpringBootConfiguration 与普通 @Configuration 相比，唯一区别是前者要求整个 app 中只出现一次</p></li><li><p>@ComponentScan</p><ul><li>excludeFilters - 用来在组件扫描时进行排除，也会排除自动配置类</li></ul></li><li><p>@EnableAutoConfiguration 也是一个组合注解，由下面注解组成</p><ul><li>@AutoConfigurationPackage – 用来记住扫描的起始包</li><li>@Import(AutoConfigurationImportSelector.class) 用来加载 <code>META-INF/spring.factories</code> 中的自动配置类</li></ul></li></ol><p><strong>为什么不使用 @Import 直接引入自动配置类</strong></p><p>有两个原因：</p><ol><li>让主配置类和自动配置类变成了强耦合，主配置类不应该知道有哪些从属配置</li><li>直接用 <code>@Import(自动配置类.class)</code>，引入的配置解析优先级较高，自动配置类的解析应该在主配置没提供时作为默认配置</li></ol><p>因此，采用了 <code>@Import(AutoConfigurationImportSelector.class)</code></p><ul><li>由 <code>AutoConfigurationImportSelector.class</code> 去读取 <code>META-INF/spring.factories</code> 中的自动配置类，实现了弱耦合。</li><li>另外 <code>AutoConfigurationImportSelector.class</code> 实现了 DeferredImportSelector 接口，让自动配置的解析晚于主配置的解析</li></ul><h2 id="8-spring-中的设计模式"><a class="markdownIt-Anchor" href="#8-spring-中的设计模式"></a> 8. Spring 中的设计模式</h2><p><strong>要求</strong></p><ul><li>掌握 Spring 中常见的设计模式</li></ul><p><strong>1. Spring 中的 Singleton</strong></p><p>请大家区分 singleton pattern 与 Spring 中的 singleton bean</p><ul><li>根据单例模式的目的 <em>Ensure a class only has one instance, and provide a global point of access to it</em></li><li>显然 Spring 中的 singleton bean 并非实现了单例模式，singleton bean 只能保证每个容器内，相同 id 的 bean 单实例</li><li>当然 Spring 中也用到了单例模式，例如<ul><li>org.springframework.transaction.TransactionDefinition#withDefaults</li><li>org.springframework.aop.TruePointcut#INSTANCE</li><li>org.springframework.aop.interceptor.ExposeInvocationInterceptor#ADVISOR</li><li>org.springframework.core.annotation.AnnotationAwareOrderComparator#INSTANCE</li><li>org.springframework.core.OrderComparator#INSTANCE</li></ul></li></ul><p><strong>2. Spring 中的 Builder</strong>（建造器模式）</p><p>定义 <em>Separate the construction of a complex object from its representation so that the same construction process can create different representations</em></p><p>它的主要亮点有三处：</p><ol><li><p>较为灵活的构建产品对象</p></li><li><p>在不执行最后 build 方法前，产品对象都不可用</p></li><li><p>构建过程采用链式调用，看起来比较爽</p></li></ol><p>Spring 中体现 Builder 模式的地方：</p><ul><li><p>org.springframework.beans.factory.support.BeanDefinitionBuilder</p></li><li><p>org.springframework.web.util.UriComponentsBuilder</p></li><li><p>org.springframework.http.ResponseEntity.HeadersBuilder</p></li><li><p>org.springframework.http.ResponseEntity.BodyBuilder</p></li></ul><p><strong>3. Spring 中的 Factory Method</strong></p><p>定义 <em>Define an interface for creating an object, but let subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses</em></p><p>根据上面的定义，Spring 中的 ApplicationContext 与 BeanFactory 中的 getBean 都可以视为工厂方法，它隐藏了 bean （产品）的创建过程和具体实现</p><p>Spring 中其它工厂：</p><ul><li><p>org.springframework.beans.factory.FactoryBean</p></li><li><p>@Bean 标注的静态方法及实例方法</p></li><li><p>ObjectFactory 及 ObjectProvider</p></li></ul><p>前两种工厂主要封装第三方的 bean 的创建过程，后两种工厂可以推迟 bean 创建，解决循环依赖及单例注入多例等问题</p><p><strong>4. Spring 中的 Adapter</strong></p><p>定义 <em>Convert the interface of a class into another interface clients expect. Adapter lets classes work together that couldn’t otherwise because of incompatible interfaces</em></p><p>典型的实现有两处：</p><ul><li>org.springframework.web.servlet.HandlerAdapter – 因为控制器实现有各种各样，比如有<ul><li>大家熟悉的 @RequestMapping 标注的控制器实现</li><li>传统的基于 Controller 接口（不是 @Controller注解啊）的实现</li><li>较新的基于 RouterFunction 接口的实现</li><li>它们的处理方法都不一样，为了统一调用，必须适配为 HandlerAdapter 接口</li></ul></li><li>org.springframework.beans.factory.support.DisposableBeanAdapter – 因为销毁方法多种多样，因此都要适配为 DisposableBean 来统一调用销毁方法</li></ul><p><strong>5. Spring 中的 Composite</strong>（组合模式）</p><p>定义 <em>Compose objects into tree structures to represent part-whole hierarchies. Composite lets clients treat individual objects and compositions of objects uniformly</em></p><p>典型实现有：</p><ul><li>org.springframework.web.method.support.HandlerMethodArgumentResolverComposite</li><li>org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite</li><li>org.springframework.web.servlet.handler.HandlerExceptionResolverComposite</li><li>org.springframework.web.servlet.view.ViewResolverComposite</li></ul><p>composite 对象的作用是，将分散的调用集中起来，统一调用入口，它的特征是，与具体干活的实现实现同一个接口，当调用 composite 对象的接口方法时，其实是委托具体干活的实现来完成</p><p><strong>6. Spring 中的 Decorator</strong></p><p>定义 <em>Attach additional responsibilities to an object dynamically. Decorators provide a flexible alternative to subclassing for extending functionality</em></p><p>典型实现：</p><ul><li>org.springframework.web.util.ContentCachingRequestWrapper</li></ul><p><strong>7. Spring 中的 Proxy</strong></p><p>定义 <em>Provide a surrogate or placeholder for another object to control access to it</em></p><p>装饰器模式注重的是功能增强，避免子类继承方式进行功能扩展，而代理模式更注重控制目标的访问</p><p>典型实现：</p><ul><li>org.springframework.aop.framework.JdkDynamicAopProxy</li><li>org.springframework.aop.framework.ObjenesisCglibAopProxy</li></ul><p><strong>8. Spring 中的 Chain of Responsibility</strong></p><p>定义 <em>Avoid coupling the sender of a request to its receiver by giving more than one object a chance to handle the request. Chain the receiving objects and pass the request along the chain until an object handles it</em></p><p>典型实现：</p><ul><li>org.springframework.web.servlet.HandlerInterceptor</li></ul><p><strong>9. Spring 中的 Observer</strong></p><p>定义 <em>Define a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically</em></p><p>典型实现：</p><ul><li>org.springframework.context.ApplicationListener</li><li>org.springframework.context.event.ApplicationEventMulticaster</li><li>org.springframework.context.ApplicationEvent</li></ul><p><strong>10. Spring 中的 Strategy</strong></p><p>定义 <em>Define a family of algorithms, encapsulate each one, and make them interchangeable. Strategy lets the algorithm vary independently from clients that use it</em></p><p>典型实现：</p><ul><li>org.springframework.beans.factory.support.InstantiationStrategy</li><li>org.springframework.core.annotation.MergedAnnotations.SearchStrategy</li><li>org.springframework.boot.autoconfigure.condition.SearchStrategy</li></ul><p><strong>11. Spring 中的 Template Method</strong></p><p>定义 <em>Define the skeleton of an algorithm in an operation, deferring some steps to subclasses. Template Method lets subclasses redefine certain steps of an algorithm without changing the algorithm’s structure</em></p><p>典型实现：</p><ul><li>大部分以 Template 命名的类，如 JdbcTemplate，TransactionTemplate</li><li>很多以 Abstract 命名的类，如 AbstractApplicationContext</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基础篇&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#基础篇&quot;&gt;&lt;/a&gt; 基础篇&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;基础篇要点：算法、数据结构、基础设计模式&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blo</summary>
      
    
    
    
    <category term="java" scheme="http://cloud-tour.github.io/categories/java/"/>
    
    
    <category term="java" scheme="http://cloud-tour.github.io/tags/java/"/>
    
    <category term="juc" scheme="http://cloud-tour.github.io/tags/juc/"/>
    
    <category term="jvm" scheme="http://cloud-tour.github.io/tags/jvm/"/>
    
    <category term="ssm" scheme="http://cloud-tour.github.io/tags/ssm/"/>
    
  </entry>
  
  <entry>
    <title>redis</title>
    <link href="http://cloud-tour.github.io/2023/02/17/redis/"/>
    <id>http://cloud-tour.github.io/2023/02/17/redis/</id>
    <published>2023-02-17T13:22:50.541Z</published>
    <updated>2023-02-17T13:23:58.698Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1讲一下redis的网络模型"><a class="markdownIt-Anchor" href="#1讲一下redis的网络模型"></a> 1.讲一下Redis的网络模型</h1><p><img src="/2023/02/17/redis/image-20230110141113582.png" alt="image-20230110141113582"></p><h2 id="io多路复用"><a class="markdownIt-Anchor" href="#io多路复用"></a> <strong>io多路复用</strong></h2><p>​I/O多路复用的I/O是指网络I/O，多路指多个TCP连接(即socket或者channel），复用指复用一个或几个线程。意思说一个或一组线程处理多个TCP连接。最大优势是减少系统开销小，不必创建过多的进程/线程，也不必维护这些进程/线程。 I/O多路复用使用两个系统调用(select/poll/epoll和recvfrom)，blocking I/O只调用了recvfrom；</p><h2 id="select机制"><a class="markdownIt-Anchor" href="#select机制"></a> <strong>select机制</strong></h2><p>​客户端操作服务器时就会产生这三种文件描述符(简称fd)：writefds(写)、readfds(读)、和exceptfds(异常)。select会阻塞住监视3类文件描述符，等有数据、可读、可写、出异常 或超时、就会返回；返回后通过遍历fdset整个数组来找到就绪的描述符fd，然后进行对应的I/O操作</p><p><strong>io流程：</strong></p><ul><li><p>1.接收监听的数据，执行select函数，将整个fd发给内核态</p></li><li><p>2.内核态<strong>遍历</strong>传过来的数据，若无就绪数据就休眠</p></li><li><p>3.有数据准备好，即唤醒，<strong>再次遍历</strong>，然后将fd集合写给用户态</p></li><li><p>4.用户态收到后会再次进行<strong>遍历</strong>，然后找到对应准备好的数据节点</p></li></ul><h2 id="poll机制"><a class="markdownIt-Anchor" href="#poll机制"></a> <strong>poll机制</strong></h2><p>​基本原理与select一致，也是轮询+遍历；唯一的区别就是poll没有最大文件描述符限制（使用链表的方式存储fd）</p><p><strong>io流程：</strong></p><ul><li>创建pollfd数组，向其中添加关注的fd信息，数组大小自定义</li><li>调用poll函数，将pollfd数组拷贝到内核空间，转链表存储，无上限</li><li>内核遍历fd，判断是否就绪</li><li>数据就绪或超时后，拷贝pollfd数组到用户空间，返回就绪fd数量n</li><li>用户进程判断n是否大于0,大于0则遍历pollfd数组，找到就绪的fd</li></ul><h2 id="epoll机制"><a class="markdownIt-Anchor" href="#epoll机制"></a> epoll机制</h2><p>​没有fd个数限制，用户态拷贝到内核态只需要一次，使用时间通知机制来触发。通过epoll_ctl注册fd，一旦fd就绪就会通过callback回调机制来激活对应fd，进行相关的io操作。</p><p><strong>重要函数：</strong></p><ul><li><code>epoll_create()</code>：系统启动时，在Linux内核里面申请一个红黑树结构文件系统，返回epoll对象，也是一个fd</li><li><code>epoll_ctl()</code>：每新建一个连接，都通过该函数操作epoll对象，在这个对象里面修改添加删除对应的链接fd, 绑定一个callback函数</li><li><code>epoll_wait()</code>：轮训所有的callback集合，并完成对应的IO操作</li></ul><p><strong>执行流程：</strong></p><ul><li><p>1.系统启动，先调用<strong>epoll_create()<strong>函数，在</strong>内核空间</strong>创建<strong>epoll(包含一颗红黑树，一个list_head链表)实例</strong>，并返回一个句柄（唯一标识）</p></li><li><p>2.紧接着调用<strong>epoll_ctl()<strong>操作，将要监听的数据添加到红黑树上去，并且给每个fd设置一个</strong>监听函数</strong>，这个函数会在fd数据就绪时触发，就是准备好了，就把fd数据添加到<strong>list_head</strong>中去</p></li><li><p>3.调用<strong>epoll_wait()<strong>函数,就去等待就绪，该函数会在</strong>用户态</strong>创建一个空的<strong>events</strong>数组，当调用这个函数的时候，在相应的等待时间内会去检查<strong>list_head</strong>，如果在此过程中，检查到了<strong>list_head</strong>中有数据会将数据拷贝到<strong>events</strong>数组中，并且返回对应的操作的<strong>数量</strong>，<strong>用户态</strong>的此时收到响应后，从events中拿到对应准备好的数据的节点，再去调用方法去拿数据。</p></li></ul><h2 id="各种机制的优劣"><a class="markdownIt-Anchor" href="#各种机制的优劣"></a> 各种机制的优劣</h2><p>select模式存在的三个问题：</p><ul><li>能监听的FD最大不超过1024</li><li>每次select都需要把所有要监听的FD都拷贝到内核空间</li><li>每次都要遍历所有FD来判断就绪状态</li></ul><p>poll模式的问题：</p><ul><li>poll利用链表解决了select中监听FD上限的问题，但依然要遍历所有FD，如果监听较多，性能会下降</li></ul><p>epoll模式中如何解决这些问题的？</p><ul><li>基于epoll实例中的红黑树保存要监听的FD，理论上无上限，而且增删改查效率都非常高</li><li>每个FD只需要执行一次epoll_ctl添加到红黑树，以后每次epol_wait无需传递任何参数，无需重复拷贝FD到内核空间</li><li>利用ep_poll_callback机制来监听FD状态，无需遍历所有FD，因此性能不会随监听的FD数量增多而下降</li></ul><h1 id="2redis是单线程吗"><a class="markdownIt-Anchor" href="#2redis是单线程吗"></a> 2.Redis是单线程吗</h1><ul><li>如果仅仅聊Redis的核心业务部分（命令处理），答案是单线程</li><li>如果是聊整个Redis，那么答案就是多线程</li></ul><p>在Redis版本迭代过程中，在两个重要的时间节点上引入了多线程的支持：</p><ul><li>Redis v4.0：引入多线程异步处理一些耗时较久的任务，例如异步删除命令unlink</li><li>Redis v6.0：在核心网络模型中引入 多线程，进一步提高对于多核CPU的利用率</li></ul><p>因此，对于Redis的核心网络模型，在Redis 6.0之前确实都是单线程。是利用epoll（Linux系统）这样的IO多路复用技术在事件循环中不断处理客户端情况。</p><h1 id="3redis是单线程模型为什么效率还这么高为何要选单线程"><a class="markdownIt-Anchor" href="#3redis是单线程模型为什么效率还这么高为何要选单线程"></a> 3.<strong>Redis是单线程模型为什么效率还这么高（为何要选单线程）？</strong></h1><ul><li><code>纯内存操作</code>：数据存放在内存中，内存的响应时间大约是100纳秒，这是Redis每秒万亿级别访问的重要基础</li><li><code>非阻塞的I/O多路复用机制</code>：Redis采用epoll做为I/O多路复用技术的实现，再加上Redis自身的事件处理模型将epoll中的连接，读写，关闭都转换为了时间，不在I/O上浪费过多的时间</li><li><code>C语言实现</code>：距离操作系统更近，执行速度会更快</li><li><code>单线程避免切换开销</code>：单线程避免了多线程上下文切换的时间开销，预防了多线程可能产生的竞争问题</li></ul><h1 id="4讲一下redis中的基本数据类型以及使用场景"><a class="markdownIt-Anchor" href="#4讲一下redis中的基本数据类型以及使用场景"></a> 4.讲一下Redis中的基本数据类型以及使用场景</h1><ul><li><strong>String：</strong> 缓存、计数器、分布式锁等</li><li><strong>List：</strong> 链表、队列、微博关注人时间轴列表等</li><li><strong>Hash：</strong> 用户信息、Hash 表等</li><li><strong>Set：</strong> 去重、赞、踩、共同好友等</li><li><strong>Zset：</strong> 访问量排行榜、点击量排行榜等</li></ul><h1 id="5讲一下redis中的特殊数据结构以及使用场景"><a class="markdownIt-Anchor" href="#5讲一下redis中的特殊数据结构以及使用场景"></a> 5.讲一下Redis中的特殊数据结构以及使用场景</h1><ul><li><p><strong>HyperLogLog（基数统计）</strong>：HyperLogLog 主要的应用场景就是进行基数统计。实际上不会存储每个元素的值，它使用的是概率算法，通过存储元素的hash值的第一个1的位置，来计算元素数量。HyperLogLog 可用极小空间完成独立数统计。</p><ul><li><p><strong>应用案例</strong></p><p>如何统计 Google 主页面每天被多少个不同的账户访问过？</p><p>对于 Google 这种访问量巨大的网页而言，其实统计出有十亿的访问量或十亿零十万的访问量其实是没有太多的区别的，因此，在这种业务场景下，为了节省成本，其实可以只计算出一个大概的值，而没有必要计算出精准的值。</p><p><code>HyperLogLog</code>：存在一定误差，占用内存少，稳定占用 12k 左右内存，可以统计 2^64 个元素，对于上面举例的应用场景，建议使用</p></li></ul></li><li><p><strong>Geo（地理空间信息）</strong>：Geo主要用于存储地理位置信息，并对存储的信息进行操作（添加、获取、计算两位置之间距离、获取指定范围内位置集合、获取某地点指定范围内集合）。</p></li><li><p><strong>Pub/Sub（发布订阅）</strong>：发布订阅类似于广播功能。redis发布订阅包括 发布者、订阅者、Channel</p></li><li><p><strong>Bitmap（位图）</strong>：Bitmap就是位图，其实也就是字节数组（byte array），用一串连续的2进制数字（0或1）表示，每一位所在的位置为偏移(offset)，位图就是用每一个二进制位来存放或者标记某个元素对应的值。通常是用来判断某个数据存不存在的，因为是用bit为单位来存储所以Bitmap本身会极大的节省储存空间</p><ul><li><p><strong>应用案例</strong></p><p>有1亿用户，5千万登陆用户，那么统计每日用户的登录数。每一位标识一个用户ID，当某个用户访问我们的网站就在Bitmap中把标识此用户的位设置为1。</p><ul><li>用户在线状态</li><li>用户签到状态</li><li>统计独立用户</li></ul></li></ul></li></ul><h1 id="6布隆过滤器的工作原理"><a class="markdownIt-Anchor" href="#6布隆过滤器的工作原理"></a> 6.布隆过滤器的工作原理</h1><p><img src="/2023/02/17/redis/image-20230110151730496.png" alt="image-20230110151730496"></p><p>​当一个元素被加入集合时，通过K个散列函数将这个元素映射成一个位数组中的K个点（使用多个哈希函数对<strong>元素key (bloom中不存value)</strong> 进行哈希，算出一个整数索引值，然后对位数组长度进行取模运算得到一个位置，每个无偏哈希函数都会得到一个不同的位置），把它们置为1。检索时，我们只要看看这些点是不是都是1就（大约）知道集合中有没有它了：</p><ul><li>如果这些点有任何一个为0，则被检元素一定不在</li><li>如果都是1，并不能完全说明这个元素就一定存在其中，有可能这些位置为1是因为其他元素的存在，这就是布隆过滤器会出现误判的原因</li></ul><p><strong>应用场景</strong></p><ul><li><strong>解决缓存穿透</strong>：事先把存在的key都放到redis的<strong>Bloom Filter</strong> 中，他的用途就是存在性检测，如果 BloomFilter 中不存在，那么数据一定不存在；如果 BloomFilter 中存在，实际数据也有可能会不存</li><li><strong>黑名单校验</strong>：假设黑名单的数量是数以亿计的，存放起来就是非常耗费存储空间的，布隆过滤器则是一个较好的解决方案。把所有黑名单都放在布隆过滤器中，再收到邮件时，判断邮件地址是否在布隆过滤器中即可</li><li><strong>Web拦截器</strong>：用户第一次请求，将请求参数放入布隆过滤器中，当第二次请求时，先判断请求参数是否被布隆过滤器命中，从而提高缓存命中率</li></ul><h1 id="7redis的持久化方式及优缺点"><a class="markdownIt-Anchor" href="#7redis的持久化方式及优缺点"></a> 7.Redis的持久化方式及优缺点</h1><h2 id="rdb"><a class="markdownIt-Anchor" href="#rdb"></a> RDB</h2><p><code>RDB</code>（Redis Database Backup File，<strong>Redis数据备份文件</strong>）持久化方式：是指用数据集快照的方式半持久化模式记录 Redis 数据库的所有键值对，在某个时间点将数据写入一个临时文件，持久化结束后，用这个临时文件替换上次持久化的文件，达到数据恢复。</p><h3 id="原理"><a class="markdownIt-Anchor" href="#原理"></a> 原理</h3><p>bgsave开始时会fork主进程得到子进程，子进程共享主进程的内存数据。完成fork后读取内存数据并写入 RDB 文件。</p><p>fork采用的是copy-on-write技术：</p><ul><li>当主进程执行读操作时，访问共享内存；</li><li>当主进程执行写操作时，则会拷贝一份数据，执行写操作。</li></ul><p><img src="/2023/02/17/redis/image-20210725151319695-16733376057583.png" alt="image-20210725151319695"></p><h3 id="优缺点"><a class="markdownIt-Anchor" href="#优缺点"></a> 优缺点</h3><p><strong>优点</strong></p><ul><li>RDB快照是一个压缩过的非常紧凑的文件。保存着某个时间点的数据集，适合做数据的备份，灾难恢复</li><li>可最大化Redis的的性能。在保存RDB文件，服务器进程只需要fork一个子进程来完成RDB文件创建，父进程不需要做IO操作</li><li>与AOF相比，恢复大数据集的时候会更快</li></ul><p><strong>缺点</strong></p><ul><li>RDB的数据安全性是不如AOF的，保存整个数据集的过程是比繁重的，根据配置可能要几分钟才快照一次，如果服务器宕机，那么就可能丢失几分钟的数据</li><li>Redis数据集较大时，fork的子进程要完成快照会比较耗CPU、耗时</li></ul><h2 id="aof"><a class="markdownIt-Anchor" href="#aof"></a> AOF</h2><p>AOF（Append Only File，<strong>追加日志文件</strong>）持久化方式：是指所有的命令行记录以 Redis 命令请求协议的格式完全持久化存储保存为 aof 文件。Redis 是先执行命令，把数据写入内存，然后才记录日志。因为该模式是<strong>只追加</strong>的方式，所以没有任何磁盘寻址的开销，所以很快，有点像 Mysql 中的binlog，AOF更适合做热备。</p><p>AOF的命令记录的频率也可以通过redis.conf文件来配：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 表示每执行一次写命令，立即记录到AOF文件</span></span><br><span class="line"><span class="attr">appendfsync</span> <span class="string">always </span></span><br><span class="line"><span class="comment"># 写命令执行完先放入AOF缓冲区，然后表示每隔1秒将缓冲区数据写到AOF文件，是默认方案</span></span><br><span class="line"><span class="attr">appendfsync</span> <span class="string">everysec </span></span><br><span class="line"><span class="comment"># 写命令执行完先放入AOF缓冲区，由操作系统决定何时将缓冲区内容写回磁盘</span></span><br><span class="line"><span class="attr">appendfsync</span> <span class="string">no</span></span><br></pre></td></tr></table></figure><p>三种策略对比：</p><p><img src="/2023/02/17/redis/image-20210725151654046.png" alt="image-20210725151654046"></p><h3 id="aof文件重写"><a class="markdownIt-Anchor" href="#aof文件重写"></a> AOF文件重写</h3><p>因为是记录命令，AOF文件会比RDB文件大的多。而且AOF会记录对同一个key的多次写操作，但只有最后一次写操作才有意义。通过执行bgrewriteaof命令，可以让AOF文件执行重写功能，用最少的命令达到相同效果。</p><p><img src="/2023/02/17/redis/image-20210725151729118.png" alt="image-20210725151729118"></p><p>如图，AOF原本有三个命令，但是<code>set num 123 和 set num 666</code>都是对num的操作，第二次会覆盖第一次的值，因此第一个命令记录下来没有意义。</p><p>所以重写命令后，AOF文件内容就是：<code>mset name jack num 666</code></p><h3 id="优缺点-2"><a class="markdownIt-Anchor" href="#优缺点-2"></a> 优缺点</h3><p><strong>优点</strong></p><ul><li>数据更完整，安全性更高，秒级数据丢失（取决fsync策略，如果是everysec，最多丢失1秒的数据）</li><li>AOF文件是一个只进行追加的日志文件，且写入操作是以Redis协议的格式保存的，内容是可读的，适合误删紧急恢复</li></ul><p><strong>缺点</strong></p><ul><li>对于相同的数据集，AOF文件的体积要大于RDB文件，数据恢复也会比较慢</li><li>根据所使用的fsync策略，AOF的速度可能会慢于RDB。 不过在一般情况下，每秒fsync的性能依然非常高</li></ul><h2 id="rdb和aof对比"><a class="markdownIt-Anchor" href="#rdb和aof对比"></a> RDB和AOF对比</h2><p>RDB和AOF各有自己的优缺点，如果对数据安全性要求较高，在实际开发中往往会<strong>结合</strong>两者来使用。</p><p><img src="/2023/02/17/redis/image-20210725151940515.png" alt="image-20210725151940515"></p><h1 id="8redis的淘汰策略"><a class="markdownIt-Anchor" href="#8redis的淘汰策略"></a> 8.Redis的淘汰策略</h1><p>Redis淘汰机制的存在是为了更好的使用内存，用一定的缓存丢失来换取内存的使用效率。当Redis内存快耗尽时，Redis会启动内存淘汰机制，将部分key清掉以腾出内存。当达到内存使用上限超过<code>maxmemory</code>时，可在配置文件<code>redis.conf</code>中指定 <code>maxmemory-policy</code> 的清理缓存方式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 配置最大内存限制</span><br><span class="line">maxmemory 1000mb</span><br><span class="line"># 配置淘汰策略</span><br><span class="line">maxmemory-policy volatile-lru</span><br></pre></td></tr></table></figure><h2 id="lru最近最少使用"><a class="markdownIt-Anchor" href="#lru最近最少使用"></a> LRU(最近最少使用)</h2><ul><li><code>volatile-lru</code>：从已设置过期时间的key中，挑选**最近最少使用(最长时间没有使用)**的key进行淘汰</li><li><code>allkeys-lru</code>：从所有key中，挑选<strong>最近最少使用</strong>的数据淘汰</li></ul><h2 id="lfu最近最不经常使用"><a class="markdownIt-Anchor" href="#lfu最近最不经常使用"></a> LFU(最近最不经常使用)</h2><ul><li><code>volatile-lfu</code>：从已设置过期时间的key中，挑选**最近最不经常使用(使用次数最少)**的key进行淘汰</li><li><code>allkeys-lfu</code>：从所有key中，选择某段时间内内<strong>最近最不经常使用</strong>的数据淘汰</li></ul><h2 id="random随机淘汰"><a class="markdownIt-Anchor" href="#random随机淘汰"></a> Random(随机淘汰)</h2><ul><li><code>volatile-random</code>：从已设置过期时间的key中，<strong>任意选择</strong>数据淘汰</li><li><code>allkeys-random</code>：从所有key中，<strong>任意选择数</strong>据淘汰</li></ul><h2 id="ttl过期时间"><a class="markdownIt-Anchor" href="#ttl过期时间"></a> TTL(过期时间)</h2><ul><li><code>volatile-ttl</code>：从已设置过期时间的key中，挑选<strong>将要过期</strong>的数据淘汰</li><li><code>allkeys-random</code>：从所有key中，<strong>任意选择数</strong>据淘汰</li></ul><h2 id="no-enviction驱逐"><a class="markdownIt-Anchor" href="#no-enviction驱逐"></a> No-Enviction(驱逐)</h2><ul><li><code>noenviction（驱逐）</code>：当达到最大内存时直接返回错误，不覆盖或逐出任何数据</li></ul><h1 id="9redis主从同步原理"><a class="markdownIt-Anchor" href="#9redis主从同步原理"></a> 9.Redis主从同步原理</h1><h2 id="全量同步"><a class="markdownIt-Anchor" href="#全量同步"></a> 全量同步</h2><p>主从第一次建立连接时，会执行<strong>全量同步</strong>，将master节点的所有数据都拷贝给slave节点，流程：</p><p><img src="/2023/02/17/redis/image-20210725152222497.png" alt="image-20210725152222497"></p><p>这里有一个问题，master如何得知salve是第一次来连接呢？？</p><p>有几个概念，可以作为判断依据：</p><ul><li><strong>Replication Id</strong>：简称replid，是数据集的标记，id一致则说明是同一数据集。每一个master都有唯一的replid，slave则会继承master节点的replid</li><li><strong>offset</strong>：偏移量，随着记录在repl_baklog中的数据增多而逐渐增大。slave完成同步时也会记录当前同步的offset。如果slave的offset小于master的offset，说明slave数据落后于master，需要更新。</li></ul><p>因此slave做数据同步，必须向master声明自己的replication id 和offset，master才可以判断到底需要同步哪些数据。</p><p>因为slave原本也是一个master，有自己的replid和offset，当第一次变成slave，与master建立连接时，发送的replid和offset是自己的replid和offset。</p><p>master判断发现slave发送来的replid与自己的不一致，说明这是一个全新的slave，就知道要做全量同步了。</p><p>master会将自己的replid和offset都发送给这个slave，slave保存这些信息。以后slave的replid就与master一致了。</p><p>因此，<strong>master判断一个节点是否是第一次同步的依据，就是看replid是否一致</strong>。</p><p>如图：</p><p><img src="/2023/02/17/redis/image-20210725152700914.png" alt="image-20210725152700914"></p><p>完整流程描述：</p><ul><li>slave节点请求增量同步</li><li>master节点判断replid，发现不一致，拒绝增量同步</li><li>master将完整内存数据生成RDB，发送RDB到slave</li><li>slave清空本地数据，加载master的RDB</li><li>master将RDB期间的命令记录在repl_baklog，并持续将log中的命令发送给slave</li><li>slave执行接收到的命令，保持与master之间的同步</li></ul><h2 id="增量同步"><a class="markdownIt-Anchor" href="#增量同步"></a> 增量同步</h2><p>全量同步需要先做RDB，然后将RDB文件通过网络传输个slave，成本太高了。因此除了第一次做全量同步，其它大多数时候slave与master都是做<strong>增量同步</strong>。</p><p>什么是增量同步？就是只更新slave与master存在差异的部分数据。如图：</p><p><img src="/2023/02/17/redis/image-20210725153201086.png" alt="image-20210725153201086"></p><p>那么master怎么知道slave与自己的数据差异在哪里呢?</p><h2 id="repl_backlog原理"><a class="markdownIt-Anchor" href="#repl_backlog原理"></a> repl_backlog原理</h2><p>master怎么知道slave与自己的数据差异在哪里呢?</p><p>这就要说到全量同步时的repl_baklog文件了。</p><p>这个文件是一个固定大小的数组，只不过数组是环形，也就是说<strong>角标到达数组末尾后，会再次从0开始读写</strong>，这样数组头部的数据就会被覆盖。</p><p>repl_baklog中会记录Redis处理过的命令日志及offset，包括master当前的offset，和slave已经拷贝到的offset：</p><p><img src="/2023/02/17/redis/image-20210725153359022.png" alt="image-20210725153359022"></p><p>slave与master的offset之间的差异，就是salve需要增量拷贝的数据了。</p><p>随着不断有数据写入，master的offset逐渐变大，slave也不断的拷贝，追赶master的offset：</p><p><img src="/2023/02/17/redis/image-20210725153524190.png" alt="image-20210725153524190"></p><p>直到数组被填满：</p><p><img src="/2023/02/17/redis/image-20210725153715910.png" alt="image-20210725153715910"></p><p>此时，如果有新的数据写入，就会覆盖数组中的旧数据。不过，旧的数据只要是绿色的，说明是已经被同步到slave的数据，即便被覆盖了也没什么影响。因为未同步的仅仅是红色部分。</p><p>但是，如果slave出现网络阻塞，导致master的offset远远超过了slave的offset：</p><p><img src="/2023/02/17/redis/image-20210725153937031.png" alt="image-20210725153937031"></p><p>如果master继续写入新数据，其offset就会覆盖旧的数据，直到将slave现在的offset也覆盖：</p><p><img src="/2023/02/17/redis/image-20210725154155984.png" alt="image-20210725154155984"></p><p>棕色框中的红色部分，就是尚未同步，但是却已经被覆盖的数据。此时如果slave恢复，需要同步，却发现自己的offset都没有了，无法完成增量同步了。只能做全量同步。</p><p><img src="/2023/02/17/redis/image-20210725154216392.png" alt="image-20210725154216392"></p><h2 id="主从同步优化"><a class="markdownIt-Anchor" href="#主从同步优化"></a> 主从同步优化</h2><p>主从同步可以保证主从数据的一致性，非常重要。</p><p>可以从以下几个方面来优化Redis主从就集群：</p><ul><li>在master中配置repl-diskless-sync yes启用无磁盘复制，避免全量同步时的磁盘IO。</li><li>Redis单节点上的内存占用不要太大，减少RDB导致的过多磁盘IO</li><li>适当提高repl_baklog的大小，发现slave宕机时尽快实现故障恢复，尽可能避免全量同步</li><li>限制一个master上的slave节点数量，如果实在是太多slave，则可以采用主-从-从链式结构，减少master压力</li></ul><p>主从从架构图：</p><p><img src="/2023/02/17/redis/image-20210725154405899.png" alt="image-20210725154405899"></p><h2 id="小结"><a class="markdownIt-Anchor" href="#小结"></a> 小结</h2><p>简述全量同步和增量同步区别？</p><ul><li>全量同步：master将完整内存数据生成RDB，发送RDB到slave。后续命令则记录在repl_baklog，逐个发送给slave。</li><li>增量同步：slave提交自己的offset到master，master获取repl_baklog中从offset之后的命令给slave</li></ul><p>什么时候执行全量同步？</p><ul><li>slave节点第一次连接master节点时</li><li>slave节点断开时间太久，repl_baklog中的offset已经被覆盖时</li></ul><p>什么时候执行增量同步？</p><ul><li>slave节点断开又恢复，并且在repl_baklog中能找到offset时</li></ul><h1 id="10解释一下redis中的缓存击穿-雪崩-穿透问题并指出解决方案"><a class="markdownIt-Anchor" href="#10解释一下redis中的缓存击穿-雪崩-穿透问题并指出解决方案"></a> 10.解释一下Redis中的缓存击穿、雪崩、穿透问题，并指出解决方案</h1><h2 id="缓存穿透"><a class="markdownIt-Anchor" href="#缓存穿透"></a> 缓存穿透</h2><p>缓存穿透是指客户端请求的数据在缓存中和数据库中都不存在，这样缓存永远不会生效，这些请求都会打到数据库。</p><p>常见的解决方案有两种：</p><ul><li>缓存空对象<ul><li>优点：实现简单，维护方便</li><li>缺点：<ul><li>额外的内存消耗</li><li>可能造成短期的不一致</li></ul></li></ul></li><li>布隆过滤<ul><li>优点：内存占用较少，没有多余key</li><li>缺点：<ul><li>实现复杂</li><li>存在误判可能</li></ul></li></ul></li></ul><p>**缓存空对象思路分析：**哪怕这个数据在数据库中也不存在，我们也把这个数据存入到redis中去，这样，下次用户过来访问这个不存在的数据，那么在redis中也能找到这个数据就不会进入到缓存了</p><p>**布隆过滤：**布隆过滤器其实采用的是哈希思想(<strong>Bigmap</strong>)来解决这个问题，通过一个庞大的二进制数组，走哈希思想去判断当前这个要查询的这个数据是否存在，如果布隆过滤器判断存在，则放行，不过此时可能会有误判。</p><p>假设布隆过滤器判断这个数据不存在，那么这个数据<strong>一定不存在</strong>则直接返回</p><p>这种方式优点在于节约内存空间，存在误判，误判原因在于：布隆过滤器走的是哈希思想，只要哈希思想，就可能存在哈希冲突</p><p><img src="/2023/02/17/redis/1653326156516.png" alt="1653326156516"></p><h2 id="缓存雪崩"><a class="markdownIt-Anchor" href="#缓存雪崩"></a> 缓存雪崩</h2><p>缓存雪崩是指在同一时段大量的缓存key同时失效或者Redis服务宕机，导致大量请求到达数据库，带来巨大压力。</p><p>解决方案：</p><ul><li>给不同的Key的TTL添加随机值</li><li>利用Redis集群提高服务的可用性</li><li>给缓存业务添加降级限流策略</li><li>给业务添加多级缓存</li></ul><p><img src="/2023/02/17/redis/1653327884526.png" alt="1653327884526"></p><h2 id="缓存击穿热点key问题"><a class="markdownIt-Anchor" href="#缓存击穿热点key问题"></a> 缓存击穿（热点key问题）</h2><p>缓存击穿问题也叫热点Key问题，就是一个被高并发访问并且缓存重建业务较复杂的key突然失效了，无数的请求访问会在瞬间给数据库带来巨大的冲击。</p><p>常见的解决方案有两种：</p><ul><li>互斥锁</li><li>逻辑过期</li></ul><p>逻辑分析：假设线程1在查询缓存之后，本来应该去查询数据库，然后把这个数据重新加载到缓存的，此时只要线程1走完这个逻辑，其他线程就都能从缓存中加载这些数据了，但是假设在线程1没有走完的时候，后续的线程2，线程3，线程4同时过来访问当前这个方法， 那么这些线程都不能从缓存中查询到数据，那么他们就会同一时刻来访问查询缓存，都没查到，接着同一时间去访问数据库，同时的去执行数据库代码，对数据库访问压力过大</p><p><img src="/2023/02/17/redis/1653328022622.png" alt="1653328022622"></p><p>解决方案一、使用锁来解决：</p><p>因为锁能实现互斥性。假设线程过来，只能一个人一个人的来访问数据库，从而避免对于数据库访问压力过大，但这也会影响查询的性能，因为此时会让查询的性能从并行变成了串行，我们可以采用tryLock方法 + double check来解决这样的问题。</p><p>假设现在线程1过来访问，他查询缓存没有命中，但是此时他获得到了锁的资源，那么线程1就会一个人去执行逻辑，假设现在线程2过来，线程2在执行过程中，并没有获得到锁，那么线程2就可以进行到休眠，直到线程1把锁释放后，线程2获得到锁，然后再来执行逻辑，此时就能够从缓存中拿到数据了。</p><p><img src="/2023/02/17/redis/1653328288627.png" alt="1653328288627"></p><p>解决方案二、逻辑过期方案</p><p>方案分析：我们之所以会出现这个缓存击穿问题，主要原因是在于我们对key设置了过期时间，假设我们不设置过期时间，其实就不会有缓存击穿的问题，但是不设置过期时间，这样数据不就一直占用我们内存了吗，我们可以采用逻辑过期方案。</p><p>我们把过期时间设置在 redis的value中，注意：这个过期时间并不会直接作用于redis，而是我们后续通过逻辑去处理。假设线程1去查询缓存，然后从value中判断出来当前的数据已经过期了，此时线程1去获得互斥锁，那么其他线程会进行阻塞，获得了锁的线程他会开启一个 线程去进行 以前的重构数据的逻辑，直到新开的线程完成这个逻辑后，才释放锁， 而线程1直接进行返回，假设现在线程3过来访问，由于线程线程2持有着锁，所以线程3无法获得锁，线程3也直接返回数据，只有等到新开的线程2把重建数据构建完后，其他线程才能走返回正确的数据。</p><p>这种方案巧妙在于，异步的构建缓存，缺点在于在构建完缓存之前，返回的都是脏数据。</p><p><img src="/2023/02/17/redis/1653328663897.png" alt="1653328663897"></p><p>进行对比</p><p>**互斥锁方案：**由于保证了互斥性，所以数据一致，且实现简单，因为仅仅只需要加一把锁而已，也没其他的事情需要操心，所以没有额外的内存消耗，缺点在于有锁就有死锁问题的发生，且只能串行执行性能肯定受到影响</p><p><strong>逻辑过期方案：</strong> 线程读取过程中不需要等待，性能好，有一个额外的线程持有锁去进行重构数据，但是在重构数据完成前，其他的线程只能返回之前的数据，且实现起来麻烦</p><p><img src="/2023/02/17/redis/1653357522914.png" alt="1653357522914"></p><h1 id="11讲一下redis缓存同步问题"><a class="markdownIt-Anchor" href="#11讲一下redis缓存同步问题"></a> 11.讲一下Redis缓存同步问题</h1><p>大多数情况下，浏览器查询到的都是缓存数据，如果缓存数据与数据库数据存在较大差异，可能会产生比较严重的后果。</p><p>所以我们必须保证数据库数据、缓存数据的一致性，这就是缓存与数据库的同步。</p><p>缓存数据同步的常见方式有三种：</p><p><strong>设置有效期</strong>：给缓存设置有效期，到期后自动删除。再次查询时更新</p><ul><li>优势：简单、方便</li><li>缺点：时效性差，缓存过期之前可能不一致</li><li>场景：更新频率较低，时效性要求低的业务</li></ul><p><strong>同步双写</strong>：在修改数据库的同时，直接修改缓存</p><ul><li>优势：时效性强，缓存与数据库强一致</li><li>缺点：有代码侵入，耦合度高；</li><li>场景：对一致性、时效性要求较高的缓存数据</li></ul><p>**异步通知：**修改数据库时发送事件通知，相关服务监听到通知后修改缓存数据</p><ul><li>优势：低耦合，可以同时通知多个缓存服务</li><li>缺点：时效性一般，可能存在中间不一致状态</li><li>场景：时效性要求一般，有多个服务需要同步</li></ul><p>而异步实现又可以基于MQ或者Canal来实现：</p><p>1）基于MQ的异步通知：</p><p><img src="/2023/02/17/redis/image-20210821115552327.png" alt="image-20210821115552327"></p><p>解读：</p><ul><li>商品服务完成对数据的修改后，只需要发送一条消息到MQ中。</li><li>缓存服务监听MQ消息，然后完成对缓存的更新</li></ul><p>依然有少量的代码侵入。</p><p>2）基于Canal的通知</p><p><img src="/2023/02/17/redis/image-20210821115719363.png" alt="image-20210821115719363"></p><p>解读：</p><ul><li>商品服务完成商品修改后，业务直接结束，没有任何代码侵入</li><li>Canal监听MySQL变化，当发现变化后，立即通知缓存服务</li><li>缓存服务接收到canal通知，更新缓存</li></ul><p>代码零侵入</p><h1 id="12如何用redis实现分布式锁"><a class="markdownIt-Anchor" href="#12如何用redis实现分布式锁"></a> 12.如何用redis实现分布式锁</h1><p>分布式锁：满足分布式系统或集群模式下多进程可见并且互斥的锁。</p><p>分布式锁的核心思想就是让大家都使用同一把锁，只要大家使用的是同一把锁，那么我们就能锁住线程，不让线程进行，让程序串行执行，这就是分布式锁的核心思路</p><p>Redis：redis作为分布式锁是非常常见的一种使用方式，现在企业级开发中基本都使用redis或者zookeeper作为分布式锁，利用setnx这个方法，如果插入key成功，则表示获得到了锁，如果有人插入成功，其他人插入失败则表示无法获得到锁，利用这套逻辑来实现分布式锁</p><h2 id="实现思路"><a class="markdownIt-Anchor" href="#实现思路"></a> 实现思路</h2><p>实现分布式锁时需要实现的两个基本方法：</p><ul><li><p>获取锁：</p><ul><li>互斥：确保只能有一个线程获取锁</li><li>非阻塞：尝试一次，成功返回true，失败返回false</li></ul></li><li><p>释放锁：</p><ul><li>手动释放</li><li>超时释放：获取锁时添加一个超时时间</li></ul><p><img src="/2023/02/17/redis/1653382669900.png" alt="1653382669900"></p></li></ul><p>核心思路：</p><p>我们利用redis 的setNx 方法，当有多个线程进入时，我们就利用该方法，第一个线程进入时，redis 中就有这个key 了，返回了1，如果结果是1，则表示他抢到了锁，那么他去执行业务，然后再删除锁，退出锁逻辑，没有抢到锁的哥们，等待一定时间后重试即可</p><h2 id="关于锁误删情况的改进"><a class="markdownIt-Anchor" href="#关于锁误删情况的改进"></a> 关于锁误删情况的改进</h2><p>逻辑说明：</p><p>持有锁的线程在锁的内部出现了阻塞，导致他的锁自动释放，这时其他线程，线程2来尝试获得锁，就拿到了这把锁，然后线程2在持有锁执行过程中，线程1反应过来，继续执行，而线程1执行过程中，走到了删除锁逻辑，此时就会把本应该属于线程2的锁进行删除，这就是误删别人锁的情况说明</p><p><strong>解决方案</strong>：解决方案就是在每个线程释放锁的时候，去判断一下当前这把锁是否属于自己，如果属于自己，则不进行锁的删除，假设还是上边的情况，线程1卡顿，锁自动释放，线程2进入到锁的内部执行逻辑，此时线程1反应过来，然后删除锁，但是线程1，一看当前这把锁不是属于自己，于是不进行删除锁逻辑，当线程2走到删除锁逻辑时，如果没有卡过自动释放锁的时间点，则判断当前这把锁是属于自己的，于是删除这把锁。</p><p><strong>核心逻辑</strong>：在存入锁时，放入自己线程的标识，在删除锁时，判断当前这把锁的标识是不是自己存入的，如果是，则进行删除，如果不是，则不进行删除。</p><h2 id="原子性问题"><a class="markdownIt-Anchor" href="#原子性问题"></a> 原子性问题</h2><p>用java代码无法保证两条语句的原子性</p><p>例如：线程1现在持有锁之后，在执行业务逻辑过程中，他正准备删除锁，而且已经走到了条件判断的过程中，比如他已经拿到了当前这把锁确实是属于他自己的，正准备删除锁，但是此时他的锁到期了，那么此时线程2进来，但是线程1他会接着往后执行，当他卡顿结束后，他直接就会执行删除锁那行代码，相当于条件判断并没有起到作用，这就是删锁时的原子性问题，之所以有这个问题，是因为线程1的拿锁，比锁，删锁，实际上并不是原子性的，我们要防止刚才的情况发生</p><p><strong>解决方案</strong>：使用Lua脚本，在一个脚本中编写多条Redis命令，确保多条命令执行时的原子性</p><h2 id="redission"><a class="markdownIt-Anchor" href="#redission"></a> redission</h2><p>基于setnx实现的分布式锁存在下面的问题：</p><p><strong>重入问题</strong>：重入问题是指 获得锁的线程可以再次进入到相同的锁的代码块中，可重入锁的意义在于防止死锁，比如HashTable这样的代码中，他的方法都是使用synchronized修饰的，假如他在一个方法内，调用另一个方法，那么此时如果是不可重入的，不就死锁了吗？所以可重入锁他的主要意义是防止死锁，我们的synchronized和Lock锁都是可重入的。</p><p><strong>不可重试</strong>：是指目前的分布式只能尝试一次，我们认为合理的情况是：当线程在获得锁失败后，他应该能再次尝试获得锁。</p><p>**超时释放：**我们在加锁时增加了过期时间，这样的我们可以防止死锁，但是如果卡顿的时间超长，虽然我们采用了lua表达式防止删锁的时候，误删别人的锁，但是毕竟没有锁住，有安全隐患</p><p><strong>主从一致性：</strong> 如果Redis提供了主从集群，当我们向集群写数据时，主机需要异步的将数据同步给从机，而万一在同步过去之前，主机宕机了，就会出现死锁问题。</p><p>那么什么是Redission呢</p><p>Redisson是一个在Redis的基础上实现的Java驻内存数据网格（In-Memory Data Grid）。它不仅提供了一系列的分布式的Java常用对象，还提供了许多分布式服务，其中就包含了各种分布式锁的实现。</p><p>Redission提供了分布式锁的多种多样的功能</p><p>Redission<strong>执行流程</strong>如下：（只要线程一加锁成功，就会启动一个watch dog看门狗，它是一个后台线程，会每隔10秒检查一下（锁续命周期就是设置的超时时间的三分之一），如果线程还持有锁，就会不断的延长锁key的生存时间。因此，Redis就是使用Redisson解决了锁过期释放，业务没执行完问题。当业务执行完，释放锁后，再关闭守护线程，</p><p><strong>可重入原理</strong>：在Lock锁中，他是借助于底层的一个voaltile的一个state变量来记录重入的状态的，比如当前没有人持有这把锁，那么state=0，假如有人持有这把锁，那么state=1，如果持有这把锁的人再次持有这把锁，那么state就会+1 ，如果是对于synchronized而言，他在c语言代码中会有一个count，原理和state类似，也是重入一次就加一，释放一次就-1 ，直到减少成0 时，表示当前这把锁没有被人持有。</p><h2 id="redission锁重试与看门狗机制"><a class="markdownIt-Anchor" href="#redission锁重试与看门狗机制"></a> redission锁重试与看门狗机制</h2><p>抢锁过程中，获得当前线程，通过tryAcquire进行抢锁，该抢锁逻辑和之前逻辑相同</p><p>1、先判断当前这把锁是否存在，如果不存在，插入一把锁，返回null</p><p>2、判断当前这把锁是否是属于当前线程，如果是，则返回null</p><p>所以如果返回是null，则代表着当前这哥们已经抢锁完毕，或者可重入完毕，但是如果以上两个条件都不满足，则进入到第三个条件，返回的是锁的失效时间，同学们可以自行往下翻一点点，你能发现有个while( true) 再次进行tryAcquire进行抢锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">threadId</span> <span class="operator">=</span> Thread.currentThread().getId();</span><br><span class="line"><span class="type">Long</span> <span class="variable">ttl</span> <span class="operator">=</span> tryAcquire(-<span class="number">1</span>, leaseTime, unit, threadId);</span><br><span class="line"><span class="comment">// lock acquired</span></span><br><span class="line"><span class="keyword">if</span> (ttl == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来会有一个条件分支，因为lock方法有重载方法，一个是带参数，一个是不带参数，如果带带参数传入的值是-1，如果传入参数，则leaseTime是他本身，所以如果传入了参数，此时leaseTime != -1 则会进去抢锁，抢锁的逻辑就是之前说的那三个逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (leaseTime != -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> tryLockInnerAsync(waitTime, leaseTime, unit, threadId, RedisCommands.EVAL_LONG);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是没有传入时间，则此时也会进行抢锁， 而且抢锁时间是默认看门狗时间 commandExecutor.getConnectionManager().getCfg().getLockWatchdogTimeout()</p><p>ttlRemainingFuture.onComplete((ttlRemaining, e) 这句话相当于对以上抢锁进行了监听，也就是说当上边抢锁完毕后，此方法会被调用，具体调用的逻辑就是去后台开启一个线程，进行续约逻辑，也就是看门狗线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">RFuture&lt;Long&gt; ttlRemainingFuture = tryLockInnerAsync(waitTime,</span><br><span class="line">                                        commandExecutor.getConnectionManager().getCfg().getLockWatchdogTimeout(),</span><br><span class="line">                                        TimeUnit.MILLISECONDS, threadId, RedisCommands.EVAL_LONG);</span><br><span class="line">ttlRemainingFuture.onComplete((ttlRemaining, e) -&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// lock acquired</span></span><br><span class="line">    <span class="keyword">if</span> (ttlRemaining == <span class="literal">null</span>) &#123;</span><br><span class="line">        scheduleExpirationRenewal(threadId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">return</span> ttlRemainingFuture;</span><br></pre></td></tr></table></figure><p>此逻辑就是续约逻辑，注意看commandExecutor.getConnectionManager().newTimeout（） 此方法</p><p>Method(  <strong>new</strong> TimerTask() {},参数2 ，参数3  )</p><p>指的是：通过参数2，参数3 去描述什么时候去做参数1的事情，现在的情况是：10s之后去做参数一的事情</p><p>因为锁的失效时间是30s，当10s之后，此时这个timeTask 就触发了，他就去进行续约，把当前这把锁续约成30s，如果操作成功，那么此时就会递归调用自己，再重新设置一个timeTask()，于是再过10s后又再设置一个timerTask，完成不停的续约</p><p>那么大家可以想一想，假设我们的线程出现了宕机他还会续约吗？当然不会，因为没有人再去调用renewExpiration这个方法，所以等到时间之后自然就释放了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">renewExpiration</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ExpirationEntry</span> <span class="variable">ee</span> <span class="operator">=</span> EXPIRATION_RENEWAL_MAP.get(getEntryName());</span><br><span class="line">    <span class="keyword">if</span> (ee == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">Timeout</span> <span class="variable">task</span> <span class="operator">=</span> commandExecutor.getConnectionManager().newTimeout(<span class="keyword">new</span> <span class="title class_">TimerTask</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(Timeout timeout)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            <span class="type">ExpirationEntry</span> <span class="variable">ent</span> <span class="operator">=</span> EXPIRATION_RENEWAL_MAP.get(getEntryName());</span><br><span class="line">            <span class="keyword">if</span> (ent == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">Long</span> <span class="variable">threadId</span> <span class="operator">=</span> ent.getFirstThreadId();</span><br><span class="line">            <span class="keyword">if</span> (threadId == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            RFuture&lt;Boolean&gt; future = renewExpirationAsync(threadId);</span><br><span class="line">            future.onComplete((res, e) -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line">                    log.error(<span class="string">&quot;Can&#x27;t update lock &quot;</span> + getName() + <span class="string">&quot; expiration&quot;</span>, e);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> (res) &#123;</span><br><span class="line">                    <span class="comment">// reschedule itself</span></span><br><span class="line">                    renewExpiration();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, internalLockLeaseTime / <span class="number">3</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">    </span><br><span class="line">    ee.setTimeout(task);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="redission锁的mutilock原理"><a class="markdownIt-Anchor" href="#redission锁的mutilock原理"></a> redission锁的MutiLock原理</h2><p>为了提高redis的可用性，我们会搭建集群或者主从，现在以主从为例</p><p>此时我们去写命令，写在主机上， 主机会将数据同步给从机，但是假设在主机还没有来得及把数据写入到从机去的时候，此时主机宕机，哨兵会发现主机宕机，并且选举一个slave变成master，而此时新的master中实际上并没有锁信息，此时锁信息就已经丢掉了。</p><p><img src="/2023/02/17/redis/1653553998403.png" alt="1653553998403"></p><p>为了解决这个问题，redission提出来了MutiLock锁，使用这把锁咱们就不使用主从了，每个节点的地位都是一样的， 这把锁加锁的逻辑需要写入到每一个主丛节点上，只有所有的服务器都写入成功，此时才是加锁成功，假设现在某个节点挂了，那么他去获得锁的时候，只要有一个节点拿不到，都不能算是加锁成功，就保证了加锁的可靠性。</p><p><img src="/2023/02/17/redis/1653554055048.png" alt="1653554055048"></p><p>那么MutiLock 加锁原理是什么呢？笔者画了一幅图来说明</p><p>当我们去设置了多个锁时，redission会将多个锁添加到一个集合中，然后用while循环去不停去尝试拿锁，但是会有一个总共的加锁时间，这个时间是用需要加锁的个数 * 1500ms ，假设有3个锁，那么时间就是4500ms，假设在这4500ms内，所有的锁都加锁成功， 那么此时才算是加锁成功，如果在4500ms有线程加锁失败，则会再次去进行重试.</p><p><img src="/2023/02/17/redis/1653553093967.png" alt="1653553093967"></p><h1 id="13redis的集群方式待完成"><a class="markdownIt-Anchor" href="#13redis的集群方式待完成"></a> 13.redis的集群方式（待完成）</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1讲一下redis的网络模型&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1讲一下redis的网络模型&quot;&gt;&lt;/a&gt; 1.讲一下Redis的网络模型&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/2023/02/17/redis/image-2</summary>
      
    
    
    
    <category term="redis" scheme="http://cloud-tour.github.io/categories/redis/"/>
    
    
    <category term="redis" scheme="http://cloud-tour.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>mysql</title>
    <link href="http://cloud-tour.github.io/2023/02/17/mysql/"/>
    <id>http://cloud-tour.github.io/2023/02/17/mysql/</id>
    <published>2023-02-17T13:21:00.159Z</published>
    <updated>2023-02-17T13:22:31.373Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1sql的执行流程"><a class="markdownIt-Anchor" href="#1sql的执行流程"></a> 1.sql的执行流程</h1><p><img src="https://img-blog.csdnimg.cn/f5e93d9217484c438a7d7295b2e15d7d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5riF6aOO5ZKM5pyI5piO,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="img"></p><p><strong>执行流程：</strong></p><ul><li><p>1、在打开客户端后，最初需要和sql服务器建立连接，账号认证和校验权限。</p></li><li><p>2、认证后，客户端发生查询sql脚本给服务器</p></li><li><p>3、服务器先检查查询缓存，如果命中了缓存，则立刻返回存储在缓存中的结果。否则进入下一阶段。</p></li><li><p>4、服务器端进行SQL解析、预处理，再由优化器生成对应的执行计划。</p></li><li><p>5、MySQL根据优化器生成的执行计划，再调用存储引擎的API来执行查询。</p></li><li><p>6、将结果返回给客户端</p></li></ul><p><strong>各大器件说明：</strong></p><p>**连接器：**Client与Server建立连接、进行<a href="https://so.csdn.net/so/search?q=%E9%89%B4%E6%9D%83&amp;spm=1001.2101.3001.7020">鉴权</a>、保持连接、管理连接。</p><p>**解析器：**1、先通过词法分析：从左到右一个字符、一个字符地输入，然后根据构词规则识别单词。</p><p>​2、接下来，进行语法解析，生成解析树，判断输入的这个 SQL 语句是否满足 MySQL 语法.</p><p>​3、语义解析：若SQL 语句符合语法上的定义的话，则服务器进程接下去会对语句中涉及的表、索引、视图等对象进行解析，并  对照数据字典检查这些对象的名称以及相关结构，看看这些字段、表、视图等是否在数据库中。</p><p>**预处理器：**绝大多数情况下，某需求某一条 SQL 语句可能会被反复调用执行，或者每次执行的时候只有个别的值不同（比如 select 的 where 子句值不同，update 的 set 子句值不同，insert 的 values 值不同）。如果每次都需要经过词法语义解析、语句优化、制定执行计划等，则效率就明显不行了。</p><p>​所谓预编译语句就是将此类 SQL 语句中的值用占位符替代，可以视为将 SQL 语句模板化或者说参数化，一般称这类语句叫Prepared Statements。</p><p>​预编译语句的优势在于归纳为：一次编译、多次运行，省去了解析优化等过程；此外预编译语句能防止 SQL 注入。</p><p>**查询优化器：**优化器的目的是按照一定原则来得到她认为的目标SQL在当前情形下最有效的执行路径,优化器的目的是为了得到目标SQL的执行计划。传统关系型数据库里面的优化器分为CBO和RBO两种。</p><p>​CBO—Cost_Based Potimizer 基于成本的优化器:  CBO在会从目标诸多的执行路径中选择一个成本最小的执行路径来作为执行计划。这里的成本他实际代表了MySQL根据相关统计信息计算出来目标SQL对应的步骤的IO，CPU等消耗。也就是意味着数据库里的成本实际上就是对于执行目标SQL所需要IO,CPU等资源的一个估计值。而成本值是根据索引，表，行的统计信息计算出来的。(计算过程比较复杂)</p><h1 id="2innodb中的页分裂现象"><a class="markdownIt-Anchor" href="#2innodb中的页分裂现象"></a> 2.innodb中的页分裂现象</h1><p><strong>innodb的逻辑存储结构：</strong></p><p><img src="/2023/02/17/mysql/image-20230112170133211.png" alt="image-20230112170133211"></p><p><code>.ibd</code>的文件。这个文件由多个段（segments）组成，每个段和一个索引相关。</p><p>文件的结构是不会随着数据行的删除而变化的，但段则会跟着构成它的更小一级单位——区的变化而变化。区仅存在于段内，并且每个区都是固定的1MB大小（页体积默认的情况下）。页则是区的下一级构成单位，默认体积为16KB。</p><p>按这样算，一个区可以容纳最多64个页，一个页可以容纳2-N个行。行的数量取决于它的大小，由你的表结构定义。InnoDB要求页至少要有两个行，因此可以算出行的大小最多为8000 bytes。</p><h2 id="页的内部原理"><a class="markdownIt-Anchor" href="#页的内部原理"></a> 页的内部原理</h2><p>页可以空或者填充满（100%），行记录会按照主键顺序来排列。例如在使用<code>AUTO_INCREMENT</code>时，你会有顺序的ID 1、2、3、4等。</p><p><img src="https://pic3.zhimg.com/80/v2-3f061ac8f9efb6e1652f094a5983ddaa_720w.webp" alt="img"></p><p>页还有另一个重要的属性：<code>MERGE_THRESHOLD</code>。该参数的默认值是50%页的大小，它在InnoDB的合并操作中扮演了很重要的角色。</p><p><img src="https://pic2.zhimg.com/80/v2-6daba443c0b19c9956612fc3816dbd01_720w.webp" alt="img"></p><p>当你插入数据时，如果数据（大小）能够放的进页中的话，那他们是按顺序将页填满的。</p><p>若当前页满，则下一行记录会被插入下一页（NEXT）中。</p><p><img src="https://pic3.zhimg.com/80/v2-f3497d7e821abdfd51797a80bf0e68c2_720w.webp" alt="img"></p><p>根据B树的特性，它可以自顶向下遍历，但也可以在各叶子节点水平遍历。因为每个叶子节点都有着一个指向包含下一条（顺序）记录的页的指针。</p><p>例如，页#5有指向页#6的指针，页#6有指向前一页（#5）的指针和后一页（#7）的指针。</p><h2 id="页合并"><a class="markdownIt-Anchor" href="#页合并"></a> 页合并</h2><p>当你删了一行记录时，实际上记录并没有被物理删除，记录被标记（flaged）为删除并且它的空间变得允许被其他记录声明使用。</p><p><img src="https://pic1.zhimg.com/80/v2-6a9fd05c70648eabfb153f9c38b081d4_720w.webp" alt="img"></p><p>当页中删除的记录达到<code>MERGE_THRESHOLD</code>（默认页体积的50%），InnoDB会开始寻找最靠近的页（前或后）看看是否可以将两个页合并以优化空间使用。</p><p><img src="https://pic3.zhimg.com/80/v2-f3497d7e821abdfd51797a80bf0e68c2_720w.webp" alt="img"></p><p>在示例中，页#6使用了不到一半的空间，页#5又有足够的删除数量，现在同样处于50%使用以下。从InnoDB的角度来看，它们能够进行合并。</p><p><img src="https://pic2.zhimg.com/80/v2-ed174fc87f4037da0ed81cd1268653b5_720w.webp" alt="img"></p><p>合并操作使得页#5保留它之前的数据，并且容纳来自页#6的数据。页#6变成一个空页，可以接纳新数据。</p><p><img src="https://pic3.zhimg.com/80/v2-345d5647e15879a7342895d07fe1906e_720w.webp" alt="img"></p><p>如果我们在UPDATE操作中让页中数据体积达到类似的阈值点，InnoDB也会进行一样的操作。</p><h2 id="页分裂"><a class="markdownIt-Anchor" href="#页分裂"></a> 页分裂</h2><p>前面提到，页可能填充至100%，在页填满了之后，下一页会继续接管新的记录。但如果有下面这种情况呢？</p><p><img src="https://pic3.zhimg.com/80/v2-750b0a4f535435653c13cdcb0c853d06_720w.webp" alt="img"></p><p>页#10没有足够空间去容纳新（或更新）的记录。根据“下一页”的逻辑，记录应该由页#11负责。然而：</p><p><img src="https://pic1.zhimg.com/80/v2-575acc29a4e0312db70a515ab71d6d90_720w.webp" alt="img"></p><p>页#11也同样满了，数据也不可能不按顺序地插入。怎么办？</p><p>还记得之前说的链表吗（译注：指B+树的每一层都是双向链表）？页#10有指向页#9和页#11的指针。</p><p>InnoDB的做法是（简化版）：</p><ol><li>创建新页</li><li>判断当前页（页#10）可以从哪里进行分裂（记录行层面）</li><li>移动记录行</li><li>重新定义页之间的关系</li></ol><p><img src="https://pic3.zhimg.com/80/v2-eb81b65c29711b609e2076af48c17146_720w.webp" alt="img"></p><p>新的页#12被创建：</p><p><img src="https://pic1.zhimg.com/80/v2-0d05a58b7f1f1856894985e015db49c0_720w.webp" alt="img"></p><p>页#11保持原样，只有页之间的关系发生了改变：</p><ul><li>页#10相邻的前一页为页#9，后一页为页#12</li><li>页#12相邻的前一页为页#10，后一页为页#11</li><li>页#11相邻的前一页为页#10，后一页为页#13</li></ul><p>（译注：页#13可能本来就有，这里意思为页#10与页#11之间插入了页#12）</p><p>这样B树水平方向的一致性仍然满足，因为满足原定的顺序排列逻辑。然而从物理存储上讲页是乱序的，而且大概率会落到不同的区。</p><p>规律总结：页分裂会发生在插入或更新，并且造成页的错位（dislocation，落入不同的区）</p><p>InnoDB用<code>INFORMATION_SCHEMA.INNODB_METRICS</code>表来跟踪页的分裂数。可以查看其中的<code>index_page_splits</code>和<code>index_page_reorg_attempts/successful</code>统计。</p><p>一旦创建分裂的页，唯一（译注：实则仍有其他方法，见下文）将原先顺序恢复的办法就是新分裂出来的页因为低于合并阈值（merge threshold）被删掉。这时候InnoDB用页合并将数据合并回来。</p><p>另一种方式就是用<code>OPTIMIZE</code>重新整理表。这可能是个很重量级和耗时的过程，但可能是唯一将大量分布在不同区的页理顺的方法。</p><p>另一方面，要记住在合并和分裂的过程，InnoDB会在索引树上加写锁（x-latch）。在操作频繁的系统中这可能会是个隐患。它可能会导致索引的锁争用（index latch contention）。如果表中没有合并和分裂（也就是写操作）的操作，称为“乐观”更新，只需要使用读锁（S）。带有合并也分裂操作则称为“悲观”更新，使用写锁（X）。</p><h1 id="3join原理"><a class="markdownIt-Anchor" href="#3join原理"></a> 3.join原理</h1><p>MySQL是只支持一种JOIN算法<strong>Nested-Loop Join</strong>（嵌套循环链接）而对于这个算法有很多变种，能够帮助MySQL更高效的执行JOIN操作：</p><h2 id="1simple-nested-loop-join"><a class="markdownIt-Anchor" href="#1simple-nested-loop-join"></a> （1）Simple Nested-Loop Join</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/0aebe392a7c9bc354ec5e54d88d169ce.png" alt="img"></p><p>这个算法相对来说就是很简单了，从驱动表中取出R1匹配S表所有列，然后R2，R3,直到将R表中的所有数据匹配完（<strong>笛卡尔集</strong>），然后合并数据，可以看到这种算法要对S表进行RN次访问，虽然简单，但是相对来说开销还是太大了，对于两表联接来说，驱动表只会被访问一遍，但被驱动表却要被访问到好多遍</p><p>假设R为驱动表，S被驱动表，用伪代码表示一下这个过程就是这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> R                      <span class="comment"># 扫描R表（驱动表）</span></span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> S                   <span class="comment"># 扫描S表（被驱动表）</span></span><br><span class="line">        <span class="keyword">if</span> (r <span class="keyword">and</span> s satisfy the join condition)  <span class="comment"># 如果r和s满足join条件</span></span><br><span class="line">            output result    <span class="comment"># 返回结果集</span></span><br></pre></td></tr></table></figure><ul><li>所以如果R有1万条数据，S有1万条数据，那么数据比较的次数1万 * 1万 =1亿次，这种查询效率会非常慢。</li></ul><h2 id="2index-nested-loop-join"><a class="markdownIt-Anchor" href="#2index-nested-loop-join"></a> （2）Index Nested-Loop Join</h2><p>由于内表上有索引，所以比较的时候不再需要一条条记录进行比较，而可以通过索引来减少比较，从而加速查询。整个过程如下图所示：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/aa17d7a50a6cba976e7cf31d8bb378c7.png" alt="img"></p><p>这种算法在链接查询的时候，驱动表会根据关联字段的索引进行查找，当在索引上找到了符合的值，再回表进行查询，也就是只有当匹配到索引以后才会进行回表。至于驱动表的选择，MySQL优化器一般情况下是会选择记录数少的作为驱动表，但是当SQL特别复杂的时候不排除会出现错误选择。</p><p>大部分人诟病MySQL的INLJ慢，主要是因为在进行Join的时候可能用到的索引并不是主键的聚集索引，而是辅助索引，这时INLJ的过程又需要多一步Fetch（即回表执行）的过程，由于访问的是辅助索引，如果查询需要访问聚集索引上的列，那么必要需要进行回表取数据，看似每条记录只是多了一次回表操作，但这才是INLJ算法最大的弊端。</p><h2 id="3block-nested-loop-join"><a class="markdownIt-Anchor" href="#3block-nested-loop-join"></a> （3）Block Nested-Loop Join</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/5dc902bed1264510df70a27f09ca315d.png" alt="img"></p><p>在有索引的情况下，MySQL会尝试去使用Index Nested-Loop Join算法，在有些情况下，可能Join的列就是没有索引，那么这时MySQL的选择绝对不会是最先介绍的Simple Nested-Loop Join算法，而是会优先使用Block Nested-Loop Join的算法。</p><p>Block Nested-Loop Join对比Simple Nested-Loop Join多了一个中间处理的过程，也就是join buffer，使用join buffer将驱动表的查询JOIN相关列都给缓冲到了JOIN BUFFER当中，然后批量与非驱动表进行比较，这也来实现的话，可以将多次比较合并到一次，降低了非驱动表的访问频率。也就是只需要访问一次S表。这样来说的话，就不会出现多次访问非驱动表的情况了，也只有这种情况下才会访问join buffer。</p><p>在MySQL当中，我们可以通过参数join_buffer_size来设置join buffer的值，然后再进行操作。默认情况下join_buffer_size=256K，在查找的时候MySQL会将所有的需要的列缓存到join buffer当中，包括select的列，而不是仅仅只缓存关联列。在一个有N个JOIN关联的SQL当中会在执行时候分配N-1个join buffer。</p><h1 id="4innodb主键索引的btree高度"><a class="markdownIt-Anchor" href="#4innodb主键索引的btree高度"></a> 4.InnoDB主键索引的B+tree高度</h1><p>InnoDB主键索引的B+tree高度为多高呢?</p><p><img src="/2023/02/17/mysql/image-20230112211207768.png" alt="image-20230112211207768"></p><p>假设: 一行数据大小为1k，一页中可以存储16行这样的数据。InnoDB的指针占用6个字节的空 间，主键即使为bigint，占用字节数为8。</p><p><strong>高度为2：</strong></p><ul><li><p>n * 8 + (n + 1) * 6 = 16*1024</p><p>算出n约为 1170 1171* 16 = 18736</p><p>也就是说，如果树的高度为2，则可以存储 <strong>18000</strong> 多条记录。</p></li></ul><p><strong>高度为3：</strong></p><ul><li><p>1171 * 1171 * 16 = 21939856</p><p>也就是说，如果树的高度为3，则可以存储 <strong>2200w</strong> 左右的记录。</p></li></ul><h1 id="5mysql主从复制同步原理"><a class="markdownIt-Anchor" href="#5mysql主从复制同步原理"></a> 5.mysql主从复制(同步)原理</h1><p><img src="https://gitee.com/yu120/lemon-guide/raw/main/images/Database/%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86.jpg" alt="主从复制原理"></p><p>可以看到mysql主从复制需要三个线程：<strong>master（binlog dump thread）、slave（I/O thread 、SQL thread）</strong></p><ul><li><strong>binlog dump线程：</strong> 主库中有数据更新时，根据设置的binlog格式，将更新的事件类型写入到主库的binlog文件中，并创建log dump线程通知slave有数据更新。当I/O线程请求日志内容时，将此时的binlog名称和当前更新的位置同时传给slave的I/O线程</li><li><strong>I/O线程：</strong> 该线程会连接到master，向log dump线程请求一份指定binlog文件位置的副本，并将请求回来的binlog存到本地的relay log中</li><li><strong>SQL线程：</strong> 该线程检测到relay log有更新后，会读取并在本地做redo操作，将发生在主库的事件在本地重新执行一遍，来保证主从数据同步</li></ul><p><strong>基本过程总结</strong></p><ul><li>主库写入数据并且生成binlog文件。该过程中MySQL将事务串行的写入二进制日志，即使事务中的语句都是交叉执行的</li><li>在事件写入二进制日志完成后，master通知存储引擎提交事务</li><li>从库服务器上的IO线程连接Master服务器，请求从执行binlog日志文件中的指定位置开始读取binlog至从库</li><li>主库接收到从库IO线程请求后，其上复制的IO线程会根据Slave的请求信息分批读取binlog文件然后返回给从库的IO线程</li><li>Slave服务器的IO线程获取到Master服务器上IO线程发送的日志内容、日志文件及位置点后，会将binlog日志内容依次写到Slave端自身的Relay Log（即中继日志）文件的最末端，并将新的binlog文件名和位置记录到<code>master-info</code>文件中，以便下一次读取master端新binlog日志时能告诉Master服务器从新binlog日志的指定文件及位置开始读取新的binlog日志内容</li><li>从库服务器的SQL线程会实时监测到本地Relay Log中新增了日志内容，然后把RelayLog中的日志翻译成SQL并且按照顺序执行SQL来更新从库的数据</li><li>从库在<code>relay-log.info</code>中记录当前应用中继日志的文件名和位置点以便下一次数据复制</li></ul><h2 id="biglog"><a class="markdownIt-Anchor" href="#biglog"></a> biglog</h2><p><strong>binlog是什么？有什么作用？</strong></p><p>用于记录数据库执行的写入性操作(不包括查询)信息，以二进制的形式保存在磁盘中。可以简单理解为记录的就是sql语句。binlog 是 mysql 的逻辑日志，并且由 <code>Server</code>层进行记录，使用任何存储引擎的 mysql 数据库都会记录 binlog 日志。在实际应用中， binlog 的主要使用场景有两个：</p><ul><li>用于主从复制，在主从结构中，binlog 作为操作记录从 master 被发送到 slave，slave服务器从 master 接收到的日志保存到 relay log 中</li><li>用于数据备份，在数据库备份文件生成后，binlog保存了数据库备份后的详细信息，以便下一次备份能从备份点开始</li></ul><p><strong>日志格式</strong></p><p>binlog日志有三种格式，分别为STATMENT 、 ROW 和 MIXED。在 MySQL 5.7.7 之前，默认的格式是 STATEMENT ， MySQL 5.7.7 之后，默认值是 ROW。日志格式通过 <code>binlog-format</code> 指定。</p><ul><li><strong>STATMENT</strong> ：基于 SQL 语句的复制，每一条会修改数据的sql语句会记录到 binlog 中</li><li><strong>ROW</strong> ：基于行的复制</li><li><strong>MIXED</strong> ：基于 STATMENT 和 ROW 两种模式的混合复制，比如一般的数据操作使用 row 格式保存，有些表结构的变更语句，使用 statement 来记录</li></ul><h1 id="6数据库三大范式"><a class="markdownIt-Anchor" href="#6数据库三大范式"></a> 6.数据库三大范式</h1><h2 id="第一范式1nf"><a class="markdownIt-Anchor" href="#第一范式1nf"></a> 第一范式(1NF)</h2><p><strong>所有字段的值都是不可分解的原子值</strong>。即实体中的某个属性有多个值时，必须拆分为不同的属性。例如：</p><p><strong>用户信息表</strong></p><table><thead><tr><th>编号</th><th>姓名</th><th>年龄</th><th>地址</th></tr></thead><tbody><tr><td>1</td><td>小王</td><td>23</td><td>浙江省杭州市拱墅区湖州街51号</td></tr></tbody></table><p>当实际需求对地址没有特定的要求下，这个用户信息表的每一列都是不可分割的。但是当实际需求对省份或者城市有特别要求时，这个用户信息表中的地址就是可以分割的，改为：</p><p><strong>用户信息表</strong></p><table><thead><tr><th>编号</th><th>姓名</th><th>年龄</th><th>省份</th><th>城市</th><th>区县</th><th>详细地址</th></tr></thead><tbody><tr><td>1</td><td>小王</td><td>23</td><td>浙江省</td><td>杭州市</td><td>拱墅区</td><td>湖州街51号</td></tr></tbody></table><p><strong>好处</strong></p><ul><li>表结构相对清晰</li><li>易于查询</li></ul><h2 id="第二范式2nf"><a class="markdownIt-Anchor" href="#第二范式2nf"></a> 第二范式(2NF)</h2><p><strong>所有非主键列必须全部依赖于全部主键</strong>。符合与不符合的场景如下：</p><p><img src="https://gitee.com/yu120/lemon-guide/raw/main/images/Database/2NF.png" alt="img"></p><p>案例如下：</p><p><strong>学生课程表</strong></p><table><thead><tr><th>学生编号</th><th>课程编号</th><th>学生名称</th><th>课程名称</th><th>所在班级</th><th>班主任</th></tr></thead><tbody><tr><td>S1</td><td>C1</td><td>小王</td><td>计算机导论</td><td>计算机3班</td><td>陈老师</td></tr><tr><td>S1</td><td>C2</td><td>小王</td><td>数据结构</td><td>计算机3班</td><td>陈老师</td></tr><tr><td>S2</td><td>C1</td><td>小马</td><td>计算机导论</td><td>软件1班</td><td>李老师</td></tr></tbody></table><p>将学生编号和课程编号作为主键，能确定唯一一条数据，但是学生名称只跟学生编号有关，跟课程编号无关，即不满足完全函数依赖，改为：</p><p><strong>学生表</strong></p><table><thead><tr><th>学生编号</th><th>学生名称</th><th>所在班级</th><th>班主任</th></tr></thead><tbody><tr><td>S1</td><td>小王</td><td>计算机3班</td><td>陈老师</td></tr><tr><td>S2</td><td>小马</td><td>软件1班</td><td>李老师</td></tr></tbody></table><p><strong>课程表</strong></p><table><thead><tr><th>课程编号</th><th>课程名称</th></tr></thead><tbody><tr><td>C1</td><td>计算机导论</td></tr><tr><td>C2</td><td>数据结构</td></tr></tbody></table><p><strong>学生课程关系表</strong></p><table><thead><tr><th>学生编号</th><th>课程编号</th></tr></thead><tbody><tr><td>S1</td><td>C1</td></tr><tr><td>S1</td><td>C2</td></tr><tr><td>S2</td><td>C1</td></tr></tbody></table><p><strong>好处</strong></p><ul><li>相对节约空间，当学生表和课程表属性越多，效果越明显</li><li>解决插入异常，当新增一门课程时，原表因为没有学生选课，导致无法插入数据</li><li>解决更新繁琐，当更改一门课程名称时，原表要更改多条数据</li><li>解决删除异常，当学生学完一门课，原表若要清空学生上课信息，课程编号与课程名称的关系可能会丢失</li></ul><h2 id="第三范式3nf"><a class="markdownIt-Anchor" href="#第三范式3nf"></a> 第三范式(3NF)</h2><p><strong>在满足1NF和2NF的前提下，非主键列之间不存在间接依赖关系</strong>（消除传递函数依赖）。</p><p><img src="https://gitee.com/yu120/lemon-guide/raw/main/images/Database/3NF.png" alt="img"></p><p>案例如下：</p><p><strong>学生表</strong></p><table><thead><tr><th>学生编号</th><th>学生名称</th><th>班级编号</th><th>班级名字</th></tr></thead><tbody><tr><td>S1</td><td>小王</td><td>001</td><td>计算机1班</td></tr><tr><td>S2</td><td>小马</td><td>003</td><td>计算机3班</td></tr></tbody></table><p>学生编号作为主键满足第二范式（2NF）。通过学生编号 ⇒⇒ 班级编号 ⇒⇒ 班级名字，所以班级编号和班级名字之间存在依赖关系，改为：</p><p><strong>学生表</strong></p><table><thead><tr><th>学生编号</th><th>学生名称</th><th>班级编号</th></tr></thead><tbody><tr><td>S1</td><td>小王</td><td>001</td></tr><tr><td>S2</td><td>小马</td><td>003</td></tr></tbody></table><p><strong>班级表</strong></p><table><thead><tr><th>班级编号</th><th>班级名称</th></tr></thead><tbody><tr><td>001</td><td>计算机1班</td></tr><tr><td>003</td><td>计算机3班</td></tr></tbody></table><p><strong>好处</strong></p><ul><li>相对节约空间</li><li>解决更新繁琐</li><li>解决插入异常，当班级分配了老师，还没分配学生的时候，原表将不可插入数据</li><li>解决删除异常，当学生毕业后，若要清空学生信息，班级和老师的关系可能会丢失</li></ul><h1 id="7添加索引性能无法提升的可能原因"><a class="markdownIt-Anchor" href="#7添加索引性能无法提升的可能原因"></a> 7.添加索引性能无法提升的可能原因</h1><p>一条 SQL 语句执行的很慢，那是每次执行都很慢呢？还是大多数情况下是正常的，偶尔出现很慢呢？所以我觉得，我们还得分以下两种情况来讨论。</p><ul><li>大多数情况是正常的，只是偶尔会出现很慢的情况。</li><li>在数据量不变的情况下，这条SQL语句一直以来都执行的很慢。</li></ul><p>针对这两种情况，我们来分析下可能是哪些原因导致的。</p><p><strong>一、针对偶尔很慢的情况</strong></p><p>一条 SQL 大多数情况正常，偶尔才能出现很慢的情况，针对这种情况，我觉得这条SQL语句的书写本身是没什么问题的，而是其他原因导致的，那会是什么原因呢？</p><p>1、数据库在刷新脏页</p><p>当我们要往数据库插入一条数据、或者要更新一条数据的时候，我们知道数据库会在内存中把对应字段的数据更新了，但是更新之后，这些更新的字段并不会马上同步持久化到磁盘中去，而是把这些更新的记录写入到 redo log 日记中去，等到空闲的时候，在通过 redo log 里的日记把最新的数据同步到磁盘中去。数据库在在同步数据到磁盘的时候，就有可能导致我们的SQL语句执行的很慢了。</p><p>2、拿不到锁</p><p>这个就比较容易想到了，我们要执行的这条语句，刚好这条语句涉及到的表，别人在用，并且加锁了，我们拿不到锁，只能慢慢等待别人释放锁了。或者，表没有加锁，但要使用到的某个一行被加锁了，这个时候，我也没办法啊。</p><p><strong>二、针对一直都这么慢的情况</strong></p><p>1、没用到索引，索引失效</p><p>2、没有使用到覆盖索引，导致回表查询</p><p>3、数据库自己选错索引</p><h1 id="8sql字段冗余的解决方法"><a class="markdownIt-Anchor" href="#8sql字段冗余的解决方法"></a> 8.sql字段冗余的解决方法</h1><p>冗余字段的使用在多表联合查询都是大数据量的表的情况下，确实是个不错的选择，有效的减少了IO操作。但结合已有的项目产品来看，冗余字段确实是双刃剑。尤其是大项目的开发，如果忽略某个表的冗余字段的更新，那么后果是灾难性的。如何有效的管理冗余字段是开发组内必须解决的问题。</p><p><strong>解决方案1：使用专门的表来管理冗余字段。</strong></p><p>例如article表有以下冗余字段</p><ul><li><strong>fromUserName、toUserName</strong></li></ul><p>如何管理这两个字段呢？通过建立一个表，表结构如下</p><ul><li><strong>id、objTable、objName、sourceTable、sourceId、level、isUpdate</strong></li></ul><p>其中objTable=目标表，objName= 目标字段，sourceTable=源表,sourceId=源表ID,level=是否需要立即更新,isUpdate=是否已更新</p><p>其中，<strong>level</strong>字段很有必要，有些冗余字段并不需要在源表修改后立即更新，那么可以通过一个定期更新策略来更新。</p><p>通过库表的管理，配合一个合理的存储过程，冗余字段的使用将不再是难题。</p><p>举例，如果上面两个字段发生变化，则使用触发器或者调用这个存储过程来检查是否有需要立即更新的冗余字段，需要则立即更新，不需要则isUpdate置0,等到周期性的策略来更新同时isUpdate=1。</p><p><strong>解决方案2：平滑剔除字段。</strong></p><p>流程：</p><ul><li><p>1.梳理确认的要剔除冗余字段</p></li><li><p>2.排查出此字段所有关联的业务场景</p></li><li><p>3.开发停止对该字段写入和读取（统一操作保留字段）</p></li><li><p>4.强烈建议按照模块逐步进行，确保系统稳定（比如一次只改一个模块的相关表）</p></li><li><p>5.定期查该字段时候有新数据进入，如果有及时查找，一切正常后合适的时间节点删除该字段</p></li><li><p>6.平滑剔除三个月后对字段进行删除(保留三个月是避免因为排查遗漏造成线上错误)</p></li></ul><h1 id="9锁问题"><a class="markdownIt-Anchor" href="#9锁问题"></a> 9.锁问题</h1><h2 id="死锁"><a class="markdownIt-Anchor" href="#死锁"></a> 死锁</h2><p><strong>MyISAM中是不会产生死锁的，因为MyISAM总是一次性获得所需的全部锁，要么全部满足，要么全部等待。而在InnoDB中，锁是逐步获得的，就造成了死锁的可能。</strong></p><p>当两个及以上的事务，双方都在等待对方释放已经持有的锁或因为加锁顺序不一致造成循环等待锁资源，就会出现“死锁”。常见的报错信息为 ” <code>Deadlock found when trying to get lock...</code>”。</p><h3 id="避免死锁"><a class="markdownIt-Anchor" href="#避免死锁"></a> 避免死锁</h3><p>三种常见的避免死锁方式：</p><ul><li>如果不同程序会并发存取多个表，尽量<strong>约定以相同的顺序访问表</strong>，可以大大降低死锁机会</li><li>在同一个事务中，尽可能做到<strong>一次锁定所需要的所有资源</strong>，减少死锁产生概率</li><li>对于非常容易产生死锁的业务部分，可以尝试使用<strong>升级锁定颗粒度</strong>，通过表级锁定来减少死锁产生的概率</li></ul><h3 id="预防死锁"><a class="markdownIt-Anchor" href="#预防死锁"></a> 预防死锁</h3><ul><li><p><code>innodb_lock_wait_timeout</code> <strong>等待锁超时回滚事务</strong></p><p>直观方法是在两个事务相互等待时，当一个等待时间超过设置的某一阀值时，对其中一个事务进行回滚，另一个事务就能继续执行。</p></li><li><p><code>wait-for graph</code><strong>算法来主动进行死锁检测</strong></p><p>每当加锁请求无法立即满足需要并进入等待时，wait-for graph算法都会被触发。wait-for graph要求数据库保存以下两种信息：</p><ul><li>锁的信息链表</li><li>事务等待链表</li></ul></li></ul><h3 id="解决死锁"><a class="markdownIt-Anchor" href="#解决死锁"></a> 解决死锁</h3><ul><li><strong>等待事务超时，主动回滚</strong></li><li><strong>进行死锁检查，主动回滚某条事务，让别的事务能继续走下去</strong></li></ul><p>下面提供一种方法，解决死锁的状态:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 查看正在被锁的事务</span><br><span class="line">SELECT * FROM INFORMATION_SCHEMA.INNODB_TRX;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/yu120/lemon-guide/raw/main/images/Database/%E8%A7%A3%E5%86%B3%E6%AD%BB%E9%94%81.jpg" alt="解决死锁"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--上图trx_mysql_thread_id列的值</span><br><span class="line">kill trx_mysql_thread_id;</span><br></pre></td></tr></table></figure><h1 id="10数据切分"><a class="markdownIt-Anchor" href="#10数据切分"></a> 10.数据切分</h1><h2 id="水平切分"><a class="markdownIt-Anchor" href="#水平切分"></a> 水平切分</h2><p>水平切分又称为 Sharding，它是将同一个表中的记录拆分到多个结构相同的表中。当一个表的数据不断增多时，Sharding 是必然的选择，它可以将数据分布到集群的不同节点上，从而缓存单个数据库的压力。</p><p><img src="https://gitee.com/yu120/lemon-guide/raw/main/images/Database/007S8ZIlly1gjjfy33yx2j30fm05zwg9.jpg" alt="img"></p><h2 id="垂直切分"><a class="markdownIt-Anchor" href="#垂直切分"></a> 垂直切分</h2><p>垂直切分是将一张表按列分成多个表，通常是按照列的关系密集程度进行切分，也可以利用垂直切分将经常被使用的列和不经常被使用的列切分到不同的表中。在数据库的层面使用垂直切分将按数据库中表的密集程度部署到不通的库中，例如将原来电商数据部署库垂直切分称商品数据库、用户数据库等。</p><p><img src="https://gitee.com/yu120/lemon-guide/raw/main/images/Database/007S8ZIlly1gjjfy5yoatj30cy09l776.jpg" alt="img"></p><h2 id="sharding策略"><a class="markdownIt-Anchor" href="#sharding策略"></a> Sharding策略</h2><ul><li>哈希取模：hash(key)%N</li><li>范围：可以是 ID 范围也可以是时间范围</li><li>映射表：使用单独的一个数据库来存储映射关系</li></ul><h2 id="sharding存在的问题"><a class="markdownIt-Anchor" href="#sharding存在的问题"></a> Sharding存在的问题</h2><ul><li><strong>事务问题</strong>：使用分布式事务来解决，比如 XA 接口</li><li><strong>连接</strong>：可以将原来的连接分解成多个单表查询，然后在用户程序中进行连接。</li><li><strong>唯一性</strong><ul><li>使用全局唯一 ID （GUID）</li><li>为每个分片指定一个 ID 范围</li><li>分布式 ID 生成器（如 Twitter 的 Snowflake 算法）</li><li>使用redis生成全局增长主键</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1sql的执行流程&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1sql的执行流程&quot;&gt;&lt;/a&gt; 1.sql的执行流程&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/f5e93d921748</summary>
      
    
    
    
    <category term="mysql" scheme="http://cloud-tour.github.io/categories/mysql/"/>
    
    
    <category term="mysql" scheme="http://cloud-tour.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>ssb</title>
    <link href="http://cloud-tour.github.io/2023/02/17/ssb/"/>
    <id>http://cloud-tour.github.io/2023/02/17/ssb/</id>
    <published>2023-02-17T13:19:19.502Z</published>
    <updated>2023-02-17T13:20:23.268Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1spring-springmvc-springboot的相关概念"><a class="markdownIt-Anchor" href="#1spring-springmvc-springboot的相关概念"></a> 1.Spring、SpringMVC、SpringBoot的相关概念</h1><h2 id="spring"><a class="markdownIt-Anchor" href="#spring"></a> Spring</h2><p>Spring是一个开源容器框架，可以接管web层，业务层，dao层，持久层的组件，并且可以配置各种bean，和维护bean与bean之间的关系。其核心就是控制反转(IOC)，和面向切面(AOP)，简单的说就是一个分层的轻量级开源框架。</p><h2 id="springmvc"><a class="markdownIt-Anchor" href="#springmvc"></a> SpringMVC</h2><p>SpringMVC是一种web层mvc框架，用于替代servlet（处理|响应请求，获取表单参数，表单校验等。SpringMVC是一个MVC的开源框架，SpringMVC = struts2 + spring，springMVC就相当于是Struts2加上Spring的整合。</p><h2 id="springboot"><a class="markdownIt-Anchor" href="#springboot"></a> SpringBoot</h2><p>Springboot是一个微服务框架，延续了spring框架的核心思想IOC和AOP，简化了应用的开发和部署。Spring Boot是为了简化Spring应用的创建、运行、调试、部署等而出现的，使用它可以做到专注于Spring应用的开发，而无需过多关注XML的配置。提供了一堆依赖打包，并已经按照使用习惯解决了依赖问题—&gt;习惯大于约定。</p><p>Spring Boot基本上是Spring框架的扩展，它消除了设置Spring应用程序所需的XML配置，为更快，更高效的开发生态系统铺平了道路。Spring Boot中的一些特点：</p><ul><li>创建独立的spring应用</li><li>嵌入Tomcat, JettyUndertow 而且不需要部署他们</li><li>提供的“starters” poms来简化Maven配置</li><li>尽可能自动配置spring应用</li><li>提供生产指标,健壮检查和外部化配置</li><li>绝对没有代码生成和XML配置要求</li></ul><h1 id="2ioc与aop"><a class="markdownIt-Anchor" href="#2ioc与aop"></a> 2.IOC与AOP</h1><h2 id="ioc"><a class="markdownIt-Anchor" href="#ioc"></a> IoC</h2><p>IOC就是控制反转，指创建对象的控制权转移给Spring框架进行管理，并由Spring根据配置文件去创建实例和管理各个实例之间的依赖关系，对象与对象之间松散耦合，也利于功能的复用。DI依赖注入，和控制反转是同一个概念的不同角度的描述，即 应用程序在运行时依赖IoC容器来动态注入对象需要的外部依赖。</p><p>最直观的表达就是，以前创建对象的主动权和时机都是由自己把控的，IOC让对象的创建不用去new了，可以由spring自动生产，使用java的反射机制，根据配置文件在运行时动态的去创建对象以及管理对象，并调用对象的方法的。</p><p>Spring的IOC有三种注入方式 ：<strong>构造器注入、setter方法注入、根据注解注入</strong>。</p><h2 id="aop"><a class="markdownIt-Anchor" href="#aop"></a> AOP</h2><p>AOP，一般称为面向切面，作为面向对象的一种补充，用于将那些与业务无关，但却对多个对象产生影响的公共行为和逻辑，抽取并封装为一个可重用的模块，这个模块被命名为“切面”（Aspect），减少系统中的重复代码，降低了模块间的耦合度，提高系统的可维护性。可用于权限认证、日志、事务处理。AOP实现的关键在于 代理模式，AOP代理主要分为静态代理和动态代理。静态代理的代表为AspectJ；动态代理则以Spring AOP为代表。</p><h3 id="aop相关概念"><a class="markdownIt-Anchor" href="#aop相关概念"></a> AOP相关概念</h3><p><strong>这里还是先给出一个比较专业的概念定义</strong>：</p><ul><li><code>Aspect</code>（切面）： Aspect 声明类似于 Java 中的类声明，在 Aspect 中会包含着一些 Pointcut 以及相应的 Advice。</li><li><code>Joint point</code>（连接点）：表示在程序中明确定义的点，典型的包括方法调用，对类成员的访问以及异常处理程序块的执行等等，它自身还可以嵌套其它 joint point。</li><li><code>Pointcut</code>（切点）：表示一组 joint point，这些 joint point 或是通过逻辑关系组合起来，或是通过通配、正则表达式等方式集中起来，它定义了相应的 Advice 将要发生的地方。</li><li><code>Advice</code>（增强）：Advice 定义了在 <code>Pointcut</code> 里面定义的程序点具体要做的操作，它通过 before、after 和 around 来区别是在每个 joint point 之前、之后还是代替执行的代码。</li><li><code>Target</code>（目标对象）：织入 <code>Advice</code> 的目标对象.。</li><li><code>Weaving</code>（织入）：将 <code>Aspect</code> 和其他对象连接起来, 并创建 <code>Advice</code>d object 的过程</li></ul><p><strong>然后举一个容易理解的例子</strong>：<br>下面我以一个简单的例子来比喻一下 AOP 中 <code>Aspect</code>, <code>Joint point</code>, <code>Pointcut</code> 与 <code>Advice</code>之间的关系.</p><p>让我们来假设一下, 从前有一个叫爪哇的小县城, 在一个月黑风高的晚上, 这个县城中发生了命案. 作案的凶手十分狡猾, 现场没有留下什么有价值的线索. 不过万幸的是, 刚从隔壁回来的老王恰好在这时候无意中发现了凶手行凶的过程, 但是由于天色已晚, 加上凶手蒙着面, 老王并没有看清凶手的面目, 只知道凶手是个男性, 身高约七尺五寸. 爪哇县的县令根据老王的描述, 对守门的士兵下命令说: 凡是发现有身高七尺五寸的男性, 都要抓过来审问. 士兵当然不敢违背县令的命令, 只好把进出城的所有符合条件的人都抓了起来.</p><p>来让我们看一下上面的一个小故事和 AOP 到底有什么对应关系.<br>首先我们知道, 在 Spring AOP 中 <code>Joint point</code> 指代的是所有方法的执行点, 而 point cut 是一个描述信息, 它修饰的是 <code>Joint point</code>, 通过 point cut, 我们就可以确定哪些 <code>Joint point</code> 可以被织入 <code>Advice</code>. 对应到我们在上面举的例子, 我们可以做一个简单的类比, <strong><code>Joint point</code> 就相当于 爪哇的小县城里的百姓</strong>,<strong><code>pointcut</code> 就相当于 老王所做的指控, 即凶手是个男性, 身高约七尺五寸</strong>, <strong>而 <code>Advice</code> 则是施加在符合老王所描述的嫌疑人的动作: 抓过来审问</strong>.<br>为什么可以这样类比呢?</p><ul><li><code>Joint point</code> ： 爪哇的小县城里的百姓: 因为根据定义, <code>Joint point</code> 是所有可能被织入 <code>Advice</code> 的候选的点, 在 Spring AOP中, 则可以认为所有方法执行点都是 <code>Joint point</code>. 而在我们上面的例子中, 命案发生在小县城中, 按理说在此县城中的所有人都有可能是嫌疑人.</li><li><code>Pointcut</code> ：男性, 身高约七尺五寸: 我们知道, 所有的方法(joint point) 都可以织入 <code>Advice</code>, 但是我们并不希望在所有方法上都织入 <code>Advice</code>, 而 <code>Pointcut</code> 的作用就是提供一组规则来匹配joinpoint, 给满足规则的 joinpoint 添加 <code>Advice</code>. 同理, 对于县令来说, 他再昏庸, 也知道不能把县城中的所有百姓都抓起来审问, 而是根据凶手是个男性, 身高约七尺五寸, 把符合条件的人抓起来. 在这里 凶手是个男性, 身高约七尺五寸 就是一个修饰谓语, 它限定了凶手的范围, 满足此修饰规则的百姓都是嫌疑人, 都需要抓起来审问.</li><li><code>Advice</code> ：抓过来审问, <code>Advice</code> 是一个动作, 即一段 Java 代码, 这段 Java 代码是作用于 point cut 所限定的那些 <code>Joint point</code> 上的. 同理, 对比到我们的例子中, 抓过来审问 这个动作就是对作用于那些满足 男性, 身高约七尺五寸 的爪哇的小县城里的百姓.</li><li><code>Aspect</code>:：<code>Aspect</code> 是 point cut 与 <code>Advice</code> 的组合, 因此在这里我们就可以类比: “根据老王的线索, 凡是发现有身高七尺五寸的男性, 都要抓过来审问” 这一整个动作可以被认为是一个 <code>Aspect</code>.</li></ul><h3 id="静态代理"><a class="markdownIt-Anchor" href="#静态代理"></a> 静态代理</h3><p>AspectJ是静态代理，也称为编译时增强，AOP框架会在编译阶段生成AOP代理类，并将AspectJ(切面)织入到Java字节码中，运行的时候就是增强之后的AOP对象。</p><h3 id="动态代理"><a class="markdownIt-Anchor" href="#动态代理"></a> 动态代理</h3><p>Spring AOP使用的动态代理，所谓的动态代理就是说AOP框架不会去修改字节码，而是每次运行时在内存中临时为方法生成一个AOP对象，这个AOP对象包含了目标对象的全部方法，并且在特定的切点做了增强处理，并回调原对象的方法。Spring AOP中的动态代理主要有两种方式，JDK动态代理和CGLIB动态代理：</p><ul><li><p><strong>JDK动态代理</strong>：只提供接口的代理，不支持类的代理，要求被代理类实现接口。JDK动态代理的核心是InvocationHandler接口和Proxy类，在获取代理对象时，使用Proxy类来动态创建目标类的代理类（即最终真正的代理类，这个类继承自Proxy并实现了我们定义的接口），当代理对象调用真实对象的方法时， InvocationHandler 通过invoke()方法反射来调用目标类中的代码，动态地将横切逻辑和业务编织在一起。</p><p><strong>InvocationHandler的invoke(Object proxy,Method method,Object[] args)</strong>：</p><ul><li><strong>proxy</strong>：是最终生成的代理对象</li><li><strong>method</strong>：是被代理目标实例的某个具体方法;</li><li><strong>args</strong>：是被代理目标实例某个方法的具体入参, 在方法反射调用时使用</li></ul></li><li><p><strong>CGLIB动态代理</strong>：如果被代理类没有实现接口，那么Spring AOP会选择使用CGLIB来动态代理目标类。CGLIB（Code Generation Library），是一个代码生成的类库，可以在运行时动态的生成指定类的一个子类对象，并覆盖其中特定方法并添加增强代码，从而实现AOP。CGLIB是通过继承的方式做的动态代理，因此如果某个类被标记为final，那么它是无法使用CGLIB做动态代理的。</p></li></ul><p><strong>静态代理与动态代理区别？</strong></p><p>生成AOP代理对象的时机不同，相对来说AspectJ的静态代理方式具有更好的性能，但是AspectJ需要特定的编译器进行处理，而Spring AOP则无需特定的编译器处理。</p><p>IoC让相互协作的组件保持松散的耦合，而AOP编程允许你把遍布于应用各层的功能分离出来形成可重用的功能组件。</p><h3 id="应用场景"><a class="markdownIt-Anchor" href="#应用场景"></a> 应用场景</h3><p>AOP 主要应用场景有：</p><ul><li>Authentication 权限</li><li>Caching 缓存</li><li>Context passing 内容传递</li><li>Error handling 错误处理</li><li>Lazy loading 懒加载</li><li>Debugging 调试</li><li>logging, tracing, profiling and monitoring 记录跟踪 优化 校准</li><li>Performance optimization 性能优化</li><li>Persistence 持久化</li><li>Resource pooling 资源池</li><li>Synchronization 同步</li><li>Transactions 事务</li></ul><h1 id="3spring事务"><a class="markdownIt-Anchor" href="#3spring事务"></a> 3.Spring事务</h1><h2 id="概念"><a class="markdownIt-Anchor" href="#概念"></a> 概念</h2><p>事务在逻辑上是一组操作，要么执行，要不都不执行。主要是针对数据库而言的，比如说 MySQL。</p><p>事务的四个属性ACID</p><ul><li>**原子性(Automicity)：**事务中的诸多操作，要么都做，要么都不做</li><li><strong>一致性(Consistency):</strong> 事务必须使数据库从一个一致性状态到另一个一致性状态</li><li>**隔离性(lsolation)😗*一个事务的执行不能被其他事务干扰，一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰</li><li>**持久性(Durability)😗*一个事务一旦提交，数据库中数据的改变应该是永久性的</li></ul><h2 id="实现方式"><a class="markdownIt-Anchor" href="#实现方式"></a> 实现方式</h2><p>Spring 支持两种事务方式，分别是编程式事务和声明式事务，后者最常见，通常情况下只需要一个 **@Transactional **就搞定了（代码侵入性降到了最低）。而编程式事务管理，需要在代码中调用 commit()、rollback()等事务管理相关的方法来完成事务的实现。</p><h2 id="spring事务的传播机制"><a class="markdownIt-Anchor" href="#spring事务的传播机制"></a> Spring事务的传播机制</h2><p>事务的传播，是指一个方法调用另一个方法并将事务传递给它。事务的转播机制主要针对被调用者而言，控制它是否被传播或者被怎样传播。spring事务的传播机制有七种:</p><table><thead><tr><th>传播行为</th><th>描述</th></tr></thead><tbody><tr><td>PROPAGATION_REQUIRED</td><td>默认的Spring事物传播级别，若当前存在事务，则加入该事务，若不存在事务，则新建一个事务</td></tr><tr><td>PROPAGATION_REQUIRE_NEW</td><td>若当前没有事务，则新建一个事务。若当前存在事务，则新建 一个事务，新老事务相互独立。外部事务抛出异常回滚不会影响内部事务的正常提交</td></tr><tr><td>PROPAGATION_NESTED</td><td>如果当前存在事务，则嵌套在当前事务中执行。如果当前没有事务， 则新建一个事务，类似于REQUIRE_NEW</td></tr><tr><td>PROPAGATION_SUPPORTS</td><td>支持当前事务，若当前不存在事务，以非事务的方式执行</td></tr><tr><td>PROPAGATION_NOT_SUPPORTED</td><td>以非事务的方式执行，若当前存在事务，则把当前事务挂起</td></tr><tr><td>PROPAGATION_MANDATORY</td><td>强制事务执行，若当前不存在事务，则抛出异常</td></tr><tr><td>PROPAGATION_NEVER</td><td>以非事务的方式执行，如果当前存在事务，则抛出异常</td></tr></tbody></table><p>传播级别一般不需要定义，默认就是PROPAGATION_REQUIRED，除非在嵌套事务的情况。上述描述表格的描述还是比较抽象，下面我们使用一个例子来说明这个传播机制。假定方法A调用方法B：</p><table><thead><tr><th>方法B定义的事务类型</th><th>A方法有事务时</th><th>A方法无事务</th></tr></thead><tbody><tr><td>@Transactional(propagation = Propagation.REQUIRED)</td><td>B和A事务合并成一个事务</td><td>B新建一个事务</td></tr><tr><td>@Transactional(propagation = Propagation.REQUIRES_NEW)</td><td>B新建一个事务，和A事务无关，互不影响</td><td>B新建一个事务</td></tr><tr><td>@Transactional(propagation = Propagation.NESTED)</td><td>B新建一个A的子事务，A异常影响B，B异常不影响A</td><td>B新建一个事务</td></tr><tr><td>@Transactional(propagation = Propagation.SUPPORTS)</td><td>B加入到A事务中</td><td>B无事务</td></tr><tr><td>@Transactional(propagation = Propagation.NOT_SUPPORTED)</td><td>挂起A事务，B以无事务方式执行</td><td>B无事务</td></tr><tr><td>@Transactional(propagation = Propagation.MANDATORY)</td><td>B加入到A事务中</td><td>B抛异常</td></tr><tr><td>@Transactional(propagation = Propagation.NEVER)</td><td>B抛异常</td><td>B无事务</td></tr></tbody></table><h1 id="4springboot的启动步骤"><a class="markdownIt-Anchor" href="#4springboot的启动步骤"></a> 4.SpringBoot的启动步骤</h1><p>springboot的启动经过了一些一系列的处理，我们先看看整体过程的流程图<br><img src="https://img-blog.csdnimg.cn/f48383125dc04a35bfd05a9d01b950cb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBARmx55Li2WA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>你别说，步骤还挺多，但是不要紧，为了帮助大家理解，接下来将上面的编号一个个地讲解，以通俗易懂的方式告诉大家，里面都做了什么事情，废话不多说，开整</p><h2 id="41-运行-springapplicationrun-方法"><a class="markdownIt-Anchor" href="#41-运行-springapplicationrun-方法"></a> 4.1、运行 SpringApplication.run() 方法</h2><p>可以肯定的是，所有的标准的springboot的应用程序都是从run方法开始的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.spring;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.ConfigurableListableBeanFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span>  &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 启动springboot</span></span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">run</span> <span class="operator">=</span> SpringApplication.run(App.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="number">123456789101112131415</span></span><br></pre></td></tr></table></figure><p>进入run方法后，会 new 一个SpringApplication 对象，创建这个对象的构造函数做了一些准备工作，编号第2~5步就是构造函数里面所做的事情</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Static helper that can be used to run a &#123;<span class="doctag">@link</span> SpringApplication&#125; from the</span></span><br><span class="line"><span class="comment"> * specified sources using default settings and user supplied arguments.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> primarySources the primary sources to load</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args the application arguments (usually passed from a Java main method)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the running &#123;<span class="doctag">@link</span> ApplicationContext&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ConfigurableApplicationContext <span class="title function_">run</span><span class="params">(Class&lt;?&gt;[] primarySources,</span></span><br><span class="line"><span class="params">String[] args)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SpringApplication</span>(primarySources).run(args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">1234567891011</span></span><br></pre></td></tr></table></figure><p>另外在说明一下，springboot启动有三种方式，其他的启动方式可参照我的另一个帖子： <a href="https://blog.csdn.net/qq_27184497/article/details/117534334?spm=1001.2014.3001.5501">SpringBoot的三种启动方式</a></p><h2 id="42-确定应用程序类型"><a class="markdownIt-Anchor" href="#42-确定应用程序类型"></a> 4.2、确定应用程序类型</h2><p>在SpringApplication的构造方法内，首先会通过 WebApplicationType.deduceFromClasspath()； 方法判断当前应用程序的容器，默认使用的是Servlet 容器，除了servlet之外，还有NONE 和 REACTIVE （响应式编程）；<br><img src="https://img-blog.csdnimg.cn/0000a60bbd4045bdbf803e2c37f914de.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBARmx55Li2WA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="43-加载所有的初始化器"><a class="markdownIt-Anchor" href="#43-加载所有的初始化器"></a> 4.3、加载所有的初始化器</h2><p>这里加载的初始化器是springboot自带初始化器，从从 META-INF/spring.factories 配置文件中加载的，那么这个文件在哪呢？自带有2个，分别在源码的jar包的 spring-boot-autoconfigure 项目 和 spring-boot 项目里面各有一个<br><img src="https://img-blog.csdnimg.cn/7f5c03e48f874a67bdcb0ca4c23625b5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBARmx55Li2WA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>spring.factories文件里面，看到开头是 org.springframework.context.ApplicationContextInitializer 接口就是初始化器了 ，<br><img src="https://img-blog.csdnimg.cn/44152f6d1d0249078487b62f0888f86f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBARmx55Li2WA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>当然，我们也可以自己实现一个自定义的初始化器：实现 ApplicationContextInitializer接口既可</p><p>MyApplicationContextInitializer.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.spring.application;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextInitializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义的初始化器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyApplicationContextInitializer</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContextInitializer</span>&lt;ConfigurableApplicationContext&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">(ConfigurableApplicationContext configurableApplicationContext)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是初始化的 MyApplicationContextInitializer...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">12345678910111213</span></span><br></pre></td></tr></table></figure><p>在resources目录下添加 META-INF/spring.factories 配置文件，内容如下，将自定义的初始化器注册进去；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.context.ApplicationContextInitializer=\</span><br><span class="line">com.spring.application.MyApplicationContextInitializer</span><br><span class="line">12</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/a605b6f8ed354da299e665af8e082051.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBARmx55Li2WA==,size_19,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>启动springboot后，就可以看到控制台打印的内容了，在这里我们可以很直观的看到它的执行顺序，是在打印banner的后面执行的；<br><img src="https://img-blog.csdnimg.cn/e761a2185b144f49a48907c25efdc2b7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBARmx55Li2WA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="44-加载所有的监听器"><a class="markdownIt-Anchor" href="#44-加载所有的监听器"></a> 4.4、加载所有的监听器</h2><p>加载监听器也是从 META-INF/spring.factories 配置文件中加载的，与初始化不同的是，监听器加载的是实现了 ApplicationListener 接口的类<br><img src="https://img-blog.csdnimg.cn/338e3f23f6844695a0dbef316489a792.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBARmx55Li2WA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>自定义监听器也跟初始化器一样，依葫芦画瓢就可以了，这里不在举例；</p><h2 id="45-设置程序运行的主类"><a class="markdownIt-Anchor" href="#45-设置程序运行的主类"></a> 4.5、设置程序运行的主类</h2><p>deduceMainApplicationClass(); 这个方法仅仅是找到main方法所在的类，为后面的扫包作准备，deduce是推断的意思，所以准确地说，这个方法作用是推断出主方法所在的类；<br><img src="https://img-blog.csdnimg.cn/ed36534332354847a2617a6cce2ea902.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBARmx55Li2WA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="46-开启计时器"><a class="markdownIt-Anchor" href="#46-开启计时器"></a> 4.6、开启计时器</h2><p>程序运行到这里，就已经进入了run方法的主体了，第一步调用的run方法是静态方法，那个时候还没实例化SpringApplication对象，现在调用的run方法是非静态的，是需要实例化后才可以调用的，进来后首先会开启计时器，这个计时器有什么作用呢？顾名思义就使用来计时的嘛，计算springboot启动花了多长时间；关键代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实例化计时器</span></span><br><span class="line"><span class="type">StopWatch</span> <span class="variable">stopWatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StopWatch</span>(); </span><br><span class="line"><span class="comment">// 开始计时</span></span><br><span class="line">stopWatch.start();</span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure><p>run方法代码段截图<br><img src="https://img-blog.csdnimg.cn/c5ccc29e064b4b3c8067883894a79ef3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBARmx55Li2WA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="47-将javaawtheadless设置为true"><a class="markdownIt-Anchor" href="#47-将javaawtheadless设置为true"></a> 4.7、将java.awt.headless设置为true</h2><p>这里将java.awt.headless设置为true，表示运行在服务器端，在没有显示器器和鼠标键盘的模式下照样可以工作，模拟输入输出设备功能。</p><p>做了这样的操作后,SpringBoot想干什么呢?其实是想设置该应用程序,即使没有检测到显示器,也允许其启动.对于服务器来说,是不需要显示器的,所以要这样设置.</p><p>方法主体如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">configureHeadlessProperty</span><span class="params">()</span> &#123;</span><br><span class="line">System.setProperty(SYSTEM_PROPERTY_JAVA_AWT_HEADLESS, System.getProperty(</span><br><span class="line">SYSTEM_PROPERTY_JAVA_AWT_HEADLESS, Boolean.toString(<span class="built_in">this</span>.headless)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure><p>通过方法可以看到，setProperty()方法里面又有个getProperty()；这不多此一举吗？其实getProperty()方法里面有2个参数， 第一个key值，第二个是默认值，意思是通过key值查找属性值，如果属性值为空，则返回默认值 true；保证了一定有值的情况；</p><h2 id="48-获取并启用监听器"><a class="markdownIt-Anchor" href="#48-获取并启用监听器"></a> 4.8、获取并启用监听器</h2><p>这一步 通过监听器来实现初始化的的基本操作，这一步做了2件事情</p><ol><li>创建所有 Spring 运行监听器并发布应用启动事件</li><li>启用监听器<br><img src="https://img-blog.csdnimg.cn/1fd7683ae8a148d2ab1ffec80fabf4c7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBARmx55Li2WA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></li></ol><h2 id="49-设置应用程序参数"><a class="markdownIt-Anchor" href="#49-设置应用程序参数"></a> 4.9、设置应用程序参数</h2><p>将执行run方法时传入的参数封装成一个对象<br><img src="https://img-blog.csdnimg.cn/5b56165551664a2ab08b25b85fd14c9f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBARmx55Li2WA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>仅仅是将参数封装成对象，没啥好说的，对象的构造函数如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">DefaultApplicationArguments</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">Assert.notNull(args, <span class="string">&quot;Args must not be null&quot;</span>);</span><br><span class="line"><span class="built_in">this</span>.source = <span class="keyword">new</span> <span class="title class_">Source</span>(args);</span><br><span class="line"><span class="built_in">this</span>.args = args;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">12345</span></span><br></pre></td></tr></table></figure><p>那么问题来了，这个参数是从哪来的呢？其实就是main方法里面执行静态run方法传入的参数，<br><img src="https://img-blog.csdnimg.cn/5c2f3a39ad2a479aa503f4537126d03e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBARmx55Li2WA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="410-准备环境变量"><a class="markdownIt-Anchor" href="#410-准备环境变量"></a> 4.10、准备环境变量</h2><p>准备环境变量，包含系统属性和用户配置的属性，执行的代码块在 prepareEnvironment 方法内<img src="https://img-blog.csdnimg.cn/e3b024d70928495898e01c9e21f6120e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBARmx55Li2WA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>打了断点之后可以看到，它将maven和系统的环境变量都加载进来了<br><img src="https://img-blog.csdnimg.cn/31fd799a10864f4aa3bbb52f6a94c508.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBARmx55Li2WA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="411-忽略bean信息"><a class="markdownIt-Anchor" href="#411-忽略bean信息"></a> 4.11、忽略bean信息</h2><p>这个方法configureIgnoreBeanInfo() 这个方法是将 spring.beaninfo.ignore 的默认值值设为true，意思是跳过beanInfo的搜索，其设置默认值的原理和第7步一样；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">configureIgnoreBeanInfo</span><span class="params">(ConfigurableEnvironment environment)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (System.getProperty(</span><br><span class="line">CachedIntrospectionResults.IGNORE_BEANINFO_PROPERTY_NAME) == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="type">Boolean</span> <span class="variable">ignore</span> <span class="operator">=</span> environment.getProperty(<span class="string">&quot;spring.beaninfo.ignore&quot;</span>,</span><br><span class="line">Boolean.class, Boolean.TRUE);</span><br><span class="line">System.setProperty(CachedIntrospectionResults.IGNORE_BEANINFO_PROPERTY_NAME,</span><br><span class="line">ignore.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">123456789</span></span><br></pre></td></tr></table></figure><p>当然也可以在配置文件中添加以下配置来设为false</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.beaninfo.ignore=<span class="literal">false</span></span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>目前还不知道这个配置的具体作用，待作者查明后在补上</p><h2 id="412-打印-banner-信息"><a class="markdownIt-Anchor" href="#412-打印-banner-信息"></a> 4.12、打印 banner 信息</h2><p>显而易见，这个流程就是用来打印控制台那个很大的spring的banner的，就是下面这个东东<br><img src="https://img-blog.csdnimg.cn/11c0be5df65c46d9a7b68f244a8b6ff4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBARmx55Li2WA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>那他在哪里打印的呢？他在 SpringBootBanner.java 里面打印的，这个类实现了Banner 接口，</p><p>而且banner信息是直接在代码里面写死的；<br><img src="https://img-blog.csdnimg.cn/5f502c2a13944df2bb9dc8568c7bf1f6.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBARmx55Li2WA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>有些公司喜欢自定义banner信息，如果想要改成自己喜欢的图标该怎么办呢，其实很简单,只需要在resources目录下添加一个 banner.txt 的文件即可，txt文件内容如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">                 _           <span class="title function_">_</span></span><br><span class="line">                <span class="params">(_)</span>         | |</span><br><span class="line"> _   _  _____  ___ _ __   __| | ___  _ __   __ _</span><br><span class="line">| | | |/ _ \ \/ / | <span class="string">&#x27;_ \ / _` |/ _ \| &#x27;</span>_ \ / _` |</span><br><span class="line">| |_| |  __/&gt;  &lt;| | | | | (_| | (_) | | | | (_| |</span><br><span class="line"> \__, |\___/_/\_\_|_| |_|\__,_|\___/|_| |_|\__, |</span><br><span class="line">  __/ |                                     __/ |</span><br><span class="line"> |___/                                     |___/</span><br><span class="line">:: yexindong::</span><br><span class="line"><span class="number">123456789</span></span><br></pre></td></tr></table></figure><p>一定要添加到resources目录下，别加错了<br><img src="https://img-blog.csdnimg.cn/31e1481aa5d3489a83420b40fb116d7a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBARmx55Li2WA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>只需要加一个文件即可，其他什么都不用做，然后直接启动springboot，就可以看到效果了<br><img src="https://img-blog.csdnimg.cn/87378bcc85944dc189d51acfc1bc3b93.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBARmx55Li2WA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="413-创建应用程序的上下文"><a class="markdownIt-Anchor" href="#413-创建应用程序的上下文"></a> 4.13、创建应用程序的上下文</h2><p>实例化应用程序的上下文， 调用 createApplicationContext() 方法，这里就是用反射创建对象，没什么好说的；<br><img src="https://img-blog.csdnimg.cn/cfdfa55d6b0a4f96a3de191088cc9d23.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBARmx55Li2WA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="414-实例化异常报告器"><a class="markdownIt-Anchor" href="#414-实例化异常报告器"></a> 4.14、实例化异常报告器</h2><p>异常报告器是用来捕捉全局异常使用的，当springboot应用程序在发生异常时，异常报告器会将其捕捉并做相应处理，在spring.factories 文件里配置了默认的异常报告器，</p><p><img src="https://img-blog.csdnimg.cn/955ab3a57918432e990a0c80967e38d1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBARmx55Li2WA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>需要注意的是，这个异常报告器只会捕获启动过程抛出的异常，如果是在启动完成后，在用户请求时报错，异常报告器不会捕获请求中出现的异常，<br><img src="https://img-blog.csdnimg.cn/eaba60b98fd9495c9d2d961b55d2f6a6.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBARmx55Li2WA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>了解原理了，接下来我们自己配置一个异常报告器来玩玩；</p><p>MyExceptionReporter.java 继承 SpringBootExceptionReporter 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.spring.application;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringBootExceptionReporter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyExceptionReporter</span> <span class="keyword">implements</span> <span class="title class_">SpringBootExceptionReporter</span> &#123;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> ConfigurableApplicationContext context;</span><br><span class="line">    <span class="comment">// 必须要有一个有参的构造函数，否则启动会报错</span></span><br><span class="line">    MyExceptionReporter(ConfigurableApplicationContext context) &#123;</span><br><span class="line">        <span class="built_in">this</span>.context = context;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">reportException</span><span class="params">(Throwable failure)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;进入异常报告器&quot;</span>);</span><br><span class="line">        failure.printStackTrace();</span><br><span class="line">        <span class="comment">// 返回false会打印详细springboot错误信息，返回true则只打印异常信息 </span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">12345678910111213141516171819202122</span></span><br></pre></td></tr></table></figure><p>在 spring.factories 文件中注册异常报告器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Error Reporters 异常报告器</span></span><br><span class="line">org.springframework.boot.SpringBootExceptionReporter=\</span><br><span class="line">com.spring.application.MyExceptionReporter</span><br><span class="line">123</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/6dbacc6030ac4cfb90cfa7e369d19d16.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBARmx55Li2WA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>接着我们在application.yml 中 把端口号设置为一个很大的值，这样肯定会报错，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 80828888</span><br><span class="line">12</span><br></pre></td></tr></table></figure><p>启动后，控制台打印如下图<br><img src="https://img-blog.csdnimg.cn/f2692c1d9aa44d1d83118324259f877e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBARmx55Li2WA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="415-准备上下文环境"><a class="markdownIt-Anchor" href="#415-准备上下文环境"></a> 4.15、准备上下文环境</h2><p>这里准备的上下文环境是为了下一步刷新做准备的，里面还做了一些额外的事情；<br><img src="https://img-blog.csdnimg.cn/90b4e5a408f04288a60760d9eb19e6b7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBARmx55Li2WA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="4151-实例化单例的beanname生成器"><a class="markdownIt-Anchor" href="#4151-实例化单例的beanname生成器"></a> 4.15.1、实例化单例的beanName生成器</h3><p>在 postProcessApplicationContext(context); 方法里面。使用单例模式创建 了BeanNameGenerator 对象，其实就是beanName生成器，用来生成bean对象的名称</p><h3 id="4152-执行初始化方法"><a class="markdownIt-Anchor" href="#4152-执行初始化方法"></a> 4.15.2、执行初始化方法</h3><p>初始化方法有哪些呢？还记得第3步里面加载的初始化器嘛？其实是执行第3步加载出来的所有初始化器，实现了ApplicationContextInitializer 接口的类</p><h3 id="4153-将启动参数注册到容器中"><a class="markdownIt-Anchor" href="#4153-将启动参数注册到容器中"></a> 4.15.3、将启动参数注册到容器中</h3><p>这里将启动参数以单例的模式注册到容器中，是为了以后方便拿来使用，参数的beanName 为 ：springApplicationArguments</p><h2 id="416-刷新上下文"><a class="markdownIt-Anchor" href="#416-刷新上下文"></a> 4.16、刷新上下文</h2><p>刷新上下文已经是spring的范畴了，自动装配和启动 tomcat就是在这个方法里面完成的，还有其他的spring自带的机制在这里就不一一细说了，<br><img src="https://img-blog.csdnimg.cn/101c7adbfc514ae4b91dc4e0454f4cfe.png" alt="在这里插入图片描述"></p><h2 id="417-刷新上下文后置处理"><a class="markdownIt-Anchor" href="#417-刷新上下文后置处理"></a> 4.17、刷新上下文后置处理</h2><p>afterRefresh 方法是启动后的一些处理，留给用户扩展使用，目前这个方法里面是空的，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Called after the context has been refreshed.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> context the application context</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args the application arguments</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">afterRefresh</span><span class="params">(ConfigurableApplicationContext context,</span></span><br><span class="line"><span class="params">ApplicationArguments args)</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">12345678</span></span><br></pre></td></tr></table></figure><h2 id="418-结束计时器"><a class="markdownIt-Anchor" href="#418-结束计时器"></a> 4.18、结束计时器</h2><p>到这一步，springboot其实就已经完成了，计时器会打印启动springboot的时长<br><img src="https://img-blog.csdnimg.cn/f56f7bdfad0d4b379eebb1c576f8c0db.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBARmx55Li2WA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>在控制台看到启动还是挺快的，不到2秒就启动完成了；<br><img src="https://img-blog.csdnimg.cn/0a55f69c6b2c49999c678cc1de54bbaf.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBARmx55Li2WA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="419-发布上下文准备就绪事件"><a class="markdownIt-Anchor" href="#419-发布上下文准备就绪事件"></a> 4.19、发布上下文准备就绪事件</h2><p>告诉应用程序，我已经准备好了，可以开始工作了<br><img src="https://img-blog.csdnimg.cn/d823d184b4c947b4b1745324f1798b27.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBARmx55Li2WA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="420-执行自定义的run方法"><a class="markdownIt-Anchor" href="#420-执行自定义的run方法"></a> 4.20、执行自定义的run方法</h2><p>这是一个扩展功能，callRunners(context, applicationArguments) 可以在启动完成后执行自定义的run方法；有2中方式可以实现：</p><ol><li>实现 ApplicationRunner 接口</li><li>实现 CommandLineRunner 接口</li></ol><p>接下来我们验证一把，为了方便代码可读性，我把这2种方式都放在同一个类里面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.spring.init;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.ApplicationArguments;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.ApplicationRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.CommandLineRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义run方法的2种方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRunner</span> <span class="keyword">implements</span> <span class="title class_">ApplicationRunner</span>, CommandLineRunner &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; 我是自定义的run方法1，实现 ApplicationRunner 接口既可运行&quot;</span>        );</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; 我是自定义的run方法2，实现 CommandLineRunner 接口既可运行&quot;</span>        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">1234567891011121314151617181920212223</span></span><br></pre></td></tr></table></figure><p>启动springboot后就可以看到控制台打印的信息了<br><img src="https://img-blog.csdnimg.cn/01fc9e7bc4884943b9d07025f579e868.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBARmx55Li2WA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="完"><a class="markdownIt-Anchor" href="#完"></a> 完</h2><p>其实了解springboot启动原理对开发人员还是有好处的，至少你知道哪些东西是可以扩展的，以及怎么扩展，它的内部原理是怎么做的，我相信了解这些思路之后，让你自己写一个springboot出来也是可以的； 但是这里只是列出了启动过程，并不涉及到全部，源码是很负杂，记得一个大牛说过：“我们看源码的时候，只能通过联想或猜测作者是怎么想的，并且小心验证，就像我们小时候学古诗一样，也只能去猜测古人的想法，拿道德经来说，每个人读完后都有不同的看法，这就需要见仁见智了”；</p><h1 id="5spring中自定义配置文件的读取"><a class="markdownIt-Anchor" href="#5spring中自定义配置文件的读取"></a> 5.Spring中自定义配置文件的读取</h1><p>我们怎么来将配置文件里面对应的属性注入到类中了，方法有二</p><h2 id="过时方法"><a class="markdownIt-Anchor" href="#过时方法"></a> 过时方法</h2><p>1.1 在ConfigProperties类上加上如下注解：</p><ul><li><strong>@ConfigurationProperties(locations=“classpath:config/user.properties”, prefix=“com.chhliu.springboot”)</strong></li></ul><p>其中locations属性用来指定配置文件的位置，prefix用来指定properties配置文件中的key前缀</p><p>1.2 在主类上加入配置支持</p><ul><li><strong>@EnableConfigurationProperties(ConfigProperties.class)</strong></li></ul><p>这样就可以将properties配置文件中的值注入到类中对应的属性上去了，但是上面的这种方式已经被标注为过时了，在新的版本中是不可用的。</p><h2 id="替代方法"><a class="markdownIt-Anchor" href="#替代方法"></a> 替代方法</h2><p>1.1 在ConfigProperties类上加上如下注解：</p><ul><li><strong>@Component</strong>// 以组件的方式使用，使用的时候可以直接注入<br><strong>@ConfigurationProperties(prefix=“com.chhliu.springboot”)</strong>// 用来指定properties配置文件中的key前缀<br><strong>@PropertySource(“classpath:config/user.properties”)</strong>// 用来指定配置文件的位置</li></ul><p>1.2 关闭配置属性的支持<br>这一步就是将主类上的**@EnableConfigurationProperties<strong>这个注解</strong>注释掉**，不让springboot自动配置，使用我们的手动配置</p><h1 id="6beanfactory和factorybean的区别"><a class="markdownIt-Anchor" href="#6beanfactory和factorybean的区别"></a> 6.BeanFactory和FactoryBean的区别</h1><p><strong>区别</strong>：BeanFactory是个Factory，也就是IOC容器或对象工厂，FactoryBean是个Bean。在Spring中，所有的Bean都是由BeanFactory(也就是IOC容器)来进行管理的。但对FactoryBean而言，这个Bean不是简单的Bean，而是一个能生产或者修饰对象生成的工厂Bean,它的实现与设计模式中的工厂模式和修饰器模式类似。</p><p>BeanFactory和FactoryBean都可以用来创建对象，只不过创建的流程和方式不同</p><p>当使用<strong>BeanFactory</strong>的时候，必须要严格的遵守bean的生命周期，经过一系列繁杂的步骤之后可以创建出单例对象，是流水线式的创建过程，而<strong>FactoryBean</strong>是用户可以自定义bean对象的创建流程，不需要按照bean的生命周期来创建，在此接口中包含了三个方法：</p><ul><li><p><strong>isSingleton</strong>:判断是否是单例对象</p></li><li><p><strong>getObjectType</strong>:获取对象的类型</p></li><li><p><strong>getObject</strong>:在此方法中可以自己创建对象，使用new的方式或者使用代理的方式都可以，用户可以按照自己的需要随意去创建对象，在很多框架继承的时候都会实现FactoryBean接口，比如Feign</p></li></ul><h2 id="beanfactory"><a class="markdownIt-Anchor" href="#beanfactory"></a> BeanFactory</h2><p>​        BeanFactory定义了IOC容器的最基本形式，并提供了IOC容器应遵守的的最基本的接口，也就是Spring IOC所遵守的最底层和最基本的编程规范。在Spring代码中，BeanFactory只是个接口，并不是IOC容器的具体实现，但是Spring容器给出了很多种实现，如 DefaultListableBeanFactory、XmlBeanFactory、ApplicationContext等，都是附加了某种功能的实现。</p><p><strong>使用场景：</strong></p><ul><li>从Ioc容器中获取Bean(byName or byType)</li><li>检索Ioc容器中是否包含指定的Bean</li><li>判断Bean是否为单例</li></ul><h2 id="factorybean"><a class="markdownIt-Anchor" href="#factorybean"></a> FactoryBean</h2><pre><code>    一般情况下，Spring通过反射机制利用&lt;bean&gt;的class属性指定实现类实例化Bean，在某些情况下，实例化Bean过程比较复杂，如果按照传统的方式，则需要在&lt;bean&gt;中提供大量的配置信息。配置方式的灵活性是受限的，这时采用编码的方式可能会得到一个简单的方案。Spring为此提供了一个org.springframework.bean.factory.FactoryBean的工厂类接口，用户可以通过实现该接口定制实例化Bean的逻辑。</code></pre><p><strong>使用场景：</strong><br>FactoryBean在Spring中最为典型的一个应用就是用来创建AOP的代理对象。</p><p>我们知道AOP实际上是Spring在运行时创建了一个代理对象，也就是说这个对象，是我们在运行时创建的，而不是一开始就定义好的，这很符合工厂方法模式。更形象地说，AOP代理对象通过Java的反射机制，在运行时创建了一个代理对象，在代理对象的目标方法中根据业务要求织入了相应的方法。这个对象在Spring中就是——ProxyFactoryBean。</p><p>所以，FactoryBean为我们实例化Bean提供了一个更为灵活的方式，我们可以通过FactoryBean创建出更为复杂的Bean实例。</p><hr><p>spring容器的生命周期</p><p>Spring 容器说一下</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1spring-springmvc-springboot的相关概念&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1spring-springmvc-springboot的相关概念&quot;&gt;&lt;/a&gt; 1.Spring、SpringMVC、Sp</summary>
      
    
    
    
    <category term="java" scheme="http://cloud-tour.github.io/categories/java/"/>
    
    
    <category term="java" scheme="http://cloud-tour.github.io/tags/java/"/>
    
    <category term="ssb" scheme="http://cloud-tour.github.io/tags/ssb/"/>
    
  </entry>
  
  <entry>
    <title>jvm</title>
    <link href="http://cloud-tour.github.io/2023/02/17/jvm/"/>
    <id>http://cloud-tour.github.io/2023/02/17/jvm/</id>
    <published>2023-02-17T13:16:37.239Z</published>
    <updated>2023-03-18T10:25:58.314Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一jvm内存模型及其各部分的作用"><a class="markdownIt-Anchor" href="#一jvm内存模型及其各部分的作用"></a> 一.JVM内存模型及其各部分的作用</h1><p><img src="/2023/02/17/jvm/image-20230318181805380.png" alt="image-20230318181805380"></p><p>从宏观上来说JVM <a href="https://mp.weixin.qq.com/s?__biz=MzU0OTk3ODQ3Ng==&amp;mid=2247489951&amp;idx=1&amp;sn=07f8d8c9214a524584c7b06be3c1ad4c&amp;scene=21#wechat_redirect">内存区域</a> 分为三部分<code>线程共享区域</code>、<code>线程私有区域</code>、<code>直接内存区域</code>(上图static变量该在堆区)。</p><h2 id="线程共享区域"><a class="markdownIt-Anchor" href="#线程共享区域"></a> 线程共享区域</h2><h3 id="堆区"><a class="markdownIt-Anchor" href="#堆区"></a> 堆区</h3><p>堆区Heap是JVM中最大的一块内存区域，基本上所有的对象实例都是在堆上分配空间。堆区细分为<strong>年轻代</strong>和<strong>老年代</strong>，其中年轻代又分为Eden、S0、S1 三个部分，他们默认的比例是<code>8:1:1</code>的大小。</p><h3 id="元空间"><a class="markdownIt-Anchor" href="#元空间"></a> 元空间</h3><p><strong>方法区</strong>：</p><blockquote><ol><li>在 《Java虚拟机规范》中只是规定了有<code>方法区</code>这么个<code>概念</code>跟它的<code>作用</code>。<code>HotSpot</code>在JDK8之前 搞了个<code>永久代</code>把这个概念实现了。用来主要存储类信息、常量池、静态变量、JIT编译后的代码等数据。</li><li>PermGen(永久代)中类的元数据信息在每次<strong>FullGC</strong>的时候可能会被收集，但成绩很难令人满意。而且为PermGen分配多大的空间因为存储上述多种数据很难确定大小。因此官方在JDK8剔除移除永久代。</li></ol></blockquote><p><strong>元空间</strong>：</p><blockquote><p>在Java中用<code>永久代</code>来存储类信息，常量，静态变量等数据不是好办法，因为这样很容易造成内存溢出。同时对永久代的性能调优也很困难，因此在JDK8中 把<code>永久代</code>去除了，引入了元空间<strong>metaspace</strong>，原先的class、field等变量放入到metaspace。</p></blockquote><p><strong>总结</strong>：</p><blockquote><p><code>元空间的本质和永久代类似，都是对JVM规范中方法区的实现</code>。不过元空间与永久代之间最大的区别在于：<code>元空间并不在虚拟机中，而是使用本地内存</code>。因此，默认情况下，元空间的大小仅受本地内存限制，但可以通过参数来指定元空间的大小。</p></blockquote><h2 id="直接内存区域"><a class="markdownIt-Anchor" href="#直接内存区域"></a> 直接内存区域</h2><p><strong>直接内存</strong>：</p><blockquote><p>一般使用<strong>Native</strong>函数操作C++代码来实现直接分配堆外内存，不是虚拟机运行时数据区的一部分，也不是Java虚拟机规范中定义的内存区域。这块内存不受Java堆空间大小的限制，但是受本机总内存大小限制所以也会出现OOM异常。分配空间后<strong>避免了在Java堆区跟Native堆中来回复制数据</strong>，可以有效提高读写效率，<strong>但它的创建、销毁却比普通Buffer慢</strong>。</p></blockquote><p><strong>PS</strong>：如果使用了<a href="https://mp.weixin.qq.com/s?__biz=Mzg5MjQ5MzY2Mg==&amp;mid=2247485416&amp;idx=1&amp;sn=fe5ba46a512ce6f845209928f9a885a9&amp;scene=21#wechat_redirect">NIO</a>，本地内存区域会被频繁的使用，此时 jvm内存 ≈ 方法区 ＋ 堆 ＋ 栈＋ 直接内存</p><h2 id="线程私有区域"><a class="markdownIt-Anchor" href="#线程私有区域"></a> 线程私有区域</h2><p>程序计数器、虚拟机栈、本地方法栈跟线程的生命周期是一样的。</p><h3 id="程序计数器"><a class="markdownIt-Anchor" href="#程序计数器"></a> 程序计数器</h3><p>课堂上比如你正在看小说《诛仙》，看到1412章节时，老师喊你回答问题，这个时候你肯定要先应付老师的问题，回答完毕后继续接着看，这个时候你可以用书签也可以凭借记忆记住自己在看的位置，通过这样实现继续阅读。</p><p>落实到代码运行时候同样道理，<strong>程序计数器</strong>用于记录当前线程下虚拟机正在执行的字节码的指令地址。它具有如下特性：</p><p>线程私有</p><blockquote><p>多线程情况下，在同一时刻所以为了让线程切换后依然能恢复到原位，每条线程都需要有各自独立的程序计数器。</p></blockquote><p>没有规定OutOfMemoryError</p><blockquote><p>程序计数器存储的是字节码文件的行号，而这个范围是可知晓的，在一开始分配内存时就可以分配一个绝对不会溢出的内存。</p></blockquote><p>执行Native方法时值为空</p><blockquote><p><strong>Native</strong>方法大多是通过C实现并未编译成需要执行的字节码指令，也就不需要去存储字节码文件的行号了。</p></blockquote><h3 id="虚拟机栈"><a class="markdownIt-Anchor" href="#虚拟机栈"></a> 虚拟机栈</h3><p>方法的出入栈：调用的方法会被打包成<strong>栈桢</strong>，一个栈桢至少需要包含一个局部变量表、操作数栈、桢数据区、动态链接。</p><p><img src="/2023/02/17/jvm/image-20230318181825874.png" alt="image-20230318181825874"></p><p><img src="/2023/02/17/jvm/image-20230318181836276.png" alt="image-20230318181836276"></p><p><strong>动态链接</strong>：</p><blockquote><p>当栈帧内部包含一个指向运行时常量池引用前提下，类加载时候会进行符号引用到直接引用的解析跟链接替换。</p></blockquote><p><strong>局部变量表</strong>：</p><blockquote><p>局部变量表是栈帧重要组中部分之一。他主要保存函数的参数以及局部的变量信息。局部变量表中的变量作用域是当前调用的函数。函数调用结束后，随着函数栈帧的销毁。局部变量表也会随之销毁，释放空间。</p></blockquote><p><strong>操作数栈</strong>：</p><blockquote><p>保存着Java虚拟机执行过程中数据</p></blockquote><p><strong>方法返回地址</strong>：</p><blockquote><p>方法被调用的位置，当方法退出时候实际上等同于当前栈帧出栈。</p></blockquote><h3 id="本地方法栈"><a class="markdownIt-Anchor" href="#本地方法栈"></a> 本地方法栈</h3><p>跟虚拟机栈类似，只是为使用到的Native方法服务而已。</p><h1 id="二new一个对象的过程"><a class="markdownIt-Anchor" href="#二new一个对象的过程"></a> 二.new一个对象的过程</h1><p>一个Java类从编码到最终完成执行，主要包括两个过程，编译、运行。</p><blockquote><p>编译：将我们写好的.java文件通过Javac命令编译成.class文件。</p><p>运行：把编译生成的.class文件交由JVM执行。</p></blockquote><p>Jvm运行class类的时候，并不是一次性将所有的类都加载到内存中，<strong>而是用到哪个就加载哪个，并且只加载一次</strong>。</p><h2 id="类的生命周期"><a class="markdownIt-Anchor" href="#类的生命周期"></a> 类的生命周期</h2><p><img src="/2023/02/17/jvm/image-20230318181845217.png" alt="image-20230318181845217"></p><h3 id="加载"><a class="markdownIt-Anchor" href="#加载"></a> 加载</h3><p>加载指的是把class字节码文件从各个来源通过类加载器装载入内存中，这里有两个重点：</p><blockquote><ol><li><strong>字节码来源</strong>：一般的加载来源包括从本地路径下编译生成的.class文件，从jar包中的.class文件，从远程网络，以及动态代理实时编译</li><li><strong>类加载器</strong>：一般包括启动类加载器，扩展类加载器，应用类加载器，以及用户的自定义类加载器(加密解密那种)。</li></ol></blockquote><ol><li><p>将类的字节码载入方法区，并创建类.class 对象</p></li><li><p>如果此类的父类没有加载，先加载父类</p></li><li><p>加载是懒惰执行</p></li></ol><h3 id="验证"><a class="markdownIt-Anchor" href="#验证"></a> 验证</h3><p>主要是为了保证加载进来的字节流符合虚拟机规范，不会造成安全错误。文件格式验证、元数据验证、字节码验证、符号引用验证。</p><h3 id="准备"><a class="markdownIt-Anchor" href="#准备"></a> 准备</h3><p>给类静态变量分配内存空间，仅仅是分配空间，比如 public static int age = 14，在准备后age = 0，在初始化阶段 age = 14，如果添加了<strong>final</strong>则在这个阶段直接赋值为14。</p><h3 id="解析"><a class="markdownIt-Anchor" href="#解析"></a> 解析</h3><p>将常量池内的<strong>符号引用</strong>替换为<strong>直接引用</strong>。</p><p><img src="/2023/02/17/jvm/image-20230318181854629.png" alt="image-20230318181854629"></p><h3 id="初始化"><a class="markdownIt-Anchor" href="#初始化"></a> 初始化</h3><p>前面在加载类阶段用户应用程序可以通过<strong>自定义类加载器</strong>参与之外 其余动作完全由虚拟机主导和控制。此时才是真正开始执行类中定义的代码 ：静态代码块、static 修饰的变量赋值、static final 修饰的<strong>引用类型</strong>变量赋值，会被合并成一个 <code>&lt;cinit&gt;</code> 方法，在初始化时被调用，如果存在父类，先对父类进行初始化。</p><h3 id="使用"><a class="markdownIt-Anchor" href="#使用"></a> 使用</h3><p>类加载完毕后紧接着就是为对象分配内存空间和初始化了：</p><blockquote><ol><li>为对象分配合适大小的内存空间</li><li>为实例变量赋默认值</li><li>设置对象的头信息，对象hash码、GC分代年龄、元数据信息等</li><li>执行构造函数(init)初始化。</li></ol></blockquote><h3 id="卸载"><a class="markdownIt-Anchor" href="#卸载"></a> 卸载</h3><p>最终没啥说等，就是通过GC算法回收对象了。</p><h1 id="三类的初始化顺序"><a class="markdownIt-Anchor" href="#三类的初始化顺序"></a> 三.类的初始化顺序</h1><p><strong>（静态变量、静态初始化块：决于它们在类中出现的先后顺序）&gt;（变量、初始化块：决于它们在类中出现的先后顺序）&gt;构造器</strong><br><strong>原理：</strong><br>1、加载类信息。在实例化对象之前，类的装载器会找到需要加载的类class文件，进行类的加载（有父类的会先加载父类），一旦加载到最根上的基类，就会对基类的静态变量和静态初始化块进行初始化；<br>2、当所有类信息加载完毕就会执行main（）主方法，然后执行new class（），对类进行实例化，首先对变量和、初始化块以及类的构造函数进行初始化（有父类的首先会对父类进行初始化，多个父类递归的方式）<br>有父类的加载顺序：</p><ul><li>父类–静态变量</li><li>父类–静态初始化块</li><li>子类–静态变量</li><li>子类–静态初始化块</li><li>父类–变量</li><li>父类–初始化块</li><li>父类–构造器</li><li>子类–变量</li><li>子类–初始化块</li><li>子类–构造器</li></ul><h1 id="四类加载器"><a class="markdownIt-Anchor" href="#四类加载器"></a> 四.类加载器</h1><p>在连接阶段一般是无法干预的，大部分干预 <strong>类加载阶段</strong>，<code>对于任意一个类，都需要由加载它的类加载器和这个类本身一同确立其在Java虚拟机中的唯一性</code>，类加载时候重要三个方法：</p><blockquote><p>1、<strong>loadClass()</strong> ：加载目标类的入口，它首先会查找当前 ClassLoader 以及它的双亲里面是否已经加载了目标类，找到直接返回</p><p>2、<strong>findClass()</strong> ：如果没有找到就会让双亲尝试加载，如果双亲都加载不了，就会调用 findClass() 让自定义加载器自己来加载目标类</p><p>3、<strong>defineClass()</strong> ：拿到这个字节码之后再调用 defineClass() 方法将字节码转换成 Class 对象。</p></blockquote><h2 id="双亲委派机制"><a class="markdownIt-Anchor" href="#双亲委派机制"></a> 双亲委派机制</h2><p><img src="/2023/02/17/jvm/image-20230318181904677.png" alt="image-20230318181904677"></p><p><strong>定义</strong>：</p><blockquote><p>当某个类加载器需要加载某个.class文件时，首先把这个任务委托给他的上级类加载器，递归这个操作，如果上级的类加载器没有加载，自己才会去加载这个类。</p></blockquote><p><strong>作用</strong>：</p><blockquote><p>1、<strong>可以防止重复加载同一个.class</strong>。通过委托去向上面问一问，加载过了，就不用再加载一遍。保证数据安全。</p><p>2、<strong>保证核心*.class不能被篡改</strong>，通过委托方式，不会去篡改核心.class。’</p></blockquote><p><strong>类加载器</strong>：</p><blockquote><p>1、BootstrapClassLoader（启动类加载器）：c++编写，加载java核心库 java.*，JAVA_HOME/lib</p><p>2、ExtClassLoader （标准扩展类加载器）：java编写的加载扩展库，JAVA_HOME/lib/ext</p><p>3、AppClassLoader（系统类加载器）：加载程序所在的目录，如user.dir所在的位置的ClassPath</p><p>4、CustomClassLoader（用户自定义类加载器）：用户自定义的类加载器,可加载指定路径的class文件</p></blockquote><h2 id="关于加载机制"><a class="markdownIt-Anchor" href="#关于加载机制"></a> 关于加载机制</h2><p><code>双亲委派机制只是Java类加载的一种常见模式</code>，还有别的加载机制哦，比如<strong>Tomcat</strong> 总是先尝试去加载某个类，如果找不到再用上一级的加载器，跟双亲加载器顺序<strong>正好相反</strong>。再比如当使用第三方框架<strong>JDBC</strong>跟具体实现的时候，反而会引发错误，因为JDK自带的<strong>JDBC</strong>接口由<strong>启动类</strong>加载，而第三方实现接口由<strong>应用类</strong>加载。这样相互之间是不认识的，因此JDK引入了<strong>SPI</strong>机制 线程上下文加载器 来实现加载(跟<strong>Dubbo</strong>的<strong>SPI</strong>不一样哦)。</p><h2 id="补充问题"><a class="markdownIt-Anchor" href="#补充问题"></a> 补充问题</h2><p><strong>同一个类能被不同的类加载器加载吗？</strong></p><p>答：可以加载，虽然类的全限定名一致，但是如果由不同的类加载器加载后，在jvm中会被认为是两个不同的类。这是由于类加载器的单一性，虽然父类型的加载器对于子类加载器是可见的，但是类加载器“邻居”之间，同一类型仍然可以被加载多次，因为相互不可见。</p><p><strong>怎么判定两个class是相同的？</strong></p><p>答：Java 虚拟机不仅要看类的全名是否相同，还要看加载此类的类加载器是否一样。只有两者都相同的情况，才认为两个类是相同的。即便是同样的字节代码，被不同的类加载器加载之后所得到的类，也是不同的。</p><h1 id="五java程序运行的过程"><a class="markdownIt-Anchor" href="#五java程序运行的过程"></a> 五.java程序运行的过程</h1><ol><li>创建 JVM，调用类加载子系统加载 class，将类的信息存入<strong>方法区</strong></li><li>创建 main 线程，使用的内存区域是 <strong>JVM 虚拟机栈</strong>，开始执行 main 方法代码</li><li>如果遇到了未见过的类，会继续触发类加载过程，同样会存入<strong>方法区</strong></li><li>需要创建对象，会使用<strong>堆</strong>内存来存储对象</li><li>不再使用的对象，会由<strong>垃圾回收器</strong>在内存不足时回收其内存</li><li>调用方法时，方法内的局部变量、方法参数所使用的是  <strong>JVM 虚拟机栈</strong>中的栈帧内存</li><li>调用方法时，先要到<strong>方法区</strong>获得到该方法的字节码指令，由<strong>解释器</strong>将字节码指令解释为机器码执行</li><li>调用方法时，会将要执行的指令行号读到<strong>程序计数器</strong>，这样当发生了线程切换，恢复时就可以从中断的位置继续</li><li>对于非 java 实现的方法调用，使用内存称为<strong>本地方法栈</strong>（见说明）</li><li>对于热点方法调用，或者频繁的循环代码，由 <strong>JIT 即时编译器</strong>将这些代码编译成机器码缓存，提高执行性能</li></ol><h1 id="六jvm跨代引用问题如何处理"><a class="markdownIt-Anchor" href="#六jvm跨代引用问题如何处理"></a> 六.JVM跨代引用问题如何处理</h1><p><strong>跨代引用</strong></p><ul><li><strong>场景：</strong><br>年轻代的对象持有着老年代对象的引用、老年代的对象持有着年轻代对象的引用</li><li><strong>特点：</strong><br>互相引用的两个对象几乎总是同生共死：<br>如果某个新生代对象存在跨代引用，由于老年代对象难以消亡，该引用会使得新生对象在minor gc时得以存活，该对象经历多次minor gc后晋升到老年代，此时跨代引用自然也随着该对象的晋升而消失了。<br>因此，存在跨代引用的对象较少。</li><li><strong>跨代引用带来的问题：</strong><br>年轻代对象引用老年代对象：minor gc时需要扫描老年代。<br>老年代对象引用年轻代对象：major gc时需要扫描年轻代。</li><li><strong>解决方案：</strong><br>通过降低扫描对象的范围或数量来降低gc的耗时：<ul><li>年轻代对象引用老年代对象：借助 卡表/记忆集合 来减小minor gc时扫描老年代的范围，进而降低minor gc的时间。<br>老年代对象引用年轻代对象：<br>CMS收集器：借助 提前触发minor gc 来减少年轻代中对象的数量，进而降低major gc的时间。<br>G1收集器：借助 记忆集合 来减少老年代gc时扫描年轻代的范围，进而降低minor gc的时间。</li></ul></li></ul><h2 id="卡表"><a class="markdownIt-Anchor" href="#卡表"></a> 卡表</h2><ul><li><p><strong>数据结构：</strong></p><ul><li>**卡表：**jvm将老年代划分为若干个大小为512字节的区域(card)，并使用一个 <strong>字节(byte)数组</strong> 来标记老年代中这些区域(card)中的对象是否持有新生代对象的引用。jvm将这个 字节数组 称为卡表(card table)。</li><li><strong>卡表中的元素</strong>：表示老年代中某块区域(card)中的对象是否持有新生代对象的引用。</li><li><strong>卡表</strong>属于points-out(我引用了谁的对象)的结构。</li></ul><blockquote><p>说明：之所以使用byte数组而不是bit数组主要是速度上的考量，现代计算机硬件都是最小按字节寻址的，没有直接存储一个bit指令，所以要用bit的话就不得不多消耗几条shift+mask指令。</p></blockquote></li><li><p><strong>原理：</strong></p><ul><li>当老年代中的某个对象持有了新生代对象的引用时，jvm将卡表中表示该对象所在区域(card)的元素设为1，表示该对象所在区域(card)是一个 dirty card。（注意：新生代对象引用老年代对象时，老年代对象所在的区域(card)不会被标记为dirty card）。</li><li>年轻代gc时只扫描dirty card中的对象，而无需扫描整个老年代中的对象，从而减少年轻代gc的停顿时间。</li><li>当完成所有脏卡的扫描之后，jvm便会将所有脏卡的标识位清零。</li></ul></li><li><p><strong>card标记为dirty card的原理</strong></p><ul><li><strong>写屏障：</strong><ul><li>写屏障是一小段将card标记为dirty card的代码：检查对象的引用变更时是否出现了跨代引用(g1是跨region引用)，如果出现，这将对应的card标记为dirty card。</li></ul></li><li><strong>Hotspot VM的字节码解释器和JIT编译器使用写屏障维护卡表：</strong><ul><li>解释器每次执行更新引用的字节码时，都会执行一段写屏障。</li><li>JIT编译器在生成更新引用的代码后，也会生成一段写屏障。</li><li>虽然写屏障使得应用线程增加了一些性能开销，但是minor gc的效率提高了很多，进而提高了系统的吞吐量。</li></ul></li></ul></li></ul><h2 id="记忆集合"><a class="markdownIt-Anchor" href="#记忆集合"></a> 记忆集合</h2><ul><li><p><strong>数据结构:</strong></p><ul><li><p>每个region都维护着一个记忆集合(Remembered Set / Rset)，收集器在标记跨代引用的对象时只需扫描(CSet中region维护的)RSet即可。</p></li><li><p>RSet的整体结构是一个哈希表，底层是在卡表的基础上实现的。</p><ul><li>key：key记录了引用本region中对象的对象所在region的位置。</li><li>value：是一个集合，其元素是：其它region(由key确定是哪个region)中的对象引用本region中对象的引用及引用所在的卡表位置。</li></ul></li><li><p>Rset属于points-into结构(谁引用了我的对象)</p></li></ul></li><li><p><strong>RSet、Card和Region的关系</strong></p><ul><li>每个region被分成了多个card。</li><li>不同region中的card会相互引用。</li><li>图示：</li><li><img src="/2023/02/17/jvm/image-20230318181930858.png" alt="image-20230318181930858"></li></ul></li></ul><p>Region1中的Card中的对象引用了Region2中的Card中的对象，蓝色实线表示的就是points-out的关系，而在Region2的RSet中，记录了Region1的Card，即红色虚线表示的关系，这就是points-into。</p><h1 id="七判断对象是否为垃圾是否有引用"><a class="markdownIt-Anchor" href="#七判断对象是否为垃圾是否有引用"></a> 七.判断对象是否为垃圾（是否有引用）</h1><h2 id="引用计数法"><a class="markdownIt-Anchor" href="#引用计数法"></a> 引用计数法</h2><p>引用计数法（Reference Count）会给对象中添加一个引用计数器，每当有一个地方引用它的时候，计数器的值就 +1 ，当引用失效时，计数器值就 -1 ，计数器的值为 0 的对象不可能在被使用，这个时候就可以判定这个对象是垃圾。</p><p><img src="/2023/02/17/jvm/image-20230318181940415.png" alt="image-20230318181940415"></p><p>当图中的数值变成0时，这个时候使用引用计数算法就可以判定它是垃圾了，但是引用计数法不能解决一个问题，就是当对象是循环引用的时候，计数器值都不为0，这个时候引用计数器无法通知GC收集器来回收他们，如下图所示：</p><p><img src="/2023/02/17/jvm/image-20230318181948534.png" alt="image-20230318181948534"></p><p>这个时候就需要使用到我们的根可达算法。</p><h2 id="可达性分析"><a class="markdownIt-Anchor" href="#可达性分析"></a> 可达性分析</h2><p>根可达算法（Root Searching）的意思是说从根上开始搜索，当一个程序启动后，马上需要的那些个对象就叫做根对象，所谓的根可达算法就是首先找到根对象，然后跟着这根线一直往外找到那些有用的。常见的GC roots如下：</p><ul><li><strong>线程栈变量：</strong> 第一种是<strong>虚拟机栈中的引用的对象</strong>，在程序中正常创建一个对象，对象会在堆上开辟一块空间，同时会将这块空间的地址作为引用保存到虚拟机栈中，如果对象生命周期结束了，那么引用就会从虚拟机栈中出栈，因此如果在虚拟机栈中有引用，就说明这个对象还是有用的，这种情况是最常见的。</li><li><strong>静态变量：<strong>第二种是我们</strong>在类中定义了全局的静态的对象</strong>，也就是使用了<code>static</code>关键字，由于虚拟机栈是线程私有的，所以这种对象的引用会保存在共有的方法区中，显然将方法区中的静态引用作为GC Roots是必须的。</li><li><strong>常量池：</strong> 第三种便是<strong>常量引用</strong>，就是使用了<code>static final</code>关键字，由于这种引用初始化之后不会修改，所以方法区常量池里的引用的对象也应该作为GC Roots。</li><li><strong>JNI：</strong> 第四种是在使用<strong>JNI</strong>技术时，有时候单纯的Java代码并不能满足我们的需求，我们可能需要在Java中调用C或C++的代码，因此会使用<strong>Native方法</strong>，JVM内存中专门有一块本地方法栈，用来保存这些对象的引用，所以本地方法栈中引用的对象也会被作为GC Roots。</li></ul><h1 id="八gc垃圾收集器"><a class="markdownIt-Anchor" href="#八gc垃圾收集器"></a> 八.GC垃圾收集器</h1><p><img src="/2023/02/17/jvm/image-20230318181958591.png" alt="image-20230318181958591"></p><p>GC垃圾收集器的JVM配置参数：</p><ul><li><strong>-XX:+UseSerialGC</strong>：年轻代和老年代都用串行收集器</li><li><strong>-XX:+UseParNewGC</strong>：年轻代使用 ParNew，老年代使用 Serial Old</li><li><strong>-XX:+UseParallelGC</strong>：年轻代使用 ParallerGC，老年代使用 Serial Old</li><li><strong>-XX:+UseParallelOldGC</strong>：新生代和老年代都使用并行收集器</li><li><strong>-XX:+UseConcMarkSweepGC</strong>：表示年轻代使用 ParNew，老年代的用 CMS</li><li><strong>-XX:+UseG1GC</strong>：使用 G1垃圾回收器</li><li><strong>-XX:+UseZGC</strong>：使用 ZGC 垃圾回收器</li></ul><h2 id="年轻代收集器"><a class="markdownIt-Anchor" href="#年轻代收集器"></a> 年轻代收集器</h2><p>新生代有<code>Serial</code>、<code>ParNew</code>、<code>Parallel Scavenge</code>三种垃圾收集器。</p><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:left">串行/并行/并发</th><th style="text-align:left">回收算法</th><th style="text-align:left">使用场景</th><th style="text-align:left">可以跟CMS配合</th></tr></thead><tbody><tr><td style="text-align:left">Serial</td><td style="text-align:left">串行</td><td style="text-align:left">复制</td><td style="text-align:left">单CPU，Client模式下虚拟机</td><td style="text-align:left">是</td></tr><tr><td style="text-align:left">ParNew</td><td style="text-align:left">并行(Serial的并行版)</td><td style="text-align:left">复制</td><td style="text-align:left">多CPU，常在Server模式</td><td style="text-align:left">是</td></tr><tr><td style="text-align:left">Parallel Scavenge</td><td style="text-align:left">并行</td><td style="text-align:left">复制</td><td style="text-align:left">多CPU且关注吞吐量</td><td style="text-align:left">否</td></tr></tbody></table><h3 id="serial收集器"><a class="markdownIt-Anchor" href="#serial收集器"></a> Serial收集器</h3><p>处理GC的只有一条线程，并且在垃圾回收的过程中暂停一切用户线程。最简单的垃圾回收器，但千万别以为它没有用武之地。因为简单，所以高效，它通常用在客户端应用上。因为客户端应用不会频繁创建很多对象，用户也不会感觉出明显的卡顿。相反，它使用的资源更少，也更轻量级。</p><p><img src="/2023/02/17/jvm/image-20230318182009030.png" alt="image-20230318182009030"></p><h3 id="parnew收集器"><a class="markdownIt-Anchor" href="#parnew收集器"></a> ParNew收集器</h3><p>ParNew是Serial的多线程版本。由多条GC线程并行地进行垃圾清理。清理过程依然要停止用户线程。ParNew 追求“低停顿时间”，与 Serial 唯一区别就是使用了多线程进行垃圾收集，在多 CPU 环境下性能比 Serial 会有一定程度的提升；但线程切换需要额外的开销，因此在单 CPU 环境中表现不如 Serial。</p><p><img src="/2023/02/17/jvm/image-20230318182018615.png" alt="image-20230318182018615"></p><h3 id="parallel-scavenge收集器"><a class="markdownIt-Anchor" href="#parallel-scavenge收集器"></a> Parallel Scavenge收集器</h3><p>另一个多线程版本的垃圾回收器。它与ParNew的主要区别是：</p><ul><li><strong>Parallel Scavenge</strong>：追求CPU吞吐量，能够在较短时间完成任务，适合没有交互的后台计算。弱交互强计算</li><li><strong>ParNew</strong>：追求降低用户停顿时间，适合交互式应用。强交互弱计算</li></ul><h2 id="老年代收集器"><a class="markdownIt-Anchor" href="#老年代收集器"></a> 老年代收集器</h2><p>老年代有<code>Serial Old</code>、<code>Parallel Old</code>、<code>CMS</code> 三种垃圾收集器。</p><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:left">串行/并行/并发</th><th style="text-align:left">回收算法</th><th style="text-align:left">使用场景</th><th style="text-align:left">组合年轻代</th></tr></thead><tbody><tr><td style="text-align:left">Serial Old</td><td style="text-align:left">串行</td><td style="text-align:left">标记整理</td><td style="text-align:left">单CPU</td><td style="text-align:left">Serial  、ParNew、Parallel Scavenge</td></tr><tr><td style="text-align:left">Parallel Old</td><td style="text-align:left">并行</td><td style="text-align:left">标记整理</td><td style="text-align:left">多CPU</td><td style="text-align:left">Parallel Scavenge</td></tr><tr><td style="text-align:left">CMS</td><td style="text-align:left">并发</td><td style="text-align:left">标记清除</td><td style="text-align:left">多CPU且关注吞吐量，常用Server端</td><td style="text-align:left">Serial 、ParNew</td></tr></tbody></table><h3 id="serial-old收集器"><a class="markdownIt-Anchor" href="#serial-old收集器"></a> Serial Old收集器</h3><p>与年轻代的 Serial 垃圾收集器对应，都是单线程版本，同样适合客户端使用。年轻代的 Serial，使用复制算法。老年代的 Old Serial，使用<strong>标记-整理</strong>算法。</p><p><img src="/2023/02/17/jvm/image-20230318182032654.png" alt="image-20230318182032654"></p><h3 id="parallel-old收集器"><a class="markdownIt-Anchor" href="#parallel-old收集器"></a> Parallel Old收集器</h3><p>Parallel Old 收集器是 Parallel Scavenge 的老年代版本，追求 <strong>CPU 吞吐量</strong>。</p><p><img src="/2023/02/17/jvm/image-20230318182046487.png" alt="image-20230318182046487"></p><h3 id="cms收集器"><a class="markdownIt-Anchor" href="#cms收集器"></a> CMS收集器</h3><p><strong>并发标记清除(Concurrent Mark Sweep,CMS)垃圾回收器</strong>，是一款致力于获取最短停顿时间的收集器，使用多个线程来扫描堆内存并标记可被清除的对象，然后清除标记的对象。在下面两种情形下会暂停工作线程：</p><ul><li>在老年代中标记引用对象的时候</li><li>在做垃圾回收的过程中堆内存中有变化发生</li></ul><p>对比与并行垃圾回收器，CMS回收器使用更多的CPU来保证更高的吞吐量。如果我们可以有更多的CPU用来提升性能，那么CMS垃圾回收器是比并行回收器更好的选择。使用 <code>-XX:+UseParNewGCJVM</code> 参数来开启使用CMS垃圾回收器。</p><p><img src="/2023/02/17/jvm/image-20230318182056316.png" alt="image-20230318182056316"></p><p><strong>主要流程如下</strong>：</p><ul><li><strong>初始标记(CMS initial mark)</strong>：仅标记出GC Roots能直接关联到的对象。需要Stop-the-world</li><li><strong>并发标记(CMS concurrenr mark)</strong>：进行GC Roots遍历的过程，寻找出所有可达对象</li><li><strong>重新标记(CMS remark)</strong>：修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录。需要Stop-the-world</li><li><strong>并发清除(CMS concurrent sweep)</strong>：清出垃圾</li></ul><p><strong>CMS触发机制</strong>：当老年代的使用率达到80%时，就会触发一次CMS GC。</p><ul><li><code>-XX:CMSInitiatingOccupancyFraction=80</code></li><li><code>-XX:+UseCMSInitiatingOccupancyOnly</code></li></ul><p><strong>优点</strong></p><ul><li>并发收集</li><li>停顿时间最短</li></ul><p><strong>缺点</strong></p><ul><li><p><strong>并发回收导致CPU资源紧张</strong></p><p>在并发阶段，它虽然不会导致用户线程停顿，但却会因为占用了一部分线程而导致应用程序变慢，降低程序总吞吐量。CMS默认启动的回收线程数是：（CPU核数 + 3）/ 4，当CPU核数不足四个时，CMS对用户程序的影响就可能变得很大。</p></li><li><p><strong>无法清理浮动垃圾</strong></p><p>在CMS的并发标记和并发清理阶段，用户线程还在继续运行，就还会伴随有新的垃圾对象不断产生，但这一部分垃圾对象是出现在标记过程结束以后，CMS无法在当次收集中处理掉它们，只好留到下一次垃圾收集时再清理掉。这一部分垃圾称为“浮动垃圾”。</p></li><li><p><strong>并发失败（Concurrent Mode Failure）</strong></p><p>由于在垃圾回收阶段用户线程还在并发运行，那就还需要预留足够的内存空间提供给用户线程使用，因此CMS不能像其他回收器那样等到老年代几乎完全被填满了再进行回收，必须预留一部分空间供并发回收时的程序运行使用。默认情况下，当老年代使用了 80% 的空间后就会触发 CMS 垃圾回收，这个值可以通过 -XX**😗* CMSInitiatingOccupancyFraction 参数来设置。</p><p>这里会有一个风险：要是CMS运行期间预留的内存无法满足程序分配新对象的需要，就会出现一次“并发失败”（Concurrent Mode Failure），这时候虚拟机将不得不启动后备预案：Stop The World，临时启用 Serial Old 来重新进行老年代的垃圾回收，这样一来停顿时间就很长了。</p></li><li><p><strong>内存碎片问题</strong></p><p>CMS是一款基于“标记-清除”算法实现的回收器，这意味着回收结束时会有内存碎片产生。内存碎片过多时，将会给大对象分配带来麻烦，往往会出现老年代还有很多剩余空间，但就是无法找到足够大的连续空间来分配当前对象，而不得不提前触发一次 Full GC 的情况。</p><p>为了解决这个问题，CMS收集器提供了一个 -XX:+UseCMSCompactAtFullCollection 开关参数（默认开启），用于在 Full GC 时开启内存碎片的合并整理过程，由于这个内存整理必须移动存活对象，是无法并发的，这样停顿时间就会变长。还有另外一个参数 -XX:CMSFullGCsBeforeCompaction，这个参数的作用是要求CMS在执行过若干次不整理空间的 Full GC 之后，下一次进入 Full GC 前会先进行碎片整理（默认值为0，表示每次进入 Full GC 时都进行碎片整理）。</p></li></ul><p><strong>作用内存区域</strong>：老年代</p><p><strong>适用场景</strong>：对停顿时间敏感的场合</p><p><strong>算法类型</strong>：标记-清除</p><h2 id="g1收集器"><a class="markdownIt-Anchor" href="#g1收集器"></a> G1收集器</h2><p>G1（Garbage First）回收器采用面向局部收集的设计思路和基于Region的内存布局形式，是一款主要面向服务端应用的垃圾回收器。G1设计初衷就是替换 CMS，成为一种全功能收集器。G1 在JDK9 之后成为服务端模式下的默认垃圾回收器，取代了 Parallel Scavenge 加 Parallel Old 的默认组合，而 CMS 被声明为不推荐使用的垃圾回收器。G1从整体来看是基于 标记-整理 算法实现的回收器，但从局部（两个Region之间）上看又是基于 标记-复制 算法实现的。<strong>G1 回收过程</strong>，G1 回收器的运作过程大致可分为四个步骤：</p><ul><li><strong>初始标记（会STW）</strong>：仅仅只是标记一下 GC Roots 能直接关联到的对象，并且修改TAMS指针的值，让下一阶段用户线程并发运行时，能正确地在可用的Region中分配新对象。这个阶段需要停顿线程，但耗时很短，而且是借用进行Minor GC的时候同步完成的，所以G1收集器在这个阶段实际并没有额外的停顿。</li><li><strong>并发标记</strong>：从 GC Roots 开始对堆中对象进行可达性分析，递归扫描整个堆里的对象图，找出要回收的对象，这阶段耗时较长，但可与用户程序并发执行。当对象图扫描完成以后，还要重新处理在并发时有引用变动的对象。并利用Rset标记跨代引用对象。</li><li><strong>最终标记（会STW）</strong>：对用户线程做短暂的暂停，处理并发阶段结束后仍有引用变动的对象。</li><li><strong>清理阶段（会STW）</strong>：更新Region的统计数据，对各个Region的回收价值和成本进行排序，根据用户所期望的停顿时间来制定回收计划，可以自由选择任意多个Region构成回收集，然后把决定回收的那一部分Region的存活对象复制到空的Region中，再清理掉整个旧Region的全部空间。这里的操作涉及存活对象的移动，必须暂停用户线程，由多条回收器线程并行完成的。</li></ul><p>G1收集器中的堆内存被划分为多个大小相等的内存块（Region），每个Region是逻辑连续的一段内存，结构如下：</p><p><img src="/2023/02/17/jvm/image-20230318182108741.png" alt="image-20230318182108741"></p><p>每个Region被标记了E、S、O和H，说明每个Region在运行时都充当了一种角色，其中H是以往算法中没有的，它代表Humongous（巨大的），这表示这些Region存储的是巨型对象（humongous object，H-obj），当新建对象大小超过Region大小一半时，直接在新的一个或多个连续Region中分配，并标记为H。</p><p>同时G1中引入了<code>RememberSets</code>、<code>CollectionSets</code>帮助更好的执行GC 。</p><blockquote><p>1、<code>RememberSets</code>： <strong>RSet</strong> 记录了其他Region中的对象引用本Region中对象的关系，属于points-into结构（谁引用了我的对象）</p><p>2、<code>CollectionSets</code>：<strong>Csets</strong> 是一次GC中需要被清理的regions集合，注意G1每次GC不是全部region都参与的，可能只清理少数几个，这几个就被叫做Csets。在GC的时候，对于old -&gt; young 和old -&gt; old的跨代对象引用，只要扫描对应的<strong>CSet</strong>中的<strong>RSet</strong>即可。</p></blockquote><p>G1进行GC的时候一般分为<code>Yang GC</code>跟<code>Mixed GC</code>。</p><blockquote><p><code>Young GC</code>：<strong>CSet</strong> 就是所有年轻代里面的Region</p><p><code>Mixed GC</code>：<strong>CSet</strong> 是所有年轻代里的Region加上在全局并发标记阶段标记出来的收益高的Region</p></blockquote><p><strong>Region</strong></p><p>堆内存中一个Region的大小可以通过 <code>-XX:G1HeapRegionSize</code>参数指定，大小区间只能是1M、2M、4M、8M、16M和32M，总之是2的幂次方。如果G1HeapRegionSize为默认值，则在堆初始化时计算Region的实际大小，默认把堆内存按照2048份均分，最后得到一个合理的大小。</p><p><strong>GC模式</strong></p><ul><li><p><strong>young gc</strong></p><p>发生在年轻代的GC算法，一般对象（除了巨型对象）都是在eden region中分配内存，当所有eden region被耗尽无法申请内存时，就会触发一次young gc，这种触发机制和之前的young gc差不多，执行完一次young gc，活跃对象会被拷贝到survivor region或者晋升到old region中，空闲的region会被放入空闲列表中，等待下次被使用。</p><ul><li><code>-XX:MaxGCPauseMillis</code>：设置G1收集过程目标时间，默认值<code>200ms</code></li><li><code>-XX:G1NewSizePercent</code>：新生代最小值，默认值<code>5%</code></li><li><code>-XX:G1MaxNewSizePercent</code>：新生代最大值，默认值<code>60%</code></li></ul></li><li><p><strong>mixed gc</strong></p><p>当越来越多的对象晋升到老年代old region时，为了避免堆内存被耗尽，虚拟机会触发一个混合的垃圾收集器，即mixed gc，该算法并不是一个old gc，除了回收整个young region，还会回收一部分的old region，这里需要注意：<strong>是一部分老年代，而不是全部老年代</strong>，可以选择哪些old region进行收集，从而可以对垃圾回收的耗时时间进行控制</p></li><li><p><strong>full gc</strong></p><ul><li>如果对象内存分配速度过快，mixed gc来不及回收，导致老年代被填满，就会触发一次full gc，G1的full gc算法就是单线程执行的serial old gc，会导致异常长时间的暂停时间，需要进行不断的调优，尽可能的避免full gc</li></ul></li></ul><p><strong>G1垃圾回收器</strong> 应用于大的堆内存空间。它将堆内存空间划分为不同的区域，对各个区域并行地做回收工作。G1在回收内存空间后还立即对空闲空间做整合工作以减少碎片。CMS却是在全部停止(stop the world,STW)时执行内存整合工作。对于不同的区域G1根据垃圾的数量决定优先级。使用 <code>-XX:UseG1GCJVM</code> 参数来开启使用G1垃圾回收器。</p><p><img src="/2023/02/17/jvm/image-20230318182117734.png" alt="image-20230318182117734"></p><p><strong>主要流程如下</strong>：</p><ul><li>初始标记(Initial Marking)：标记从GC Root可达的对象。会发生STW</li><li>并发标记(Concurrenr Marking)：标记出GC Root可达对象衍生出去的存活对象，并收集各个Region的存活对象信息。整个过程gc collector线程与应用线程可以并行执行</li><li><strong>最终标记(Final Marking)</strong>：标记出在并发标记过程中遗漏的，或内部引用发生变化的对象。会发生STW</li><li>筛选回收(Live Data Counting And Evacution)：垃圾清除过程，如果发现一个Region中没有存活对象，则把该Region加入到空闲列表中</li></ul><p><code>-XX:InitiatingHeapOccupancyPercent</code>：当老年代大小占整个堆大小百分比达到该阈值时，会触发一次mixed gc。</p><p><strong>回收总结</strong>：</p><ul><li><p>1、经过global concurrent marking，collector就知道哪些Region有存活的对象。并将那些完全可回收的Region(没有存活对象)收集起来加入到可分配Region队列，实现对该部分内存的回收。对于有存活对象的Region，G1会根据统计模型找处收益最高、开销不超过用户指定的上限的若干Region进行对象回收。这些选中被回收的Region组成的集合就叫做collection set 简称Cset！</p></li><li><p>2、在MIX GC中的Cset = <strong>所有年轻代里的region + 根据global concurrent marking统计得出收集收益高的若干old region</strong>。</p></li><li><p>3、在YGC中的Cset = <strong>所有年轻代里的region + 通过控制年轻代的region个数来控制young GC的开销</strong>。</p></li><li><p>4、YGC 与 MIXGC 都是采用多线程复制清理，整个过程会STW。G1的<strong>低延迟原理</strong>在于其回收的区域变得精确并且范围变小了。</p></li></ul><p><strong>优点</strong>：</p><ul><li>1、**并行与并发：**G1能充分利用多CPU、多核环境下的硬件优势，可以通过并发的方式让Java程序继续执行。</li><li>2、**分代收集：**分代概念在G1中依然得以保留，它能够采用不同的方式去处理新创建的对象和已经存活了一段时间、熬过多次GC的旧对象来获得更好的收集效果。</li><li>3、**空间整合：**G1从整体上看是基于<code>标记-整理</code>算法实现的，从局部(两个Region之间)上看是基于<code>复制算法</code>实现的，G1运行期间不会产生内存空间碎片。</li><li>4、**可预测停顿：**G1比CMS牛在能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为M毫秒的时间片段内，消耗在垃圾收集上的时间不得超过N毫秒。</li></ul><p><strong>缺点</strong>：</p><ul><li>需要记忆集来记录新生代和老年代之间的引用关系</li><li>需要占用大量的内存，可能达到整个堆内存容量的20%甚至更多</li></ul><p><strong>作用内存区域</strong>：跨代</p><p><strong>适用场景</strong>：作为关注停顿时间的场景的收集器备选方案</p><p><strong>算法类型</strong>：整体来看基于”标记-整理算法“，局部采用&quot;复制算法&quot;</p><h1 id="九new对象时的堆抢占问题"><a class="markdownIt-Anchor" href="#九new对象时的堆抢占问题"></a> 九.new对象时的堆抢占问题</h1><p>问题：jvm 里 new 对象时，堆会不会发生抢占？怎么设计jvm的堆的线程安全？</p><h3 id="tlab"><a class="markdownIt-Anchor" href="#tlab"></a> TLAB</h3><p>什么是TLAB？它是干什么的？咋们先抛开这个问题，一切的开始得从new对象到指针碰撞开始讲起。</p><blockquote><h5 id="new对象与指针碰撞"><a class="markdownIt-Anchor" href="#new对象与指针碰撞"></a> new对象与指针碰撞</h5></blockquote><p>new对象怎么就出问题了呢？<br>java中我们要创建一个对象,用关键字new就可以了。但是，在我们日常中，有很多生命周期很短的对象。比如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">dome</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user=<span class="keyword">new</span> <span class="built_in">user</span>();</span><br><span class="line">    user.<span class="built_in">sayhi</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>什么是指针碰撞呢？<br>假设JVM虚拟机上，堆内存都是规整的。堆内存被一个指针一分为二。指针的左边都被塞满了对象，指针的右变是未使用的区域。每一次有新的对象创建，指针就会向右移动一个对象size的距离。这就被称为指针碰撞。</p><p><img src="/2023/02/17/jvm/image-20230318182129739.png" alt="image-20230318182129739"></p><p>image</p><p>好，问题来了。如果我们多线程执行刚才那个dome方法，一个线程正在给A对象分配内存，<strong><code>指针还没有来的及修改</code></strong>，其它为B对象分配内存的线程，而且还是引用这之前的指针指向。这样就出现毛病了。如果想避免冲突的话,我们可以进行<strong>加锁</strong>,但是加锁会导致性能比较低,因此JVM里没有采用这种方式;</p><blockquote><h5 id="tlab的出现"><a class="markdownIt-Anchor" href="#tlab的出现"></a> TLAB的出现</h5></blockquote><p>我们现在已经搞清楚，我们出现了哪些问题。我在为大家介绍一下今天的主角。</p><p>TLAB的全称是Thread Local Allocation Buffer，即**<code>线程本地分配缓存区</code>，这是一个线程专用的内存分配区域。**</p><p>如果设置了虚拟机参数**<code>-XX:UseTLAB</code><strong>，在线程初始化时，同时也会申请一块指定大小的内存，只给当前线程使用，这样</strong>每个线程都单独拥有一个空间**，如果需要分配内存，就在<strong>自己的空间上分配，这样就不存在竞争的情况</strong>，可以大大提升分配效率。</p><p>TLAB空间的内存非常小，缺省情况下仅占有整个Eden空间的1%，也可以通过选项-XX:TLABWasteTargetPercent设置TLAB空间所占用Eden空间的百分比大小。</p><p><strong>TLAB的本质其实是三个<code>指针管理的区域</code></strong>：<code>start</code>，<code>top</code> 和 <code>end</code>，每个线程都会从Eden分配一块空间，例如说100KB，作为自己的TLAB，其中 start 和 end 是占位用的，标识出 eden 里被这个 TLAB 所管理的区域，卡住eden里的一块空间不让其它线程来这里分配。</p><p>TLAB只是让每个线程有私有的分配指针，但底下存对象的内存空间还是给所有线程访问的，只是其它线程无法在这个区域分配而已。从这一点看，它被翻译为 线程私有分配区 更为合理一点<br>当一个TLAB用满（分配指针top撞上分配极限end了），就新申请一个TLAB，而在老TLAB里的对象还留在原地什么都不用管——它们无法感知自己是否是曾经从TLAB分配出来的，而只关心自己是在eden里分配的。</p><blockquote><h5 id="tlab的缺点"><a class="markdownIt-Anchor" href="#tlab的缺点"></a> TLAB的缺点</h5></blockquote><p>事务总不是完美的，TLAB也又自己的缺点。因为<strong>TLAB通常很小，所以<code>放不下大对象</code>。</strong><br>1，<strong>TLAB空间大小是固定的</strong>，但是这时候一个大对象，我TLAB剩余的空间已经容不下它了。(比如100kb的TLAB，来了个110KB的对象)<br>2，TLAB空间还剩一点点没有用到，有点舍不得。(比如100kb的TLAB，装了80KB，又来了个30KB的对象)<br>所以JVM开发人员做了以下处理，设置了最大浪费空间。<br>当剩余的空间小于最大浪费空间，那该TLAB属于的线程在重新向Eden区申请一个TLAB空间。进行对象创建，还是空间不够，那你这个对象太大了，去Eden区直接创建吧！<br>当剩余的空间大于最大浪费空间，那这个大对象请你直接去Eden区创建，我TLAB放不下没有使用完的空间。</p><p>当然，又回造成新的病垢。<br>3，Eden空间够的时候，你再次申请TLAB没问题，我不够了，Heap的Eden区要开始GC，<br>4，TLAB允许浪费空间，导致Eden区空间不连续，积少成多。以后还要人帮忙打理。</p><blockquote><p>补充:<br>上面说了对象可能分配到<strong>TLAB</strong>上,其实还可能分配到<strong>栈上</strong>,这涉及到<strong>逃逸分析</strong>以及<strong>标量替换</strong>(<strong>HotSpot中默认就开启这俩</strong>)<br>关于开启逃逸分析后,确认不会逃逸出方法的对象可以分配到栈上随着方法调用结束而结束,不用走JVM堆处理,可以看<a href="https://www.jianshu.com/p/4fd825568b9e">https://www.jianshu.com/p/4fd825568b9e</a><br><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fblog.csdn.net%2Fxiaomingdetianxia%2Farticle%2Fdetails%2F77688945">https://blog.csdn.net/xiaomingdetianxia/article/details/77688945</a></p></blockquote><h3 id="栈上对象"><a class="markdownIt-Anchor" href="#栈上对象"></a> 栈上对象</h3><p>java中我们要创建一个对象,用关键字new就可以了。但是，在我们日常中，有很多生命周期很短的对象。比如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">dome</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user=<span class="keyword">new</span> <span class="built_in">user</span>();</span><br><span class="line">    user.<span class="built_in">sayhi</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这种对象的作用域都<code>不会逃逸出方法外</code></strong>，也就是说该对象的生命周期会随着方法的调用开始而开始，方法的调用结束而结束。<br>假设JVM所有的对象都放在堆内存中(为什么用假设，因为JVM并不是这样)一旦方法结束，没有了指向该对象的引用，该对象就需要被GC回收，如果存在很多这样的情况，对GC来说压力山大呀。</p><p>如果确定一个对象的作用域不会逃逸出方法之外，那可以将这个对象分配在栈上，这样，对象所占用的内存空间就可以随栈帧出栈而销毁。在一般应用中，不会逃逸的局部对象所占的比例很大，如果能使用栈上分配，那大量的对象就会随着方法的结束而自动销毁了，无须通过垃圾收集器回收，可以减小垃圾收集器的负载。</p><p>JVM允许将线程私有的对象打散分配在栈上，而不是分配在堆上。分配在栈上的好处是可以在函数调用结束后自行销毁，而不需要垃圾回收器的介入，从而提高系统性能。<br>栈上分配的技术基础：</p><ul><li>一是**<code>逃逸分析</code>**：逃逸分析的目的是判断对象的作用域是否有可能逃逸出函数体。</li><li>二是**<code>标量替换</code>**：允许将对象打散分配在栈上，比如若一个对象拥有两个字段，会将这两个字段视作局部变量进行分配。</li></ul><p>只能在server模式下才能启用逃逸分析，参数-XX:DoEscapeAnalysis启用逃逸分析，参数-XX:+EliminateAllocations开启标量替换（默认打开）。Java SE 6u23版本之后，HotSpot中默认就开启了逃逸分析，可以通过选项-XX:+PrintEscapeAnalysis查看逃逸分析的筛选结果。</p><h1 id="十jvm性能调优"><a class="markdownIt-Anchor" href="#十jvm性能调优"></a> 十.JVM性能调优</h1><h2 id="磁盘不足排查"><a class="markdownIt-Anchor" href="#磁盘不足排查"></a> 磁盘不足排查</h2><p>其实，磁盘不足排查算是系统、程序层面的问题排查，并不算是JVM，但是另一方面考虑过来就是，系统磁盘的不足，也会导致JVM的运行异常，所以也把磁盘不足算进来了。并且排查磁盘不足，是比较简单，就是几个命令，然后就是逐层的排查，首先第一个命令就是<strong>df -h</strong>，查询磁盘的状态：</p><p><img src="/2023/02/17/jvm/image-20230318182144705.png" alt="image-20230318182144705"></p><p>从上面的显示中其中第一行使用的2.8G最大，然后是挂载在 <strong>/</strong> 目录下，我们直接<strong>cd /</strong>。然后通过执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -sh *</span><br></pre></td></tr></table></figure><p>查看各个文件的大小，找到其中最大的，或者说存储量级差不多的并且都非常大的文件，把那些没用的大文件删除就好。</p><p><img src="/2023/02/17/jvm/image-20230318182152296.png" alt="image-20230318182152296"></p><p>然后，就是直接cd到对应的目录也是执行：du -sh *，就这样一层一层的执行，找到对应的没用的，然后文件又比较大的，可以直接删除。</p><h2 id="堆外内存排查与解决"><a class="markdownIt-Anchor" href="#堆外内存排查与解决"></a> 堆外内存排查与解决</h2><p>Metaspace 属于堆外内存，但由于它是单独管理的，所以排查起来没什么难度。</p><p>你平常可能见到的使用堆外内存的场景还有下面这些：</p><ol><li>JNI 或者 JNA 程序，直接操纵了本地内存，比如一些加密库；</li><li>使用了Java 的 Unsafe 类，做了一些本地内存的操作；</li><li>Netty 的直接内存（Direct Memory），底层会调用操作系统的 malloc 函数。</li></ol><p>使用堆外内存可以调用一些功能完备的库函数，而且减轻了 GC 的压力。</p><p>这些代码，有可能是你了解的人写的，也有可能隐藏在第三方的 jar 包里。虽然有一些好处，但是问题排查起来通常会比较的困难。</p><p><strong>MaxDirectMemorySize 控制直接内存的申请</strong></p><p>其实，通过<strong>这个参数，仍然限制不住所有堆外内存的使用，它只是限制了使用 DirectByteBuffer 的内存申请。</strong></p><p>很多时候（比如直接使用了 sun.misc.Unsafe 类），堆外内存会一直增长，直到机器物理内存爆满，被 oom killer。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import sun.misc.Unsafe;</span><br><span class="line"></span><br><span class="line">import java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line">public class UnsafeDemo &#123;</span><br><span class="line">    public static final int _1MB = 1024 * 1024;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        Field field = Unsafe.class.getDeclaredField(&quot;theUnsafe&quot;);</span><br><span class="line">        field.setAccessible(true);</span><br><span class="line">        Unsafe unsafe = (Unsafe) field.get(null);</span><br><span class="line">        for (; ; ) &#123;</span><br><span class="line">            unsafe.allocateMemory(_1MB);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>上面这段代码，就会持续申请堆外内存，但它返回的是 long 类型的地址句柄，所以堆内内存的使用会很少。</p><p>我们使用下面的命令去限制堆内和直接内存的使用，结果发现程序占用的操作系统内存在一直上升，这两个参数在这种场景下没有任何效果。这段程序搞死了我的机器很多次，运行的时候要小心。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -XX:MaxDirectMemorySize=10M -Xmx10M  UnsafeDemo</span><br></pre></td></tr></table></figure><p>相信这种情况也困扰了你，因为使用一些 JDK 提供的工具，根本无法发现这部分内存的使用。</p><p>我们需要一些更加底层的工具来发现这些游离的内存分配。</p><p>其实，很多内存和性能问题，都逃不过下面要介绍的这些工具的联合分析。本课时将会结合一个实际的例子，来看一下一个堆外内存的溢出情况，了解常见的套路。</p><h3 id="1-现象"><a class="markdownIt-Anchor" href="#1-现象"></a> 1. 现象</h3><p>我们有一个服务，非常的奇怪，在某个版本之后，占用的内存开始增长，直到虚拟机分配的内存上限，但是并不会 OOM。</p><p>如果你开启了 SWAP，会发现这个应用也会毫不犹豫的将它吞掉，有多少吞多少。</p><p>说它的内存增长，是通过 top 命令去观察的，看它的 <strong>RES</strong> 列的数值；反之，如果使用 jmap 命令去看内存占用，得到的只是堆的大小，只能看到一小块可怜的空间。</p><p><img src="/2023/02/17/jvm/image-20230318182205167.png" alt="image-20230318182205167"></p><p>使用 ps 也能看到相同的效果。我们观测到，除了虚拟内存比较高，达到了 17GB 以外，实际使用的内存 RSS 也夸张的达到了 7 GB，远远超过了 -Xmx 的设定。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root]$ ps -p 75 -o rss,vsz  </span><br><span class="line">RSS    VSZ 7152568 17485844</span><br></pre></td></tr></table></figure><p>使用 jps 查看启动参数，发现分配了大约 3GB 的堆内存。实际内存使用超出了最大内存设定的一倍还多，这明显是不正常的，肯定是使用了堆外内存。</p><h3 id="2-模拟程序"><a class="markdownIt-Anchor" href="#2-模拟程序"></a> 2. 模拟程序</h3><p>为了能够使用这些工具实际观测这个内存泄漏的过程，我这里准备了一份小程序。</p><p>程序将会持续的使用 Java 的 Zip 函数进行压缩和解压，这种操作在一些对传输性能较高的的场景经常会用到。</p><p>程序将会申请 1kb 的随机字符串，然后持续解压。</p><p>为了避免让操作系统陷入假死状态，我们每次都会判断操作系统内存使用率，在达到 60% 的时候，我们将挂起程序；通过访问 8888 端口，将会把内存阈值提高到 85%。</p><p>我们将分析这两个处于相对静态的虚拟快照。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line">import com.sun.management.OperatingSystemMXBean;</span><br><span class="line">import com.sun.net.httpserver.HttpContext;</span><br><span class="line">import com.sun.net.httpserver.HttpServer;</span><br><span class="line"></span><br><span class="line">import java.io.*;</span><br><span class="line">import java.lang.management.ManagementFactory;</span><br><span class="line">import java.net.InetSocketAddress;</span><br><span class="line">import java.util.Random;</span><br><span class="line">import java.util.concurrent.ThreadLocalRandom;</span><br><span class="line">import java.util.zip.GZIPInputStream;</span><br><span class="line">import java.util.zip.GZIPOutputStream;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class LeakExample &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 构造随机的字符串</span><br><span class="line">     */</span><br><span class="line">    public static String randomString(int strLength) &#123;</span><br><span class="line">        Random rnd = ThreadLocalRandom.current();</span><br><span class="line">        StringBuilder ret = new StringBuilder();</span><br><span class="line">        for (int i = 0; i &lt; strLength; i++) &#123;</span><br><span class="line">            boolean isChar = (rnd.nextInt(2) % 2 == 0);</span><br><span class="line">            if (isChar) &#123;</span><br><span class="line">                int choice = rnd.nextInt(2) % 2 == 0 ? 65 : 97;</span><br><span class="line">                ret.append((char) (choice + rnd.nextInt(26)));</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                ret.append(rnd.nextInt(10));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return ret.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static int copy(InputStream input, OutputStream output) throws IOException &#123;</span><br><span class="line">        long count = copyLarge(input, output);</span><br><span class="line">        return count &gt; 2147483647L ? -1 : (int) count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static long copyLarge(InputStream input, OutputStream output) throws IOException &#123;</span><br><span class="line">        byte[] buffer = new byte[4096];</span><br><span class="line">        long count = 0L;</span><br><span class="line"></span><br><span class="line">        int n;</span><br><span class="line">        for (; -1 != (n = input.read(buffer)); count += (long) n) &#123;</span><br><span class="line">            output.write(buffer, 0, n);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static String decompress(byte[] input) throws Exception &#123;</span><br><span class="line">        ByteArrayOutputStream out = new ByteArrayOutputStream();</span><br><span class="line">        copy(new GZIPInputStream(new ByteArrayInputStream(input)), out);</span><br><span class="line">        return new String(out.toByteArray());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static byte[] compress(String str) throws Exception &#123;</span><br><span class="line">        ByteArrayOutputStream bos = new ByteArrayOutputStream();</span><br><span class="line">        GZIPOutputStream gzip = new GZIPOutputStream(bos);</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            gzip.write(str.getBytes());</span><br><span class="line">            gzip.finish();</span><br><span class="line">            byte[] b = bos.toByteArray();</span><br><span class="line">            return b;</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            try &#123; gzip.close(); &#125;catch (Exception ex )&#123;&#125;</span><br><span class="line">            try &#123; bos.close(); &#125;catch (Exception ex )&#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private static OperatingSystemMXBean osmxb = (OperatingSystemMXBean) ManagementFactory.getOperatingSystemMXBean();</span><br><span class="line"></span><br><span class="line">    public static int memoryLoad() &#123;</span><br><span class="line">        double totalvirtualMemory = osmxb.getTotalPhysicalMemorySize();</span><br><span class="line">        double freePhysicalMemorySize = osmxb.getFreePhysicalMemorySize();</span><br><span class="line"></span><br><span class="line">        double value = freePhysicalMemorySize / totalvirtualMemory;</span><br><span class="line">        int percentMemoryLoad = (int) ((1 - value) * 100);</span><br><span class="line">        return percentMemoryLoad;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private static volatile int RADIO = 60;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        HttpServer server = HttpServer.create(new InetSocketAddress(8888), 0);</span><br><span class="line">        HttpContext context = server.createContext(&quot;/&quot;);</span><br><span class="line">        context.setHandler(exchange -&gt; &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                RADIO = 85;</span><br><span class="line">                String response = &quot;OK!&quot;;</span><br><span class="line">                exchange.sendResponseHeaders(200, response.getBytes().length);</span><br><span class="line">                OutputStream os = exchange.getResponseBody();</span><br><span class="line">                os.write(response.getBytes());</span><br><span class="line">                os.close();</span><br><span class="line">            &#125; catch (Exception ex) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        server.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        //1kb</span><br><span class="line">        int BLOCK_SIZE = 1024;</span><br><span class="line">        String str = randomString(BLOCK_SIZE / Byte.SIZE);</span><br><span class="line">        byte[] bytes = compress(str);</span><br><span class="line">        for (; ; ) &#123;</span><br><span class="line">            int percent = memoryLoad();</span><br><span class="line">            if (percent &gt; RADIO) &#123;</span><br><span class="line">                Thread.sleep(1000);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                decompress(bytes);</span><br><span class="line">                Thread.sleep(1);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序将使用下面的命令行进行启动。为了简化问题，这里省略了一些无关的配置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Xmx1G -Xmn1G -XX:+AlwaysPreTouch  -XX:MaxMetaspaceSize=10M -XX:MaxDirectMemorySize=10M -XX:NativeMemoryTracking=detail LeakExample</span><br></pre></td></tr></table></figure><h3 id="3-nmt"><a class="markdownIt-Anchor" href="#3-nmt"></a> 3. NMT</h3><p>首先介绍一下上面的几个 JVM 参数，分别使用 <strong>Xmx、MaxMetaspaceSize、MaxDirectMemorySize</strong> 这三个参数限制了堆、元空间、直接内存的大小。</p><p>然后，使用 <strong>AlwaysPreTouch</strong> 参数：</p><ul><li>作用 服务启动的时候<strong>真实的分配物理内存给jvm</strong>。默认情况下，通过参数指定了 JVM 大小，只有在 JVM 真正使用的时候，才会分配给它。</li><li>如果没有此参数，则jvm启动的时候，分配的只是虚拟内存，当真正使用的时候才会分配物理内存</li><li>如果没有此参数，则代码运行的时候，实时分配物理内存，导致代码运行速度变慢</li><li>如果有此参数，则jvm启动的时候速度会下降很多</li></ul><p>在堆比较大的时候，会加大启动时间，但在这个场景中，我们为了减少内存动态分配的影响，把这个值设置为 True。</p><p>接下来的 NativeMemoryTracking，是用来追踪 Native 内存的使用情况。通过在启动参数上加入 <strong>-XX:NativeMemoryTracking=detail</strong> 就可以启用。使用 jcmd 命令，就可查看内存分配。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jcmd $pid  VM.native_memory summary</span><br></pre></td></tr></table></figure><p>我们在一台 <strong>4GB</strong> 的虚拟机上使用上面的命令。启动程序之后，发现进程使用的内存迅速升到 <strong>2.4GB</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"># jcmd 2154  VM.native_memory summary</span><br><span class="line">2154:</span><br><span class="line">Native Memory Tracking:</span><br><span class="line"></span><br><span class="line">Total: reserved=2370381KB, committed=1071413KB</span><br><span class="line">-                 Java Heap (reserved=1048576KB, committed=1048576KB)</span><br><span class="line">                            (mmap: reserved=1048576KB, committed=1048576KB)</span><br><span class="line"></span><br><span class="line">-                     Class (reserved=1056899KB, committed=4995KB)</span><br><span class="line">                            (classes #432)</span><br><span class="line">                            (malloc=131KB #328)</span><br><span class="line">                            (mmap: reserved=1056768KB, committed=4864KB)</span><br><span class="line"></span><br><span class="line">-                    Thread (reserved=10305KB, committed=10305KB)</span><br><span class="line">                            (thread #11)</span><br><span class="line">                            (stack: reserved=10260KB, committed=10260KB)</span><br><span class="line">                            (malloc=34KB #52)</span><br><span class="line">                            (arena=12KB #18)</span><br><span class="line"></span><br><span class="line">-                      Code (reserved=249744KB, committed=2680KB)</span><br><span class="line">                            (malloc=144KB #502)</span><br><span class="line">                            (mmap: reserved=249600KB, committed=2536KB)</span><br><span class="line"></span><br><span class="line">-                        GC (reserved=2063KB, committed=2063KB)</span><br><span class="line">                            (malloc=7KB #80)</span><br><span class="line">                            (mmap: reserved=2056KB, committed=2056KB)</span><br><span class="line"></span><br><span class="line">-                  Compiler (reserved=138KB, committed=138KB)</span><br><span class="line">                            (malloc=8KB #38)</span><br><span class="line">                            (arena=131KB #5)</span><br><span class="line"></span><br><span class="line">-                  Internal (reserved=789KB, committed=789KB)</span><br><span class="line">                            (malloc=757KB #1272)</span><br><span class="line">                            (mmap: reserved=32KB, committed=32KB)</span><br><span class="line"></span><br><span class="line">-                    Symbol (reserved=1535KB, committed=1535KB)</span><br><span class="line">                            (malloc=983KB #114)</span><br><span class="line">                            (arena=552KB #1)</span><br><span class="line"></span><br><span class="line">-    Native Memory Tracking (reserved=159KB, committed=159KB)</span><br><span class="line">                            (malloc=99KB #1399)</span><br><span class="line">                            (tracking overhead=60KB)</span><br><span class="line"></span><br><span class="line">-               Arena Chunk (reserved=174KB, committed=174KB)</span><br><span class="line">                            (mall</span><br></pre></td></tr></table></figure><p>可惜的是，这个名字让人振奋的工具并不能如它描述的一样，看到我们这种泄漏的场景。下图这点小小的空间，是不能和 2GB 的内存占用相比的。</p><p><img src="/2023/02/17/jvm/image-20230318182216778.png" alt="image-20230318182216778"></p><p>NMT 能看到堆内内存、Code 区域或者使用 unsafe.allocateMemory 和 DirectByteBuffer 申请的堆外内存，虽然是个好工具但问题并不能解决。</p><p>使用 jmap 工具，dump 一份堆快照，然后使用 MAT 分析，依然不能找到这部分内存。</p><h3 id="4-pmap"><a class="markdownIt-Anchor" href="#4-pmap"></a> 4. pmap</h3><p>像是 EhCache 这种缓存框架，提供了多种策略，可以设定将数据存储在非堆上，我们就是要排查这些影响因素。</p><p>如果能够在代码里看到这种可能性最大的代码块，是最好的。</p><p>为了进一步分析问题，我们使用 <strong>pmap</strong> 命令查看进程的内存分配，通过 RSS 升序序排列。</p><p>结果发现除了地址 00000000c0000000 上分配的 1GB 堆以外（也就是我们的堆内存），还有数量非常多的 64M 一块的内存段，还有巨量小的物理内存块映射到不同的虚拟内存段上。</p><p>但到现在为止，我们不知道里面的内容是什么，是通过什么产生的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"># pmap -x 2154  | sort -n -k3</span><br><span class="line">Address           Kbytes     RSS   Dirty Mode  Mapping</span><br><span class="line">---------------- ------- ------- -------</span><br><span class="line">0000000100080000 1048064       0       0 -----   [ anon ]</span><br><span class="line">00007f2d4fff1000      60       0       0 -----   [ anon ]</span><br><span class="line">00007f2d537fb000    8212       0       0 -----   [ anon ]</span><br><span class="line">00007f2d57ff1000      60       0       0 -----   [ anon ]</span><br><span class="line">.....省略N行</span><br><span class="line">00007f2e3c000000   65524   22064   22064 rw---   [ anon ]</span><br><span class="line">00007f2e00000000   65476   22068   22068 rw---   [ anon ]</span><br><span class="line">00007f2e18000000   65476   22072   22072 rw---   [ anon ]</span><br><span class="line">00007f2e30000000   65476   22076   22076 rw---   [ anon ]</span><br><span class="line">00007f2dc0000000   65520   22080   22080 rw---   [ anon ]</span><br><span class="line">00007f2dd8000000   65520   22080   22080 rw---   [ anon ]</span><br><span class="line">00007f2da8000000   65524   22088   22088 rw---   [ anon ]</span><br><span class="line">00007f2e8c000000   65528   22088   22088 rw---   [ anon ]</span><br><span class="line">00007f2e64000000   65520   22092   22092 rw---   [ anon ]</span><br><span class="line">00007f2e4c000000   65520   22096   22096 rw---   [ anon ]</span><br><span class="line">00007f2e7c000000   65520   22096   22096 rw---   [ anon ]</span><br><span class="line">00007f2ecc000000   65520   22980   22980 rw---   [ anon ]</span><br><span class="line">00007f2d84000000   65476   23368   23368 rw---   [ anon ]</span><br><span class="line">00007f2d9c000000  131060   43932   43932 rw---   [ anon ]</span><br><span class="line">00007f2d50000000   57324   56000   56000 rw---   [ anon ]</span><br><span class="line">00007f2d4c000000   65476   64160   64160 rw---   [ anon ]</span><br><span class="line">00007f2d5c000000   65476   64164   64164 rw---   [ anon ]</span><br><span class="line">00007f2d64000000   65476   64164   64164 rw---   [ anon ]</span><br><span class="line">00007f2d54000000   65476   64168   64168 rw---   [ anon ]</span><br><span class="line">00007f2d7c000000   65476   64168   64168 rw---   [ anon ]</span><br><span class="line">00007f2d60000000   65520   64172   64172 rw---   [ anon ]</span><br><span class="line">00007f2d6c000000   65476   64172   64172 rw---   [ anon ]</span><br><span class="line">00007f2d74000000   65476   64172   64172 rw---   [ anon ]</span><br><span class="line">00007f2d78000000   65520   64176   64176 rw---   [ anon ]</span><br><span class="line">00007f2d68000000   65520   64180   64180 rw---   [ anon ]</span><br><span class="line">00007f2d80000000   65520   64184   64184 rw---   [ anon ]</span><br><span class="line">00007f2d58000000   65520   64188   64188 rw---   [ anon ]</span><br><span class="line">00007f2d70000000   65520   64192   64192 rw---   [ anon ]</span><br><span class="line">00000000c0000000 1049088 1049088 1049088 rw---   [ anon ]</span><br><span class="line">total kB         8492740 3511008 3498584</span><br></pre></td></tr></table></figure><p>通过 Google，找到以下资料 Linux glibc &gt;= 2.10 (RHEL 6) malloc may show excessive virtual memory usage) 。</p><p>文章指出造成应用程序大量申请 64M 大内存块的原因是由 Glibc 的一个版本升级引起的，通过 export MALLOC_ARENA_MAX=4 可以解决 VSZ 占用过高的问题。</p><p>虽然这也是一个问题，但却不是我们想要的，因为我们增长的是物理内存，而不是虚拟内存，程序在这一方面表现是正常的。</p><h3 id="5-gdb"><a class="markdownIt-Anchor" href="#5-gdb"></a> 5. gdb</h3><p>非常好奇 64M 或者其他小内存块中是什么内容，接下来可以通过 gdb 工具将其 dump 出来。</p><p>读取 /proc 目录下的 maps 文件，能精准地知晓目前进程的内存分布。</p><p>以下脚本通过传入进程 id，能够将所关联的内存全部 dump 到文件中。</p><p><strong>注意，这个命令会影响服务，要慎用。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pid=$1;grep rw-p /proc/$pid/maps | sed -n &#x27;s/^([0-9a-f]*)-([0-9a-f]*) .*$/1 2/p&#x27; | while read start stop; do gdb --batch --pid $pid -ex &quot;dump memory $1-$start-$stop.dump 0x$start 0x$stop&quot;; done</span><br></pre></td></tr></table></figure><p>这个命令十分霸道，甚至把加载到内存中的 class 文件、堆文件一块给 dump 下来。这是机器的原始内存，大多数文件我们打不开。</p><p><img src="/2023/02/17/jvm/image-20230318182227403.png" alt="image-20230318182227403"></p><p>更多时候，只需要 dump 一部分内存就可以。再次提醒操作会影响服务，注意 dump 的内存块大小，线上一定要慎用。</p><p>我们复制 pman 的一块 64M 内存，比如 00007f2d70000000，然后去掉前面的 0，使用下面代码得到内存块的开始和结束地址。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/2154/maps | grep 7f2d70000000</span><br><span class="line">7f2d6fff1000-7f2d70000000 ---p 00000000 00:00 0 7f2d70000000-7f2d73ffc000 rw-p 00000000 00:00 0</span><br></pre></td></tr></table></figure><p>接下来就 dump 这 64MB 的内存。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdb --batch --pid 2154 -ex &quot;dump memory a.dump 0x7f2d70000000 0x7f2d73ffc000&quot;</span><br></pre></td></tr></table></figure><p>使用 du 命令查看具体的内存块大小，不多不少正好 64M。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># du -h a.dump</span><br><span class="line">64M a.dump</span><br></pre></td></tr></table></figure><p>是时候查看里面的内容了，使用 strings 命令可以看到内存块里一些可以打印的内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># strings -10 a.dump</span><br><span class="line"></span><br><span class="line">0R4f1Qej1ty5GT8V1R8no6T44564wz499E6Y582q2R9h8CC175GJ3yeJ1Q3P5Vt757Mcf6378kM36hxZ5U8uhg2A26T5l7f68719WQK6vZ2BOdH9lH5C7838qf1</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>等等？这些内容不应该在堆里面么？为何还会使用额外的内存进行分配？那么还有什么地方在分配堆外内存呢？</p><p>这种情况，只可能是 native 程序对堆外内存的操作。</p><h3 id="6-perf"><a class="markdownIt-Anchor" href="#6-perf"></a> 6. perf</h3><p>下面介绍一个神器 perf，除了能够进行一些性能分析，它还能帮助我们找到相应的 native 调用。这么突出的堆外内存使用问题，肯定能找到相应的调用函数。</p><p>使用 perf record -g -p 2154 开启监控栈函数调用，然后访问服务器的 8888 端口，这将会把内存使用的阈值增加到 85%，我们的程序会逐渐把这部分内存占满，你可以手工观察这个过程。</p><p>perf 运行一段时间后 Ctrl+C 结束，会生成一个文件 perf.data。</p><p>执行 perf report -i perf.data 查看报告。</p><p><img src="/2023/02/17/jvm/image-20230318182257689.png" alt="image-20230318182257689"></p><p>如图，一般第三方 JNI 程序，或者 JDK 内的模块，都会调用相应的本地函数，在 Linux 上，这些函数库的后缀都是 so。</p><p>我们依次浏览用的可疑资源，发现了“<a href="http://libzip.so">libzip.so</a>”，还发现了不少相关的调用。搜索 zip（输入 / 进入搜索模式），结果如下：</p><p><img src="/2023/02/17/jvm/image-20230318182309649.png" alt="image-20230318182309649"></p><p>查看 JDK 代码，发现 bzip 大量使用了 native  方法。也就是说，有大量内存的申请和销毁，是在堆外发生的。</p><p><img src="/2023/02/17/jvm/image-20230318182320080.png" alt="image-20230318182320080"></p><p>进程调用了Java_java_util_zip_Inflater_inflatBytes() 申请了内存，却没有调用 Deflater 释放内存。与 pmap 内存地址相比对，确实是 zip 在搞鬼。</p><h3 id="7-gperftools"><a class="markdownIt-Anchor" href="#7-gperftools"></a> 7. gperftools</h3><p>google 还有一个类似的、非常好用的工具，叫做 gperftools，我们主要用到它的 Heap Profiler，功能更加强大。</p><p>它的启动方式有点特别，安装成功之后，你只需要输出两个环境变量即可。</p><p>mkdir -p /opt/test<br>export LD_PRELOAD=/usr/lib64/libtcmalloc.so<br>export HEAPPROFILE=/opt/test/heap</p><p>在同一个终端，再次启动我们的应用程序，可以看到内存申请动作都被记录到了 opt 目录下的 test 目录。</p><p><img src="/2023/02/17/jvm/image-20230318182333976.png" alt="image-20230318182333976"></p><p>接下来，我们就可以使用 pprof 命令分析这些文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/test</span><br><span class="line">pprof -text *heap  | head -n 200</span><br></pre></td></tr></table></figure><p>使用这个工具，能够一眼追踪到申请内存最多的函数。Java_java_util_zip_Inflater_init 这个函数立马就被发现了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Total: 25205.3 MB</span><br><span class="line"> 20559.2  81.6%  81.6%  20559.2  81.6% inflateBackEnd</span><br><span class="line">  4487.3  17.8%  99.4%   4487.3  17.8% inflateInit2_</span><br><span class="line">    75.7   0.3%  99.7%     75.7   0.3% os::malloc@8bbaa0</span><br><span class="line">    70.3   0.3%  99.9%   4557.6  18.1% Java_java_util_zip_Inflater_init</span><br><span class="line">     7.1   0.0% 100.0%      7.1   0.0% readCEN</span><br><span class="line">     3.9   0.0% 100.0%      3.9   0.0% init</span><br><span class="line">     1.1   0.0% 100.0%      1.1   0.0% os::malloc@8bb8d0</span><br><span class="line">     0.2   0.0% 100.0%      0.2   0.0% _dl_new_object</span><br><span class="line">     0.1   0.0% 100.0%      0.1   0.0% __GI__dl_allocate_tls</span><br><span class="line">     0.1   0.0% 100.0%      0.1   0.0% _nl_intern_locale_data</span><br><span class="line">     0.0   0.0% 100.0%      0.0   0.0% _dl_check_map_versions</span><br><span class="line">     0.0   0.0% 100.0%      0.0   0.0% __GI___strdup</span><br><span class="line">     0.0   0.0% 100.0%      0.1   0.0% _dl_map_object_deps</span><br><span class="line">     0.0   0.0% 100.0%      0.0   0.0% nss_parse_service_list</span><br><span class="line">     0.0   0.0% 100.0%      0.0   0.0% __new_exitfn</span><br><span class="line">     0.0   0.0% 100.0%      0.0   0.0% getpwuid</span><br><span class="line">     0.0   0.0% 100.0%      0.0   0.0% expand_dynamic_string_token</span><br></pre></td></tr></table></figure><h3 id="8-解决"><a class="markdownIt-Anchor" href="#8-解决"></a> 8. 解决</h3><p>这就是我们模拟内存泄漏的整个过程，到此问题就解决了。</p><p>GZIPInputStream 使用 Inflater 申请堆外内存、Deflater 释放内存，调用 close() 方法来主动释放。</p><p>如果忘记关闭，Inflater 对象的生命会延续到下一次 GC，有一点类似堆内的弱引用。在此过程中，堆外内存会一直增长。</p><p>把 decompress 函数改成如下代码，重新编译代码后观察，问题解决。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public static String decompress(byte[] input) throws Exception &#123;</span><br><span class="line">        ByteArrayOutputStream out = new ByteArrayOutputStream();</span><br><span class="line">        GZIPInputStream gzip = new GZIPInputStream(new ByteArrayInputStream(input));</span><br><span class="line">        try &#123;</span><br><span class="line">            copy(gzip, out);</span><br><span class="line">            return new String(out.toByteArray());</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            try&#123; gzip.close(); &#125;catch (Exception ex)&#123;&#125;</span><br><span class="line">            try&#123; out.close(); &#125;catch (Exception ex)&#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="9-小结"><a class="markdownIt-Anchor" href="#9-小结"></a> 9. 小结</h3><p>本课时使用了非常多的工具和命令来进行堆外内存的排查，可以看到，除了使用 jmap 获取堆内内存，还对堆外内存的获取也有不少办法。</p><p>现在，我们可以把堆外内存进行更加细致地划分了。</p><p>元空间属于堆外内存，主要是方法区和常量池的存储之地，使用数“MaxMetaspaceSize”可以限制它的大小，我们也能观测到它的使用。</p><p>直接内存主要是通过 DirectByteBuffer 申请的内存，可以使用参数“MaxDirectMemorySize”来限制它的大小（参考第 10 课时）。</p><p>其他堆外内存，主要是指使用了 Unsafe 或者其他 JNI 手段直接直接申请的内存。这种情况，就没有任何参数能够阻挡它们，要么靠它自己去释放一些内存，要么等待操作系统对它的审判了。</p><p>还有一种情况，和内存的使用无关，但是也会造成内存不正常使用，那就是使用了 Process 接口，直接调用了外部的应用程序，这些程序对操作系统的内存使用一般是不可预知的。</p><p>本课时介绍的一些工具，很多高级研发，包括一些面试官，也是不知道的；即使了解这个过程，不实际操作一遍，也很难有深刻的印象。通过这个例子，你可以看到一个典型的堆外内存问题的排查思路。</p><p>堆外内存的泄漏是非常严重的，它的排查难度高、影响大，甚至会造成宿主机的死亡。在排查内存问题时，不要忘了这一环。</p><h2 id="cpu过高排查"><a class="markdownIt-Anchor" href="#cpu过高排查"></a> CPU过高排查</h2><p><strong>排查过程</strong></p><ul><li>使用<code>top</code>查找进程id</li><li>使用<code>top -Hp &lt;pid&gt;</code>查找进程中耗cpu比较高的线程id</li><li>使用<code>printf %x &lt;pid&gt;</code>将线程id十进制转十六进制</li><li>使用<code> jstack -pid | grep -A 20 &lt;pid&gt;</code>过滤出线程id锁关联的栈信息</li><li>根据栈信息中的调用链定位业务代码</li></ul><p>案例代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public class CPUSoaring &#123;</span><br><span class="line">        public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">                Thread thread1 = new Thread(new Runnable()&#123;</span><br><span class="line">                        @Override</span><br><span class="line">                        public void run() &#123;</span><br><span class="line">                                for (;;)&#123;</span><br><span class="line">                                      System.out.println(&quot;I am children-thread1&quot;);</span><br><span class="line">                                &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;,&quot;children-thread1&quot;);</span><br><span class="line">                </span><br><span class="line">                 Thread thread2 = new Thread(new Runnable()&#123;</span><br><span class="line">                        @Override</span><br><span class="line">                        public void run() &#123;</span><br><span class="line">                                for (;;)&#123;</span><br><span class="line">                                      System.out.println(&quot;I am children-thread2&quot;);</span><br><span class="line">                                &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;,&quot;children-thread2&quot;);</span><br><span class="line">                </span><br><span class="line">                thread1.start();</span><br><span class="line">                thread2.start();</span><br><span class="line">                System.err.println(&quot;I am is main thread!!!!!!!!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>第一步：首先通过<strong>top</strong>命令可以查看到id为<strong>3806</strong>的进程所占的CPU最高：</p><p><img src="/2023/02/17/jvm/image-20230318182345106.png" alt="image-20230318182345106"></p></li><li><p>第二步：然后通过<strong>top -Hp pid</strong>命令，找到占用CPU最高的线程：</p><p><img src="/2023/02/17/jvm/image-20230318182352411.png" alt="image-20230318182352411"></p></li><li><p>第三步：接着通过：<strong>printf ‘%x\n’ tid</strong>命令将线程的tid转换为十六进制：xid：</p><p><img src="/2023/02/17/jvm/image-20230318182401340.png" alt="image-20230318182401340"></p></li><li><p>第四步：最后通过：<strong>jstack pid|grep xid -A 30</strong>命令就是输出线程的堆栈信息，线程所在的位置：</p><p><img src="/2023/02/17/jvm/image-20230318182410846.png" alt="image-20230318182410846"></p></li><li><p>第五步：还可以通过<strong>jstack -l pid &gt; 文件名称.txt</strong> 命令将线程堆栈信息输出到文件，线下查看。</p><p>这就是一个CPU飙高的排查过程，目的就是要<strong>找到占用CPU最高的线程所在的位置</strong>，然后就是<strong>review</strong>你的代码，定位到问题的所在。使用Arthas的工具排查也是一样的，首先要使用top命令找到占用CPU最高的Java进程，然后使用Arthas进入该进程内，<strong>使用dashboard命令排查占用CPU最高的线程。</strong>，最后通过<strong>thread</strong>命令线程的信息。</p></li></ul><h2 id="oom异常排查"><a class="markdownIt-Anchor" href="#oom异常排查"></a> OOM异常排查</h2><p>OOM的异常排查也比较简单，首先服务上线的时候，要先设置这两个参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=$&#123;目录&#125;</span><br></pre></td></tr></table></figure><p>指定项目出现OOM异常的时候自动导出堆转储文件，然后通过内存分析工具（<strong>Visual VM</strong>）来进行线下的分析。</p><p>首先我们来聊一聊，哪些原因会导致OOM异常，站在JVM的分区的角度：</p><ul><li><strong>Java堆</strong></li><li><strong>方法区</strong></li><li><strong>虚拟机栈</strong></li><li><strong>本地方法栈</strong></li><li><strong>程序计数器</strong></li><li><strong>直接内存</strong></li></ul><p>只有<strong>程序计数器</strong>区域不会出现OOM，在Java 8及以上的<strong>元空间</strong>（本地内存）都会出现OOM。</p><p>而站在程序代码的角度来看，总结了大概有以下几点原因会导致OOM异常：</p><ul><li><strong>内存泄露</strong></li><li><strong>对象过大、过多</strong></li><li><strong>方法过长</strong></li><li><strong>过度使用代理框架，生成大量的类信息</strong></li></ul><p>接下来我们屋来看看OOM的排查，出现OOM异常后dump出了堆转储文件，然后打开jdk自带的Visual VM工具，导入堆转储文件，首先我使用的OOM异常代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">class OOM &#123;</span><br><span class="line"></span><br><span class="line">        static class User&#123;</span><br><span class="line">                private String name;</span><br><span class="line">                private int age;</span><br><span class="line"></span><br><span class="line">                public User(String name, int age)&#123;</span><br><span class="line">                        this.name = name;</span><br><span class="line">                        this.age = age;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">                List&lt;User&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">                for (int i = 0; i &lt; Integer.MAX_VALUE; i++) &#123;</span><br><span class="line">                        Thread.sleep(1000);</span><br><span class="line">                        User user = new User(&quot;zhangsan&quot;+i,i);</span><br><span class="line">                        list.add(user);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码很简单，就是往集合里面不断地add对象，带入堆转储文件后，在类和实例那栏就可以看到实例最多的类：</p><p><img src="/2023/02/17/jvm/image-20230318182425795.png" alt="image-20230318182425795"></p><p>这样就找到导致OOM异常的类，还可以通过下面的方法查看导致OOM异常的线程堆栈信息，找到对应异常的代码段。</p><p><img src="/2023/02/17/jvm/image-20230318182437341.png" alt="image-20230318182437341"></p><p><img src="/2023/02/17/jvm/image-20230318182458819.png" alt="image-20230318182458819"></p><p>上面的方法是排查已经出现了OOM异常的方法，肯定是防线的最后一步，那么在此之前怎么防止出现OOM异常呢？</p><p>一般大厂都会有自己的监控平台，能够实施的<strong>监控测试环境、预览环境、线上实施的服务健康状况（CPU、内存）</strong> 等信息，对于频繁GC，并且GC后内存的回收率很差的，就要引起我们的注意了。</p><p>因为一般方法的长度合理，95%以上的对象都是朝生夕死，在<strong>Minor GC</strong>后只剩少量的存活对象，所以在代码层面上应该避免<strong>方法过长、大对象</strong>的现象。</p><p>每次自己写完代码，自己检查后，都可以提交给比自己高级别的工程师<strong>review</strong>自己的代码，就能及时的发现代码的问题，基本上代码没问题，百分之九十以上的问题都能避免，这也是大厂注重代码质量，并且时刻<strong>review</strong>代码的习惯。</p><h2 id="jvisualvm"><a class="markdownIt-Anchor" href="#jvisualvm"></a> Jvisualvm</h2><p>项目频繁YGC 、FGC问题排查</p><h3 id="内存问题"><a class="markdownIt-Anchor" href="#内存问题"></a> 内存问题</h3><p>对象内存占用、实例个数监控</p><p><img src="/2023/02/17/jvm/image-20230318182515196.png" alt="image-20230318182515196"></p><p>对象内存占用、年龄值监控</p><p><img src="/2023/02/17/jvm/image-20230318182530350.png" alt="image-20230318182530350"></p><p>通过上面两张图发现这些对象占用内存比较大而且存活时间也是比较常，所以survivor 中的空间被这些对象占用，而如果缓存再次刷新则会创建同样大小对象来替换老数据，这时发现eden内存空间不足，就会触发yonggc 如果yonggc 结束后发现eden空间还是不够则会直接放到老年代，所以这样就产生了大对象的提前晋升，导致fgc增加……</p><p><strong>优化办法</strong>：优化两个缓存对象，将缓存对象大小减小。优化一下两个对象，缓存关键信息！</p><h3 id="cpu耗时问题排查"><a class="markdownIt-Anchor" href="#cpu耗时问题排查"></a> CPU耗时问题排查</h3><p>Cpu使用耗时监控：</p><p><img src="/2023/02/17/jvm/image-20230318182543789.png" alt="image-20230318182543789"></p><p>耗时、调用次数监控：</p><p><img src="/2023/02/17/jvm/image-20230318182553248.png" alt="image-20230318182553248"></p><p>从上面监控图可以看到主要耗时还是在网络请求，没有看到具体业务代码消耗过错cpu……</p><h2 id="调优参数"><a class="markdownIt-Anchor" href="#调优参数"></a> 调优参数</h2><h3 id="堆"><a class="markdownIt-Anchor" href="#堆"></a> 堆</h3><ul><li>-Xms1024m 设置堆的初始大小</li><li>-Xmx1024m 设置堆的最大大小</li><li>-XX:NewSize=1024m 设置年轻代的初始大小</li><li>-XX:MaxNewSize=1024m 设置年轻代的最大值</li><li>-XX:SurvivorRatio=8 Eden和S区的比例</li><li>-XX:NewRatio=4 设置老年代和新生代的比例</li><li>-XX:MaxTenuringThreshold=10 设置晋升老年代的年龄条件</li></ul><h3 id="栈"><a class="markdownIt-Anchor" href="#栈"></a> 栈</h3><ul><li>-Xss128k</li></ul><h3 id="元空间-2"><a class="markdownIt-Anchor" href="#元空间-2"></a> 元空间</h3><ul><li>-XX:MetasapceSize=200m 设置初始元空间大小</li><li>-XX:MaxMatespaceSize=200m 设置最大元空间大小 默认无限制</li></ul><h3 id="直接内存"><a class="markdownIt-Anchor" href="#直接内存"></a> 直接内存</h3><ul><li>-XX:MaxDirectMemorySize 设置直接内存的容量，默认与堆最大值一样</li></ul><h3 id="内存收缩"><a class="markdownIt-Anchor" href="#内存收缩"></a> 内存收缩</h3><ul><li>-XX:MaxHeapFreeRatio 空闲内存达到多少比值时，开始收缩JVM进程占用的内存空间。默认应该是70%，若当java进程占用内存过大，该值应该适当调小。</li><li>-XX:MinHeapFreeRatio 空闲内存最少保留的比例值。我这里设置的是8%。此参数意思是无论如何进程内存会保留一定比例的空闲内存，进程内存收缩过程中，剩余内存达到这个阈值后，就会停止收缩。</li></ul><h3 id="日志"><a class="markdownIt-Anchor" href="#日志"></a> 日志</h3><ul><li>-Xloggc:/opt/app/ard-user/ard-user-gc-%t.log 设置日志目录和日志名称</li><li>-XX:+UseGCLogFileRotation 开启滚动生成日志</li><li>-XX:NumberOfGCLogFiles=5 滚动GC日志文件数，默认0，不滚动</li><li>-XX:GCLogFileSize=20M GC文件滚动大小，需开 UseGCLogFileRotation</li><li>-XX:+PrintGCDetails 开启记录GC日志详细信息（包括GC类型、各个操作使用的时间）,并且在程序运行结束打印出JVM的内存占用情况</li><li>-XX:+ PrintGCDateStamps 记录系统的GC时间</li><li>-XX:+PrintGCCause 产生GC的原因(默认开启)</li></ul><h3 id="gc"><a class="markdownIt-Anchor" href="#gc"></a> GC</h3><h4 id="serial垃圾收集器新生代"><a class="markdownIt-Anchor" href="#serial垃圾收集器新生代"></a> Serial垃圾收集器（新生代）</h4><p>开启</p><ul><li>-XX:+UseSerialGC</li></ul><p>关闭：</p><ul><li>-XX:-UseSerialGC //新生代使用Serial 老年代则使用SerialOld</li></ul><h4 id="parallel-scavenge收集器新生代开启"><a class="markdownIt-Anchor" href="#parallel-scavenge收集器新生代开启"></a> Parallel Scavenge收集器（新生代）开启</h4><ul><li>-XX:+UseParallelOldGC 关闭</li><li>-XX:-UseParallelOldGC 新生代使用功能Parallel Scavenge 老年代将会使用Parallel Old收集器</li></ul><h4 id="parallelol垃圾收集器老年代开启"><a class="markdownIt-Anchor" href="#parallelol垃圾收集器老年代开启"></a> ParallelOl垃圾收集器（老年代）开启</h4><ul><li>-XX:+UseParallelGC 关闭</li><li>-XX:-UseParallelGC 新生代使用功能Parallel Scavenge 老年代将会使用Parallel Old收集器</li></ul><h4 id="parnew垃圾收集器新生代开启"><a class="markdownIt-Anchor" href="#parnew垃圾收集器新生代开启"></a> ParNew垃圾收集器（新生代）开启</h4><ul><li>-XX:+UseParNewGC 关闭</li><li>-XX:-UseParNewGC //新生代使用功能ParNew 老年代则使用功能CMS</li></ul><h4 id="cms垃圾收集器老年代开启"><a class="markdownIt-Anchor" href="#cms垃圾收集器老年代开启"></a> CMS垃圾收集器（老年代）开启</h4><ul><li>-XX:+UseConcMarkSweepGC 关闭</li><li>-XX:-UseConcMarkSweepGC</li><li>-XX:MaxGCPauseMillis GC停顿时间，垃圾收集器会尝试用各种手段达到这个时间，比如减小年轻代</li><li>-XX:+UseCMSCompactAtFullCollection 用于在CMS收集器不得不进行FullGC时开启内存碎片的合并整理过程，由于这个内存整理必须移动存活对象，（在Shenandoah和ZGC出现前）是无法并发的</li><li>-XX：CMSFullGCsBefore-Compaction 多少次FullGC之后压缩一次，默认值为0，表示每次进入FullGC时都进行碎片整理）</li><li>-XX:CMSInitiatingOccupancyFraction 当老年代使用达到该比例时会触发FullGC，默认是92</li><li>-XX:+UseCMSInitiatingOccupancyOnly 这个参数搭配上面那个用，表示是不是要一直使用上面的比例触发FullGC，如果设置则只会在第一次FullGC的时候使用-XX:CMSInitiatingOccupancyFraction的值，之后会进行自动调整</li><li>-XX:+CMSScavengeBeforeRemark 在FullGC前启动一次MinorGC，目的在于减少老年代对年轻代的引用，降低CMSGC的标记阶段时的开销，一般CMS的GC耗时80%都在标记阶段</li><li>-XX:+CMSParallellnitialMarkEnabled 默认情况下初始标记是单线程的，这个参数可以让他多线程执行，可以减少STW</li><li>-XX:+CMSParallelRemarkEnabled 使用多线程进行重新标记，目的也是为了减少STW</li></ul><h4 id="g1垃圾收集器开启"><a class="markdownIt-Anchor" href="#g1垃圾收集器开启"></a> G1垃圾收集器开启</h4><ul><li>-XX:+UseG1GC 关闭</li><li>-XX:-UseG1GC</li><li>-XX：G1HeapRegionSize 设置每个Region的大小，取值范围为1MB～32MB</li><li>-XX：MaxGCPauseMillis 设置垃圾收集器的停顿时间，默认值是200毫秒，通常把期望停顿时间设置为一两百毫秒或者两三百毫秒会是比较合理的</li></ul><hr><p>堆 gc频次正常 时间正常。 出现内存泄漏是什么问题？</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一jvm内存模型及其各部分的作用&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#一jvm内存模型及其各部分的作用&quot;&gt;&lt;/a&gt; 一.JVM内存模型及其各部分的作用&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/2023/02/17/jvm/ima</summary>
      
    
    
    
    <category term="jvm" scheme="http://cloud-tour.github.io/categories/jvm/"/>
    
    
    <category term="java" scheme="http://cloud-tour.github.io/tags/java/"/>
    
    <category term="jvm" scheme="http://cloud-tour.github.io/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>juc</title>
    <link href="http://cloud-tour.github.io/2023/02/17/juc/"/>
    <id>http://cloud-tour.github.io/2023/02/17/juc/</id>
    <published>2023-02-17T13:02:02.380Z</published>
    <updated>2023-03-19T10:20:27.353Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1进程和线程"><a class="markdownIt-Anchor" href="#1进程和线程"></a> 1.进程和线程</h1><p><strong>进程</strong></p><ul><li>进程就是用来加载指令、管理内存、管理 IO 的</li><li>当一个程序被运行，从磁盘加载这个程序的代码至内存，这时就开启了一个进程。</li></ul><p><strong>线程</strong></p><ul><li>一个进程之内可以分为一到多个线程。</li><li>一个线程就是一个指令流，将指令流中的一条条指令以一定的顺序交给 CPU 执行</li><li>Java 中，线程作为最小调度单位，进程作为资源分配的最小单位。 在 windows 中进程是不活动的，只是作为线程的容器</li></ul><p><strong>区别</strong></p><ul><li>进程基本上相互独立的，而线程存在于进程内，是进程的一个子集</li><li>进程拥有共享的资源，如内存空间等，供其内部的线程共享</li><li>进程间通信较为复杂<ul><li>同一台计算机的进程通信称为 IPC（Inter-process communication）</li><li>不同计算机之间的进程通信，需要通过网络，并遵守共同的协议，例如 HTTP</li></ul></li><li>线程通信相对简单，因为它们共享进程内的内存，一个例子是多个线程可以访问同一个共享变量</li><li>线程更轻量，线程上下文切换成本一般上要比进程上下文切换低</li></ul><p><strong>其他区别</strong></p><ul><li>1、因为进程拥有独立的堆栈空间和数据段，所以每当启动一个新的进程必须分配给它独立的地址空间，建立众多的数据表来维护它的代码段、堆栈段和数据段，这对于多进程来说十分“奢侈”，系统开销比较大，而线程不一样，线程拥有独立的堆栈空间，但是共享数据段，它们彼此之间使用相同的地址空间，共享大部分数据，比进程更节俭，开销比较小，切换速度也比进程快，效率高，但是正由于进程之间独立的特点，使得进程安全性比较高，也因为进程有独立的地址空间，一个进程崩溃后，在保护模式下不会对其它进程产生影响，而线程只是一个进程中的不同执行路径。一个线程死掉就等于整个进程死掉。</li><li>2、体现在通信机制上面，正因为进程之间互不干扰，相互独立，进程的通信机制相对很复杂，譬如管道，信号，消息队列，共享内存，套接字等通信机制，而线程由于共享数据段所以通信机制很方便。。</li><li>3、体现在CPU系统上面，线程使得CPU系统更加有效，因为操作系统会保证当线程数不大于CPU数目时，不同的线程运行于不同的CPU上。</li><li>4、体现在程序结构上，举一个简明易懂的列子：当我们使用进程的时候，我们不自主的使用if else嵌套来判断pid，使得程序结构繁琐，但是当我们使用线程的时候，基本上可以甩掉它，当然程序内部执行功能单元需要使用的时候还是要使用，所以线程对程序结构的改善有很大帮助。</li></ul><h1 id="2synchronized原理"><a class="markdownIt-Anchor" href="#2synchronized原理"></a> 2.synchronized原理</h1><p><strong>java对象头</strong></p><p>普通对象</p><p><img src="/2023/02/17/juc/image-20230213132614988.png" alt="image-20230213132614988"></p><p>数组对象</p><p><img src="/2023/02/17/juc/image-20230213132639252.png" alt="image-20230213132639252"></p><p>64 位虚拟机 Mark Word</p><p><img src="/2023/02/17/juc/image-20230213132702541.png" alt="image-20230213132702541"></p><h2 id="monitor"><a class="markdownIt-Anchor" href="#monitor"></a> Monitor</h2><p>Monitor 被翻译为<strong>监视器</strong>或<strong>管程</strong></p><p>每个 Java 对象都可以关联一个 Monitor 对象，如果使用 synchronized 给对象上锁（重量级）之后，该对象头的 Mark Word 中就被设置指向 Monitor 对象的指针</p><p>Monitor 结构如下</p><p><img src="/2023/02/17/juc/image-20230213133120665.png" alt="image-20230213133120665"></p><ul><li>刚开始 Monitor 中 Owner 为 null</li><li>当 Thread-2 执行 synchronized(obj) 就会将 Monitor 的所有者 Owner 置为 Thread-2，Monitor中只能有一 个 Owner</li><li>在 Thread-2 上锁的过程中，如果 Thread-3，Thread-4，Thread-5 也来执行 synchronized(obj)，就会进入 EntryList BLOCKED</li><li>Thread-2 执行完同步代码块的内容，然后唤醒 EntryList 中等待的线程来竞争锁，竞争的时是非公平的</li><li>图中 WaitSet 中的 Thread-0，Thread-1 是之前获得过锁，但条件不满足进入 WAITING 状态的线程，后面讲 wait-notify 时会分析</li></ul><blockquote><p><strong>注意：</strong></p><ul><li>synchronized 必须是进入同一个对象的 monitor 才有上述的效果</li><li>不加 synchronized 的对象不会关联监视器，不遵从以上规则</li></ul></blockquote><h2 id="轻量级锁"><a class="markdownIt-Anchor" href="#轻量级锁"></a> 轻量级锁</h2><p>轻量级锁的使用场景：如果一个对象虽然有多线程要加锁，但加锁的时间是错开的（也就是没有竞争），那么可以 使用轻量级锁来优化。</p><p>轻量级锁对使用者是透明的，即语法仍然是 synchronized</p><p>假设有两个方法同步块，利用同一个对象加锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="keyword">synchronized</span>( obj ) &#123;</span><br><span class="line"> <span class="comment">// 同步块 A</span></span><br><span class="line"> method2();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="keyword">synchronized</span>( obj ) &#123;</span><br><span class="line"> <span class="comment">// 同步块 B</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>创建锁记录（Lock Record）对象，每个线程都的栈帧都会包含一个锁记录的结构，内部可以存储锁定对象的 Mark Word</li></ul><p><img src="/2023/02/17/juc/image-20230213135229761.png" alt="image-20230213135229761"></p><ul><li>让锁记录中 Object reference 指向锁对象，并尝试用 cas 替换 Object 的 Mark Word，将 Mark Word 的值存 入锁记录</li></ul><p><img src="/2023/02/17/juc/image-20230213135248243.png" alt="image-20230213135248243"></p><ul><li><p>如果 cas 替换成功，对象头中存储了 锁记录地址和状态 00 ，表示由该线程给对象加锁，这时图示如下</p><p><img src="/2023/02/17/juc/image-20230213135309641.png" alt="image-20230213135309641"></p></li><li><p>如果 cas 失败，有两种情况</p><ul><li>如果是其它线程已经持有了该 Object 的轻量级锁，这时表明有竞争，进入锁膨胀过程</li><li>如果是自己执行了 synchronized 锁重入，那么再添加一条 Lock Record 作为重入的计数</li></ul></li></ul><p><img src="/2023/02/17/juc/image-20230213135350177.png" alt="image-20230213135350177"></p><ul><li>当退出 synchronized 代码块（解锁时）如果有取值为 null 的锁记录，表示有重入，这时重置锁记录，表示重 入计数减一</li></ul><p><img src="/2023/02/17/juc/image-20230213135421083.png" alt="image-20230213135421083"></p><ul><li>当退出 synchronized 代码块（解锁时）锁记录的值不为 null，这时使用 cas 将 Mark Word 的值恢复给对象头<ul><li>成功，则解锁成功</li><li>失败，说明轻量级锁进行了锁膨胀或已经升级为重量级锁，进入重量级锁解锁流程</li></ul></li></ul><h2 id="锁膨胀"><a class="markdownIt-Anchor" href="#锁膨胀"></a> 锁膨胀</h2><p>如果在尝试加轻量级锁的过程中，CAS 操作无法成功，这时一种情况就是有其它线程为此对象加上了轻量级锁（有 竞争），这时需要进行锁膨胀，将轻量级锁变为重量级锁。</p><ul><li>当 Thread-1 进行轻量级加锁时，Thread-0 已经对该对象加了轻量级锁</li></ul><p><img src="/2023/02/17/juc/image-20230213140303379.png" alt="image-20230213140303379"></p><ul><li>这时 Thread-1 加轻量级锁失败，进入锁膨胀流程<ul><li>即为 Object 对象申请 Monitor 锁，让 Object 指向重量级锁地址</li><li>然后自己进入 Monitor 的 EntryList BLOCKED</li></ul></li></ul><p><img src="/2023/02/17/juc/image-20230213140331233.png" alt="image-20230213140331233"></p><ul><li>当 Thread-0 退出同步块解锁时，使用 cas 将 Mark Word 的值恢复给对象头，失败。这时会进入重量级解锁 流程，即按照 Monitor 地址找到 Monitor 对象，设置 Owner 为 null，唤醒 EntryList 中 BLOCKED 线程</li></ul><h2 id="自旋优化"><a class="markdownIt-Anchor" href="#自旋优化"></a> 自旋优化</h2><p>重量级锁竞争的时候，还可以使用自旋来进行优化，如果当前线程自旋成功（即这时候持锁线程已经退出了同步 块，释放了锁），这时当前线程就可以避免阻塞。</p><p>自旋重试成功的情况</p><p><img src="/2023/02/17/juc/image-20230213140510345.png" alt="image-20230213140510345"></p><p>自旋重试失败的情况</p><p><img src="/2023/02/17/juc/image-20230213140526827.png" alt="image-20230213140526827"></p><ul><li>自旋会占用 CPU 时间，单核 CPU 自旋就是浪费，多核 CPU 自旋才能发挥优势。</li><li>在 Java 6 之后自旋锁是自适应的，比如对象刚刚的一次自旋操作成功过，那么认为这次自旋成功的可能性会 高，就多自旋几次；反之，就少自旋甚至不自旋，总之，比较智能。</li><li>Java 7 之后不能控制是否开启自旋功能</li></ul><h2 id="偏向锁"><a class="markdownIt-Anchor" href="#偏向锁"></a> 偏向锁</h2><p>轻量级锁在没有竞争时（就自己这个线程），每次重入仍然需要执行 CAS 操作。</p><p>Java 6 中引入了偏向锁来做进一步优化：只有第一次使用 CAS 将线程 ID 设置到对象的 Mark Word 头，之后发现 这个线程 ID 是自己的就表示没有竞争，不用重新 CAS。以后只要不发生竞争，这个对象就归该线程所有</p><p><strong>偏向状态</strong></p><p>对象头格式</p><p><img src="/2023/02/17/juc/image-20230213141342962.png" alt="image-20230213141342962"></p><p>一个对象创建时：</p><ul><li>如果开启了偏向锁（默认开启），那么对象创建后，markword 值为 0x05 即最后 3 位为 101，这时它的 thread、epoch、age 都为 0</li><li>偏向锁是默认是延迟的，不会在程序启动时立即生效，如果想避免延迟，可以加 VM 参数 - XX:BiasedLockingStartupDelay=0 来禁用延迟</li><li>如果没有开启偏向锁，那么对象创建后，markword 值为 0x01 即最后 3 位为 001，这时它的 hashcode、 age 都为 0，第一次用到 hashcode 时才会赋值</li></ul><h1 id="3wait-notify原理"><a class="markdownIt-Anchor" href="#3wait-notify原理"></a> 3.wait、notify原理</h1><p><img src="/2023/02/17/juc/image-20230213142224159.png" alt="image-20230213142224159"></p><ul><li>Owner 线程发现条件不满足，调用 wait 方法，即可进入 WaitSet 变为 WAITING 状态</li><li>BLOCKED 和 WAITING 的线程都处于阻塞状态，不占用 CPU 时间片</li><li>BLOCKED 线程会在 Owner 线程释放锁时唤醒</li><li>WAITING 线程会在 Owner 线程调用 notify 或 notifyAll 时唤醒，但唤醒后并不意味者立刻获得锁，仍需进入 EntryList 重新竞争</li></ul><h1 id="4park-unpark-原理"><a class="markdownIt-Anchor" href="#4park-unpark-原理"></a> 4.park unpark 原理</h1><p>每个线程都有自己的一个 Parker 对象，由三部分组成 _counter ， _cond 和 _mutex 打个比喻 _</p><ul><li>线程就像一个旅人，Parker 就像他随身携带的背包，条件变量就好比背包中的帐篷。_counter 就好比背包中 的备用干粮（0 为耗尽，1 为充足）</li><li>调用 park 就是要看需不需要停下来歇息<ul><li>如果备用干粮耗尽，那么钻进帐篷歇息</li><li>如果备用干粮充足，那么不需停留，继续前进</li></ul></li><li>调用 unpark，就好比令干粮充足<ul><li>如果这时线程还在帐篷，就唤醒让他继续前进</li><li>如果这时线程还在运行，那么下次他调用 park 时，仅是消耗掉备用干粮，不需停留继续前进<ul><li>因为背包空间有限，多次调用 unpark 仅会补充一份备用干粮</li></ul></li></ul></li></ul><h1 id="5reentrantlock"><a class="markdownIt-Anchor" href="#5reentrantlock"></a> 5.ReentrantLock</h1><p>相对于 synchronized 它具备如下特点</p><ul><li>可中断</li><li>可以设置超时时间</li><li>可以设置为公平锁</li><li>支持多个条件变量</li><li>与 synchronized 一样，都支持可重入</li></ul><p>基本用法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取锁</span></span><br><span class="line">reentrantLock.lock();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"> <span class="comment">// 临界区</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"> <span class="comment">// 释放锁</span></span><br><span class="line"> reentrantLock.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="条件变量"><a class="markdownIt-Anchor" href="#条件变量"></a> 条件变量</h2><p>synchronized 中也有条件变量，就是我们讲原理时那个 waitSet 休息室，当条件不满足时进入 waitSet 等待</p><p>ReentrantLock 的条件变量比 synchronized 强大之处在于，它是支持多个条件变量的，这就好比</p><ul><li>synchronized 是那些不满足条件的线程都在一间休息室等消息</li><li>而 ReentrantLock 支持多间休息室，有专门等烟的休息室、专门等早餐的休息室、唤醒时也是按休息室来唤醒</li></ul><p>使用要点：</p><ul><li>await 前需要获得锁</li><li>await 执行后，会释放锁，进入 conditionObject 等待</li><li>await 的线程被唤醒（或打断、或超时）取重新竞争 lock 锁</li><li>竞争 lock 锁成功后，从 await 后继续执行</li></ul><h2 id="非公平锁实现原理"><a class="markdownIt-Anchor" href="#非公平锁实现原理"></a> 非公平锁实现原理</h2><p>先从构造器开始看，默认为非公平锁实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ReentrantLock</span><span class="params">()</span> &#123;</span><br><span class="line"> sync = <span class="keyword">new</span> <span class="title class_">NonfairSync</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NonfairSync 继承自 AQS</p><p>没有竞争时</p><p><img src="/2023/02/17/juc/image-20230213144544684.png" alt="image-20230213144544684"></p><p>第一个竞争出现时</p><p><img src="/2023/02/17/juc/image-20230213144600483.png" alt="image-20230213144600483"></p><p>Thread-1 执行了</p><ol><li>CAS 尝试将 state 由 0 改为 1，结果失败</li><li>进入 tryAcquire 逻辑，这时 state 已经是1，结果仍然失败</li><li>接下来进入 addWaiter 逻辑，构造 Node 队列</li></ol><ul><li>图中黄色三角表示该 Node 的 waitStatus 状态，其中 0 为默认正常状态</li><li>Node 的创建是懒惰的</li><li>其中第一个 Node 称为 Dummy（哑元）或哨兵，用来占位，并不关联线程</li></ul><p><img src="/2023/02/17/juc/image-20230213145417995.png" alt="image-20230213145417995"></p><p>当前线程进入 acquireQueued 逻辑</p><ol><li>acquireQueued 会在一个死循环中不断尝试获得锁，失败后进入 park 阻塞</li><li>如果自己是紧邻着 head（排第二位），那么再次 tryAcquire 尝试获取锁，当然这时 state 仍为 1，失败</li><li>进入 shouldParkAfterFailedAcquire 逻辑，将前驱 node，即 head 的 waitStatus 改为 -1，这次返回 false</li></ol><p><img src="/2023/02/17/juc/image-20230213145501204.png" alt="image-20230213145501204"></p><ol start="4"><li>shouldParkAfterFailedAcquire 执行完毕回到 acquireQueued ，再次 tryAcquire 尝试获取锁，当然这时 state 仍为 1，失败</li><li>当再次进入 shouldParkAfterFailedAcquire 时，这时因为其前驱 node 的 waitStatus 已经是 -1，这次返回 true</li><li>进入 parkAndCheckInterrupt， Thread-1 park（灰色表示）</li></ol><p><img src="/2023/02/17/juc/image-20230213145543910.png" alt="image-20230213145543910"></p><p>再次有多个线程经历上述过程竞争失败，变成这个样子</p><p><img src="/2023/02/17/juc/image-20230213145558046.png" alt="image-20230213145558046"></p><p>Thread-0 释放锁，进入 tryRelease 流程，如果成功</p><ul><li>设置 exclusiveOwnerThread 为 null</li><li>state = 0</li></ul><p><img src="/2023/02/17/juc/image-20230213145626572.png" alt="image-20230213145626572"></p><p>当前队列不为 null，并且 head 的 waitStatus = -1，进入 unparkSuccessor 流程</p><p>找到队列中离 head 最近的一个 Node（没取消的），unpark 恢复其运行，本例中即为 Thread-1</p><p>回到 Thread-1 的 acquireQueued 流程</p><p><img src="/2023/02/17/juc/image-20230213150843395.png" alt="image-20230213150843395"></p><p>如果加锁成功（没有竞争），会设置</p><ul><li>exclusiveOwnerThread 为 Thread-1，state = 1</li><li>head 指向刚刚 Thread-1 所在的 Node，该 Node 清空 Thread</li><li>原本的 head 因为从链表断开，而可被垃圾回收</li></ul><p>如果这时候有其它线程来竞争（非公平的体现），例如这时有 Thread-4 来了</p><p><img src="/2023/02/17/juc/image-20230213150941238.png" alt="image-20230213150941238"></p><p>如果不巧又被 Thread-4 占了先</p><ul><li>Thread-4 被设置为 exclusiveOwnerThread，state = 1</li><li>Thread-1 再次进入 acquireQueued 流程，获取锁失败，重新进入 park 阻塞</li></ul><h2 id="可重入原理"><a class="markdownIt-Anchor" href="#可重入原理"></a> 可重入原理</h2><p><img src="/2023/02/17/juc/image-20230213151537230.png" alt="image-20230213151537230"></p><p><img src="/2023/02/17/juc/image-20230213151548031.png" alt="image-20230213151548031"></p><p><img src="/2023/02/17/juc/image-20230213151556253.png" alt="image-20230213151556253"></p><h2 id="条件变量实现原理"><a class="markdownIt-Anchor" href="#条件变量实现原理"></a> 条件变量实现原理</h2><p>每个条件变量其实就对应着一个等待队列，其实现类是 ConditionObject</p><p><strong>await 流程</strong></p><p>开始 Thread-0 持有锁，调用 await，进入 ConditionObject 的 addConditionWaiter 流程</p><p>创建新的 Node 状态为 -2（Node.CONDITION），关联 Thread-0，加入等待队列尾部</p><p><img src="/2023/02/17/juc/image-20230213152200757.png" alt="image-20230213152200757"></p><p>接下来进入 AQS 的 fullyRelease 流程，释放同步器上的锁</p><p><img src="/2023/02/17/juc/image-20230213152226734.png" alt="image-20230213152226734"></p><p>unpark AQS 队列中的下一个节点，竞争锁，假设没有其他竞争线程，那么 Thread-1 竞争成功</p><p><img src="/2023/02/17/juc/image-20230213152248771.png" alt="image-20230213152248771"></p><p>park 阻塞 Thread-0</p><p><img src="/2023/02/17/juc/image-20230213152300864.png" alt="image-20230213152300864"></p><p><strong>signal 流程</strong></p><p>假设 Thread-1 要来唤醒 Thread-0</p><p><img src="/2023/02/17/juc/image-20230213152322187.png" alt="image-20230213152322187"></p><p>进入 ConditionObject 的 doSignal 流程，取得等待队列中第一个 Node，即 Thread-0 所在 Node</p><p><img src="/2023/02/17/juc/image-20230213152340898.png" alt="image-20230213152340898"></p><p>执行 transferForSignal 流程，将该 Node 加入 AQS 队列尾部，将 Thread-0 的 waitStatus 改为 0，Thread-3 的 waitStatus 改为 -1</p><p><img src="/2023/02/17/juc/image-20230213152358996.png" alt="image-20230213152358996"></p><p>Thread-1 释放锁，进入 unlock 流程，略</p><h1 id="6volatile原理"><a class="markdownIt-Anchor" href="#6volatile原理"></a> 6.volatile原理</h1><p>volatile 的底层实现原理是内存屏障，Memory Barrier（Memory Fence）</p><ul><li>对 volatile 变量的写指令后会加入写屏障</li><li>对 volatile 变量的读指令前会加入读屏障</li></ul><h2 id="保证可见性"><a class="markdownIt-Anchor" href="#保证可见性"></a> 保证可见性</h2><ul><li><p>写屏障（sfence）保证在该屏障之前的，对共享变量的改动，都同步到主存当中</p></li><li><pre class="highlight"><code class="java"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actor2</span><span class="params">(I_Result r)</span> &#123; num = <span class="number">2</span>; ready = <span class="literal">true</span>; <span class="comment">// ready 是 volatile 赋值带写屏障</span><span class="comment">// 写屏障</span>&#125;&lt;!--code￼<span class="number">3</span>--&gt;</code></pre></li></ul><h2 id="保证有序性"><a class="markdownIt-Anchor" href="#保证有序性"></a> 保证有序性</h2><ul><li><p>写屏障会确保指令重排序时，不会将写屏障之前的代码排在写屏障之后</p></li><li><pre class="highlight"><code class="java"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actor2</span><span class="params">(I_Result r)</span> &#123; num = <span class="number">2</span>; ready = <span class="literal">true</span>; <span class="comment">// ready 是 volatile 赋值带写屏障</span> <span class="comment">// 写屏障</span>&#125;&lt;!--code￼<span class="number">4</span>--&gt;</code></pre></li></ul><p>还是那句话，不能解决指令交错(字节码层面)：</p><ul><li>写屏障仅仅是保证之后的读能够读到最新的结果，但不能保证读跑到它前面去</li><li>而有序性的保证也只是保证了本线程内相关代码不被重排序</li></ul><h1 id="7线程池"><a class="markdownIt-Anchor" href="#7线程池"></a> 7.线程池</h1><p><strong>线程池（thread pool</strong>）：一种线程使用模式。线程过多会带来调度开销，进而影响缓存局部性和整体性能。而线程池维护着多个线程，对线程统一管理。</p><p>线程池就是存放线程的池子，池子里存放了很多可以复用的线程。</p><p>创建线程和销毁线程的花销是比较大的（手动new Thread 类），创建和消耗线程的时间有可能比处理业务的时间还要长。这样频繁的创建线程和销毁线程是比较消耗资源的。（我们可以把创建和销毁的线程的过程去掉）。</p><h2 id="线程池状态"><a class="markdownIt-Anchor" href="#线程池状态"></a> 线程池状态</h2><p>ThreadPoolExecutor 使用 int 的高 3 位来表示线程池状态，低 29 位表示线程数量</p><p><img src="/2023/02/17/juc/image-20230213161108770.png" alt="image-20230213161108770"></p><p>从数字上比较，TERMINATED &gt; TIDYING &gt; STOP &gt; SHUTDOWN &gt; RUNNING</p><p>这些信息存储在一个原子变量 ctl 中，目的是将线程池状态与线程个数合二为一，这样就可以用一次 cas 原子操作 进行赋值</p><ul><li><strong>running</strong>：初始化后的状态，表示线程池可以处理任务。</li><li><strong>shutdown</strong>：调用线程池的shutdown方法会使线程进入shutdown状态，从而调用execute的时候会抛出异常。但如果阻塞队列中还有任务，则会先将阻塞队列中的认为执行完，才会后收所有线程。</li><li><strong>stop</strong>：调用线程池的shutdownnow方法会使线程进入stop状态，既不能接受新的任务，也不能把阻塞队列中的任务执行完。</li><li><strong>tidying</strong>：在执行玩shutdownnow方法的时候，关闭完所有线程的时候，就会调用tryTerminate（）方法</li><li><strong>terminated</strong>：线程池处于TIDYING状态后，会执行terminated（）方法，执行完后就i进入terminated状态，在ThreadPoolExecutor中的terminated（）是一个空方法，可以自定义线程池重写这个方法，实现自定义的业务逻辑。</li></ul><p><img src="/2023/02/17/juc/image-20230319181441153.png" alt="image-20230319181441153"></p><h2 id="工作流程"><a class="markdownIt-Anchor" href="#工作流程"></a> 工作流程</h2><ul><li><p>提交任务</p></li><li><p>当工作线程数小于核心线程数时，直接创建新的核心工作线程</p></li><li><p>当工作线程数不小于核心线程数时，就需要尝试将任务添加到阻塞队列中去</p></li><li><p>如果能够加入成功，说明队列还没有满，那么需要做以下的二次验证来保证添加进去的任务能够成功被执行</p></li><li><p>验证当前线程池的运行状态，如果是非RUNNING状态，则需要将任务从阻塞队列中移除，然后拒绝该任务</p></li><li><p>验证当前线程池中的工作线程的个数，如果为0，则需要主动添加一个空工作线程来执行刚刚添加到阻塞队列中的任务</p></li><li><p>如果加入失败，则说明队列已经满了，那么这时就需要创建新的“临时”工作线程来执行任务</p></li><li><p>如果创建成功，则直接执行该任务</p></li><li><p>如果创建失败，则说明工作线程数已经等于最大线程数了，则只能拒绝该任务了</p></li></ul><h2 id="构造方法"><a class="markdownIt-Anchor" href="#构造方法"></a> 构造方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadPoolExecutor</span><span class="params">(<span class="type">int</span> corePoolSize,</span></span><br><span class="line"><span class="params">   <span class="type">int</span> maximumPoolSize,</span></span><br><span class="line"><span class="params">   <span class="type">long</span> keepAliveTime,</span></span><br><span class="line"><span class="params">   TimeUnit unit,</span></span><br><span class="line"><span class="params">   BlockingQueue&lt;Runnable&gt; workQueue,</span></span><br><span class="line"><span class="params">       ThreadFactory threadFactory,</span></span><br><span class="line"><span class="params">      RejectedExecutionHandler handler)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>corePoolSize 核心线程数目 (最多保留的线程数)</p><ul><li><strong>CPU密集型：corePoolSize = CPU核数 + 1</strong></li><li><strong>IO密集型：corePoolSize = CPU核数 * 2</strong></li></ul></li><li><p>maximumPoolSize 最大线程数目</p></li><li><p>keepAliveTime 生存时间 - 针对救急线程</p></li><li><p>unit 时间单位 - 针对救急线程</p></li><li><p>workQueue 阻塞队列</p></li><li><p>threadFactory 线程工厂 - 可以为线程创建时起个好名字</p></li><li><p>handler 拒绝策略（可通过实现<code>RejectedExecutionHandler</code> 接口自定义拒绝策略）</p></li></ul><h2 id="工作队列"><a class="markdownIt-Anchor" href="#工作队列"></a> 工作队列</h2><p><strong>1、无界队列</strong></p><p>队列大小无限制，常用的为无界的<code>LinkedBlockingQueue</code>，使用该队列作为阻塞队列时要尤其当心，当任务耗时较长时可能会导致大量新任务在队列中堆积最终导致OOM。阅读代码发现，<code>Executors.newFixedThreadPool</code> 采用就是 <code>LinkedBlockingQueue</code>，而博主踩到的就是这个坑，当QPS很高，发送数据很大，大量的任务被添加到这个无界<code>LinkedBlockingQueue</code> 中，导致cpu和内存飙升服务器挂掉。</p><p>当然这种队列，<code>maximumPoolSize</code> 的值也就无效了。当每个任务完全独立于其他任务，即任务执行互不影响时，适合于使用无界队列；例如，在 Web 页服务器中。这种排队可用于处理瞬态突发请求，当命令以超过队列所能处理的平均数连续到达时，此策略允许无界线程具有增长的可能性。</p><p><strong>2、有界队列</strong></p><p>当使用有限的 <code>maximumPoolSizes</code> 时，有界队列有助于防止资源耗尽，但是可能较难调整和控制。常用的有两类，一类是遵循FIFO原则的队列如<code>ArrayBlockingQueue</code>，另一类是优先级队列如<code>PriorityBlockingQueue</code>。<code>PriorityBlockingQueue</code>中的优先级由任务的Comparator决定。</p><p>使用有界队列时队列大小需和线程池大小互相配合，线程池较小有界队列较大时可减少内存消耗，降低cpu使用率和上下文切换，但是可能会限制系统吞吐量。</p><p><strong>3、同步移交队列</strong></p><p>如果不希望任务在队列中等待而是希望将任务直接移交给工作线程，可使用<code>SynchronousQueue</code>作为等待队列。<code>SynchronousQueue</code>不是一个真正的队列，而是一种线程之间移交的机制。要将一个元素放入<code>SynchronousQueue</code>中，必须有另一个线程正在等待接收这个元素。只有在使用无界线程池或者有饱和策略时才建议使用该队列。</p><h2 id="newfixedthreadpool"><a class="markdownIt-Anchor" href="#newfixedthreadpool"></a> newFixedThreadPool</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newFixedThreadPool</span><span class="params">(<span class="type">int</span> nThreads)</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(nThreads, nThreads,</span><br><span class="line">   <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">       <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>特点</p><ul><li>核心线程数 == 最大线程数（没有救急线程被创建），因此也无需超时时间</li><li>阻塞队列是无界的，可以放任意数量的任务</li></ul><blockquote><p><strong>评价</strong> 适用于任务量已知，相对耗时的任务</p></blockquote><h2 id="newcachedthreadpool"><a class="markdownIt-Anchor" href="#newcachedthreadpool"></a> newCachedThreadPool</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newCachedThreadPool</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">0</span>, Integer.MAX_VALUE,</span><br><span class="line">   <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">   <span class="keyword">new</span> <span class="title class_">SynchronousQueue</span>&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>特点</strong></p><ul><li>核心线程数是 0， 最大线程数是 Integer.MAX_VALUE，救急线程的空闲生存时间是 60s，意味着<ul><li>全部都是救急线程（60s 后可以回收）</li><li>救急线程可以无限创建</li></ul></li><li>队列采用了 SynchronousQueue 实现特点是，它没有容量，没有线程来取是放不进去的（一手交钱、一手交 货）</li></ul><blockquote><p><strong>评价</strong> 整个线程池表现为线程数会根据任务量不断增长，没有上限，当任务执行完毕，空闲 1分钟后释放线 程。 适合任务数比较密集，但每个任务执行时间较短的情况</p></blockquote><h2 id="newsinglethreadexecutor"><a class="markdownIt-Anchor" href="#newsinglethreadexecutor"></a> newSingleThreadExecutor</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newSingleThreadExecutor</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FinalizableDelegatedExecutorService</span></span><br><span class="line"> (<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line"> <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line"> <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用场景</strong>： 希望多个任务排队执行。线程数固定为 1，任务数多于 1 时，会放入无界队列排队。任务执行完毕，这唯一的线程 也不会被释放。</p><p><strong>区别</strong>：</p><ul><li>自己创建一个单线程串行执行任务，如果任务执行失败而终止那么没有任何补救措施，而线程池还会新建一 个线程，保证池的正常工作</li><li>Executors.newSingleThreadExecutor() 线程个数始终为1，不能修改<ul><li>FinalizableDelegatedExecutorService 应用的是装饰器模式，只对外暴露了 ExecutorService 接口，因 此不能调用 ThreadPoolExecutor 中特有的方法</li></ul></li><li>Executors.newFixedThreadPool(1) 初始时为1，以后还可以修改<ul><li>对外暴露的是 ThreadPoolExecutor 对象，可以强转后调用 setCorePoolSize 等方法进行修改</li></ul></li></ul><h2 id="任务提交"><a class="markdownIt-Anchor" href="#任务提交"></a> 任务提交</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 执行任务</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(Runnable command)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提交任务 task，用返回值 Future 获得任务执行结果</span></span><br><span class="line">&lt;T&gt; Future&lt;T&gt; <span class="title function_">submit</span><span class="params">(Callable&lt;T&gt; task)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提交 tasks 中所有任务</span></span><br><span class="line">&lt;T&gt; List&lt;Future&lt;T&gt;&gt; <span class="title function_">invokeAll</span><span class="params">(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)</span> </span><br><span class="line">    <span class="keyword">throws</span> InterruptedException;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提交 tasks 中所有任务，带超时时间</span></span><br><span class="line">&lt;T&gt; List&lt;Future&lt;T&gt;&gt; <span class="title function_">invokeAll</span><span class="params">(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks,</span></span><br><span class="line"><span class="params">   <span class="type">long</span> timeout, TimeUnit unit)</span></span><br><span class="line"> <span class="keyword">throws</span> InterruptedException;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提交 tasks 中所有任务，哪个任务先成功执行完毕，返回此任务执行结果，其它任务取消</span></span><br><span class="line">&lt;T&gt; T <span class="title function_">invokeAny</span><span class="params">(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)</span></span><br><span class="line"> <span class="keyword">throws</span> InterruptedException, ExecutionException;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提交 tasks 中所有任务，哪个任务先成功执行完毕，返回此任务执行结果，其它任务取消，带超时时间</span></span><br><span class="line">&lt;T&gt; T <span class="title function_">invokeAny</span><span class="params">(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks,</span></span><br><span class="line"><span class="params"> <span class="type">long</span> timeout, TimeUnit unit)</span></span><br><span class="line"> <span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="关闭线程池"><a class="markdownIt-Anchor" href="#关闭线程池"></a> 关闭线程池</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">线程池状态变为 SHUTDOWN</span></span><br><span class="line"><span class="comment"> - 不会接收新任务</span></span><br><span class="line"><span class="comment"> - 但已提交任务会执行完</span></span><br><span class="line"><span class="comment"> - 此方法不会阻塞调用线程的执行</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">shutdown</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">线程池状态变为 STOP</span></span><br><span class="line"><span class="comment"> - 不会接收新任务</span></span><br><span class="line"><span class="comment"> - 会将队列中的任务返回</span></span><br><span class="line"><span class="comment"> - 并用 interrupt 的方式中断正在执行的任务</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">List&lt;Runnable&gt; <span class="title function_">shutdownNow</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不在 RUNNING 状态的线程池，此方法就返回 true</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isShutdown</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程池状态是否是 TERMINATED</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isTerminated</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用 shutdown 后，由于调用线程并不会等待所有任务运行结束，因此如果它想在线程池 TERMINATED 后做些事情，可以利用此方法等待   </span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">awaitTermination</span><span class="params">(<span class="type">long</span> timeout, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException;</span><br></pre></td></tr></table></figure><h2 id="任务调度线程池"><a class="markdownIt-Anchor" href="#任务调度线程池"></a> 任务调度线程池</h2><p>使用 ScheduledExecutorService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ScheduledExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newScheduledThreadPool(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 添加两个任务，希望它们都在 1s 后执行</span></span><br><span class="line">executor.schedule(() -&gt; &#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;任务1，执行时间：&quot;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"> <span class="keyword">try</span> &#123; Thread.sleep(<span class="number">2000</span>); &#125; <span class="keyword">catch</span> (InterruptedException e) &#123; &#125;</span><br><span class="line">&#125;, <span class="number">1000</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">executor.schedule(() -&gt; &#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;任务2，执行时间：&quot;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">&#125;, <span class="number">1000</span>, TimeUnit.MILLISECONDS);</span><br></pre></td></tr></table></figure><p>scheduleAtFixedRate 循环执行例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ScheduledExecutorService</span> <span class="variable">pool</span> <span class="operator">=</span> Executors.newScheduledThreadPool(<span class="number">1</span>);</span><br><span class="line">log.debug(<span class="string">&quot;start...&quot;</span>);</span><br><span class="line">pool.scheduleAtFixedRate(() -&gt; &#123;</span><br><span class="line"> log.debug(<span class="string">&quot;running...&quot;</span>);</span><br><span class="line">&#125;, <span class="number">1</span>, <span class="number">1</span>, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure><p>输出：</p><p><img src="/2023/02/17/juc/image-20230213163448999.png" alt="image-20230213163448999"></p><p>scheduleAtFixedRate 例子（任务执行时间超过了间隔时间）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ScheduledExecutorService</span> <span class="variable">pool</span> <span class="operator">=</span> Executors.newScheduledThreadPool(<span class="number">1</span>);</span><br><span class="line">log.debug(<span class="string">&quot;start...&quot;</span>);</span><br><span class="line">pool.scheduleAtFixedRate(() -&gt; &#123;</span><br><span class="line"> log.debug(<span class="string">&quot;running...&quot;</span>);</span><br><span class="line"> sleep(<span class="number">2</span>);</span><br><span class="line">&#125;, <span class="number">1</span>, <span class="number">1</span>, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure><p>输出分析：一开始，延时 1s，接下来，由于任务执行时间 &gt; 间隔时间，间隔被『撑』到了 2s</p><p><img src="/2023/02/17/juc/image-20230213163530988.png" alt="image-20230213163530988"></p><p>scheduleWithFixedDelay 例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ScheduledExecutorService</span> <span class="variable">pool</span> <span class="operator">=</span> Executors.newScheduledThreadPool(<span class="number">1</span>);</span><br><span class="line">log.debug(<span class="string">&quot;start...&quot;</span>);</span><br><span class="line">pool.scheduleWithFixedDelay(()-&gt; &#123;</span><br><span class="line"> log.debug(<span class="string">&quot;running...&quot;</span>);</span><br><span class="line"> sleep(<span class="number">2</span>);</span><br><span class="line">&#125;, <span class="number">1</span>, <span class="number">1</span>, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure><p>输出分析：一开始，延时 1s，scheduleWithFixedDelay 的间隔是 上一个任务结束 &lt;-&gt; 延时 &lt;-&gt; 下一个任务开始 所 以间隔都是 3s</p><p><img src="/2023/02/17/juc/image-20230213163840871.png" alt="image-20230213163840871"></p><blockquote><p><strong>评价</strong> 整个线程池表现为：线程数固定，任务数多于线程数时，会放入无界队列排队。任务执行完毕，这些线 程也不会被释放。用来执行延迟或反复执行的任务</p></blockquote><h2 id="forkjoin"><a class="markdownIt-Anchor" href="#forkjoin"></a> Fork/Join</h2><p>Fork/Join 是 JDK 1.7 加入的新的线程池实现，它体现的是一种分治思想，适用于能够进行任务拆分的 cpu 密集型</p><p>运算 所谓的任务拆分，是将一个大任务拆分为算法上相同的小任务，直至不能拆分可以直接求解。跟递归相关的一些计算，如归并排序、斐波那契数列、都可以用分治思想进行求解</p><p>Fork/Join 在分治的基础上加入了多线程，可以把每个任务的分解和合并交给不同的线程来完成，进一步提升了运算效率</p><p>Fork/Join 默认会创建与 cpu 核心数大小相同的线程池</p><p><strong>使用</strong>：</p><p>提交给 Fork/Join 线程池的任务需要继承 RecursiveTask（有返回值）或 RecursiveAction（没有返回值），例如下 面定义了一个对 1~n 之间的整数求和的任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.AddTask&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AddTask1</span> <span class="keyword">extends</span> <span class="title class_">RecursiveTask</span>&lt;Integer&gt; &#123;</span><br><span class="line"> <span class="type">int</span> n;</span><br><span class="line"> <span class="keyword">public</span> <span class="title function_">AddTask1</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line"> <span class="built_in">this</span>.n = n;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="string">&quot;&#123;&quot;</span> + n + <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">protected</span> Integer <span class="title function_">compute</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="comment">// 如果 n 已经为 1，可以求得结果了</span></span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line"> log.debug(<span class="string">&quot;join() &#123;&#125;&quot;</span>, n);</span><br><span class="line"> <span class="keyword">return</span> n;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 将任务进行拆分(fork)</span></span><br><span class="line"> <span class="type">AddTask1</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AddTask1</span>(n - <span class="number">1</span>);</span><br><span class="line"> t1.fork();</span><br><span class="line"> log.debug(<span class="string">&quot;fork() &#123;&#125; + &#123;&#125;&quot;</span>, n, t1);</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 合并(join)结果</span></span><br><span class="line"> <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> n + t1.join();</span><br><span class="line"> log.debug(<span class="string">&quot;join() &#123;&#125; + &#123;&#125; = &#123;&#125;&quot;</span>, n, t1, result);</span><br><span class="line"> <span class="keyword">return</span> result;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后提交给 ForkJoinPool 来执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> <span class="type">ForkJoinPool</span> <span class="variable">pool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ForkJoinPool</span>(<span class="number">4</span>);</span><br><span class="line"> System.out.println(pool.invoke(<span class="keyword">new</span> <span class="title class_">AddTask1</span>(<span class="number">5</span>)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="/2023/02/17/juc/image-20230213165241399.png" alt="image-20230213165241399"></p><h1 id="8aqs"><a class="markdownIt-Anchor" href="#8aqs"></a> 8.AQS</h1><h2 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h2><p>全称是 AbstractQueuedSynchronizer，是阻塞式锁和相关的同步器工具的框架</p><p>AQS定义了一套多线程访问共享资源的同步模板，解决了实现同步器时涉及的大量细节问题，能够极大地减少实现工作</p><p>AQS的组成结构</p><p><img src="/2023/02/17/juc/image-20230319181528984.png" alt="image-20230319181528984"></p><p>三部分组成：<code>volatile int state同步状态</code>、<code>Node组成的CLH队列</code>、<code>ConditionObject条件变量</code>（包含Node组成的条件单向队列）。</p><p>特点：</p><ul><li><p>用 state 属性来表示资源的状态（分独占模式和共享模式），子类需要定义如何维护这个状态，控制如何获取锁和释放锁</p><ul><li>getState - 获取 state 状态</li><li>setState - 设置 state 状态</li><li>compareAndSetState - cas 机制设置 state 状态</li><li>独占模式是只有一个线程能够访问资源，而共享模式可以允许多个线程访问资源</li><li>ReentrantLock的state用来表示是否有锁资源</li><li>ReentrantReadWriteLock的state高16位代表读锁状态，低16位代表写锁状态</li><li>Semaphore的state用来表示可用信号的个数</li><li>CountDownLatch的state用来表示计数器的值</li></ul></li><li><p>提供了基于 FIFO （先进先出）的等待队列，类似于 Monitor 的 EntryList</p></li><li><p>条件变量来实现等待、唤醒机制，支持多个条件变量，类似于 Monitor 的 WaitSet</p></li></ul><p>子类主要实现这样一些方法（默认抛出 UnsupportedOperationException）</p><ul><li>tryAcquire</li><li>tryRelease</li><li>tryAcquireShared</li><li>tryReleaseShared</li><li>isHeldExclusively</li></ul><p>获取锁的姿势：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果获取锁失败</span></span><br><span class="line"><span class="keyword">if</span> (!tryAcquire(arg)) &#123;</span><br><span class="line"> <span class="comment">// 入队, 可以选择阻塞当前线程 park unpark</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>释放锁的姿势</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果释放锁成功</span></span><br><span class="line"><span class="keyword">if</span> (tryRelease(arg)) &#123;</span><br><span class="line"> <span class="comment">// 让阻塞线程恢复运行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例子"><a class="markdownIt-Anchor" href="#例子"></a> 例子</h2><p><strong>实现不可重入锁</strong></p><p><strong>自定义同步器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">MySync</span> <span class="keyword">extends</span> <span class="title class_">AbstractQueuedSynchronizer</span> &#123;</span><br><span class="line">    </span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">tryAcquire</span><span class="params">(<span class="type">int</span> acquires)</span> &#123;</span><br><span class="line"> <span class="keyword">if</span> (acquires == <span class="number">1</span>)&#123;</span><br><span class="line"> <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>)) &#123;</span><br><span class="line"> setExclusiveOwnerThread(Thread.currentThread());</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br><span class="line">    </span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">tryRelease</span><span class="params">(<span class="type">int</span> acquires)</span> &#123;</span><br><span class="line"> <span class="keyword">if</span>(acquires == <span class="number">1</span>) &#123;</span><br><span class="line"> <span class="keyword">if</span>(getState() == <span class="number">0</span>) &#123;</span><br><span class="line"> <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalMonitorStateException</span>();</span><br><span class="line"> &#125;</span><br><span class="line"> setExclusiveOwnerThread(<span class="literal">null</span>);</span><br><span class="line"> setState(<span class="number">0</span>);</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br><span class="line">    </span><br><span class="line"> <span class="keyword">protected</span> Condition <span class="title function_">newCondition</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ConditionObject</span>();</span><br><span class="line"> &#125;</span><br><span class="line">    </span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">isHeldExclusively</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> getState() == <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>自定义锁</strong></p><p>有了自定义同步器，很容易复用 AQS ，实现一个功能完备的自定义锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyLock</span> <span class="keyword">implements</span> <span class="title class_">Lock</span> &#123;</span><br><span class="line">    </span><br><span class="line"> <span class="keyword">static</span> <span class="type">MySync</span> <span class="variable">sync</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MySync</span>();</span><br><span class="line">    </span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="comment">// 尝试，不成功，进入等待队列</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lock</span><span class="params">()</span> &#123;</span><br><span class="line"> sync.acquire(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="comment">// 尝试，不成功，进入等待队列，可打断</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"> sync.acquireInterruptibly(<span class="number">1</span>);</span><br><span class="line"> &#125;</span><br><span class="line">    </span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="comment">// 尝试一次，不成功返回，不进入队列</span></span><br><span class="line"> <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> sync.tryAcquire(<span class="number">1</span>);</span><br><span class="line"> &#125;</span><br><span class="line">    </span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="comment">// 尝试，不成功，进入等待队列，有时限</span></span><br><span class="line"> <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(<span class="type">long</span> time, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"> <span class="keyword">return</span> sync.tryAcquireNanos(<span class="number">1</span>, unit.toNanos(time));</span><br><span class="line"> &#125;</span><br><span class="line">    </span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="comment">// 释放锁</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line"> sync.release(<span class="number">1</span>);</span><br><span class="line"> &#125;</span><br><span class="line">    </span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="comment">// 生成条件变量</span></span><br><span class="line"> <span class="keyword">public</span> Condition <span class="title function_">newCondition</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> sync.newCondition();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="clh队列"><a class="markdownIt-Anchor" href="#clh队列"></a> CLH队列</h2><p>CLH是AQS内部维护的FIFO（先进先出）双端双向队列（方便尾部节点插入），基于链表数据结构，当一个线程竞争资源失败，就会将等待资源的线程封装成一个Node节点，通过CAS原子操作插入队列尾部，最终不同的Node节点连接组成了一个CLH队列，所以说AQS通过CLH队列管理竞争资源的线程，个人总结CLH队列具有如下几个优点：</p><ul><li>先进先出保证了公平性</li><li>非阻塞的队列，通过自旋锁和CAS保证节点插入和移除的原子性，实现无锁快速插入</li><li>采用了自旋锁思想，所以CLH也是一种基于链表的可扩展、高性能、公平的自旋锁</li></ul><h2 id="流程"><a class="markdownIt-Anchor" href="#流程"></a> 流程</h2><p>线程获取资源失败，封装成<code>Node</code>节点从<code>CLH</code>队列尾部入队并阻塞线程，某线程释放资源时会把<code>CLH</code>队列首部<code>Node</code>节点关联的线程唤醒（<strong>此处的首部是指第二个节点，后面会细说</strong>），再次获取资源。，</p><p><img src="/2023/02/17/juc/image-20230319181541325.png" alt="image-20230319181541325"></p><p><strong>入队</strong></p><p>获取资源失败的线程需要封装成<code>Node</code>节点，接着尾部入队，在<code>AQS</code>中提供<code>addWaiter</code>函数完成<code>Node</code>节点的创建与入队。</p><p>添加节点的时候，如果从<code>CLH</code>队列已经存在，通过<code>CAS</code>快速将当前节点添加到队列尾部，如果添加失败或队列不存在，则指向<code>enq</code>函数自旋入队。</p><p>通过自旋<code>CAS</code>尝试往队列尾部插入节点，直到成功，自旋过程如果发现<code>CLH</code>队列不存在时会初始化<code>CLH</code>队列，入队过程流程如下图：</p><p><img src="/2023/02/17/juc/image-20230319181552799.png" alt="image-20230319181552799"></p><p><img src="/2023/02/17/juc/image-20230319181649388.png" alt="image-20230319181649388"></p><p>第一次循环</p><ul><li>刚开始C L H队列不存在，head与tail都指向null</li><li>要初始化C L H队列，会创建一个哨兵节点，head与tail都指向哨兵节点</li></ul><p>第二次循环</p><ul><li>当前线程节点的前驱节点指向尾部节点（哨兵节点）</li><li>设置当前线程节点为尾部，tail指向当前线程节点</li><li>前尾部节点的后驱节点指向当前线程节点（当前尾部节点）</li></ul><p>最后结合addWaiter与enq函数的入队流程图如下</p><img src="/2023/02/17/juc/image-20230319181732616.png" alt="image-20230319181732616"><p><strong>出队</strong></p><p><code>CLH</code>队列中的节点都是获取资源失败的线程节点，当持有资源的线程释放资源时，会将<code>head.next</code>指向的线程节点唤醒（<strong><code>CLH</code>队列的第二个节点</strong>），如果唤醒的线程节点获取资源成功，线程节点清空信息设置为头部节点（<strong>新哨兵节点</strong>），原头部节点出队（<strong>原哨兵节点</strong>）<strong>acquireQueued函数中的部分代码</strong></p><p>假设获取资源成功，更换头部节点，并把头部节点的信息清除变成哨兵节点，注意这个过程是不需要使用<code>CAS</code>来保证，因为只有一个线程能够成功获取到资源。</p><p><img src="/2023/02/17/juc/image-20230319181804127.png" alt="image-20230319181804127"></p><p><strong>条件变量</strong></p><p>Object的wait、notify函数是配合Synchronized锁实现线程间同步协作的功能，A Q S的ConditionObject条件变量也提供这样的功能，通过ConditionObject的await和signal两类函数完成。不同于Synchronized锁，一个A Q S可以对应多个条件变量，而Synchronized只有一个</p><p><img src="/2023/02/17/juc/image-20230319181818801.png" alt="image-20230319181818801"></p><p>如上图所示，ConditionObject内部维护着一个单向条件队列，不同于C H L队列，条件队列只入队执行await的线程节点，并且加入条件队列的节点，不能在C H L队列， 条件队列出队的节点，会入队到C H L队列。</p><p>当某个线程执行了ConditionObject的await函数，阻塞当前线程，线程会被封装成Node节点添加到条件队列的末端，其他线程执行ConditionObject的signal函数，会将条件队列头部线程节点转移到C H L队列参与竞争资源，具体流程如下图</p><p><img src="/2023/02/17/juc/image-20230319181828409.png" alt="image-20230319181828409"></p><h2 id="共享方式"><a class="markdownIt-Anchor" href="#共享方式"></a> 共享方式</h2><p>AQS定义两种资源共享方式。无论是独占锁还是共享锁，本质上都是对AQS内部的一个变量<code>state</code>的获取。<code>state</code>是一个原子的int变量，用来表示锁状态、资源数等。</p><p><strong>① 独占锁(<code>Exclusive</code>)模式</strong>：只能被一个线程获取到(<code>Reentrantlock</code>)。</p><p><img src="/2023/02/17/juc/image-20230319181839133.png" alt="image-20230319181839133"></p><p><strong>② 共享锁(<code>Share</code>)模式</strong>：可以被多个线程同时获取(<code>Semaphore/CountDownLatch/ReadWriteLock</code>)。</p><p><img src="/2023/02/17/juc/image-20230319181849485.png" alt="image-20230319181849485"></p><h2 id="state机制"><a class="markdownIt-Anchor" href="#state机制"></a> state机制</h2><p>提供<code>volatile</code>变量<code>state</code>，用于同步线程之间的共享状态。通过 <code>CAS</code> 和 <code>volatile</code> 保证其原子性和可见性。核心要点：</p><ul><li>state 用 <code>volatile</code> 修饰，保证多线程中的可见性</li><li><code>getState()</code> 和 <code>setState()</code> 方法<strong>采用final修饰</strong>，限制AQS的子类重写它们两</li><li><code>compareAndSetState()</code> 方法采用乐观锁思想的CAS算法，也是采用final修饰的，不允许子类重写</li></ul><p><strong>state应用案例</strong>：</p><table><thead><tr><th>案例</th><th>描述</th></tr></thead><tbody><tr><td><code>Semaphore</code></td><td>使用AQS同步状态来保存信号量的当前计数。tryRelease会增加计数，acquireShared会减少计数</td></tr><tr><td><code>CountDownLatch</code></td><td>使用AQS同步状态来表示计数。计数为0时，所有的Acquire操作（CountDownLatch的await方法）才可以通过</td></tr><tr><td><code>ReentrantReadWriteLock</code></td><td>使用AQS同步状态中的16位保存写锁持有的次数，剩下的16位用于保存读锁的持有次数</td></tr><tr><td><code>ThreadPoolExecutor</code></td><td>Worker利用AQS同步状态实现对独占线程变量的设置（tryAcquire和tryRelease）</td></tr><tr><td><code>ReentrantLock</code></td><td>使用AQS保存锁重复持有的次数。当一个线程获取锁时，ReentrantLock记录当前获得锁的线程标识，用于检测是否重复获取，以及错误线程试图解锁操作时异常情况的处理</td></tr></tbody></table><h1 id="9semaphore"><a class="markdownIt-Anchor" href="#9semaphore"></a> 9.Semaphore</h1><p>用来限制能同时访问共享资源的线程上限。</p><p>Semaphore是一个计数信号量，它的本质是一个&quot;共享锁&quot;。信号量维护了一个信号量许可集。线程可以通过调用acquire()来获取信号量的许可；当信号量中有可用的许可时，线程能获取该许可；否则线程必须等待，直到有可用的许可为止。 线程可以通过release()来释放它所持有的信号量许可。</p><h2 id="流程-2"><a class="markdownIt-Anchor" href="#流程-2"></a> 流程</h2><p>Semaphore 有点像一个停车场，permits 就好像停车位数量，当线程获得了 permits 就像是获得了停车位，然后 停车场显示空余车位减一</p><p>刚开始，permits（state）为 3，这时 5 个线程来获取资源</p><p><img src="/2023/02/17/juc/image-20230213212816669.png" alt="image-20230213212816669"></p><p>假设其中 Thread-1，Thread-2，Thread-4 cas 竞争成功，而 Thread-0 和 Thread-3 竞争失败，进入 AQS 队列 park 阻塞</p><p><img src="/2023/02/17/juc/image-20230213212834190.png" alt="image-20230213212834190"></p><p>这时 Thread-4 释放了 permits，状态如下</p><p><img src="/2023/02/17/juc/image-20230213212927453.png" alt="image-20230213212927453"></p><p>接下来 Thread-0 竞争成功，permits 再次设置为 0，设置自己为 head 节点，断开原来的 head 节点，unpark 接 下来的 Thread-3 节点，但由于 permits 是 0，因此 Thread-3 在尝试不成功后再次进入 park 状态</p><p><img src="/2023/02/17/juc/image-20230213212945122.png" alt="image-20230213212945122"></p><h1 id="10-countdownlatch"><a class="markdownIt-Anchor" href="#10-countdownlatch"></a> 10. CountDownLatch</h1><p>用来进行线程同步协作，<strong>等待所有线程完成倒计时</strong>。 其中构造参数用来初始化等待计数值，await() 用来等待计数归零，countDown() 用来让计数减一</p><p>CountDownLatch是一个同步辅助类，在完成一组正在其他线程中执行的操作之前，它允许一个或多个线程一直等待。</p><p><strong>CountDownLatch和CyclicBarrier的区别</strong></p><ul><li>CountDownLatch的作用是允许1或N个线程等待其他线程完成执行；而CyclicBarrier则是允许N个线程相互等待</li><li>CountDownLatch的计数器无法被重置；CyclicBarrier的计数器可以被重置后使用，因此它被称为是循环的barrier</li></ul><h1 id="11cyclicbarrier"><a class="markdownIt-Anchor" href="#11cyclicbarrier"></a> 11.CyclicBarrier</h1><p>循环栅栏，用来进行线程协作，等待线程<strong>满足某个计数</strong>。构造时设置『计数个数』，每个线程执 行到某个需要“同步”的时刻调用 await() 方法进行等待，当等待的线程数满足『计数个数』时，继续执行</p><p>CyclicBarrier是一个同步辅助类，允许一组线程互相等待，直到到达某个公共屏障点 (common barrier point)。因为该 barrier 在释放等待线程后可以重用，所以称它为循环 的 barrier。</p><h1 id="12多线程通信"><a class="markdownIt-Anchor" href="#12多线程通信"></a> 12.多线程通信</h1><h2 id="通信"><a class="markdownIt-Anchor" href="#通信"></a> 通信</h2><p>多线程通讯的方式主要包括以下几种：</p><ul><li><strong>使用volatile关键词：基于共享内存的思想</strong></li><li><strong>使用Synchronized+Object类的wait()/notify()/notifyAll()方法</strong></li><li><strong>使用JUC工具类CountDownLatch：基于共享变量state实现</strong></li><li><strong>使用Lock（ReentrantLock）结合Condition</strong></li><li><strong>基于LockSupport实现线程间的阻塞和唤醒</strong></li></ul><h2 id="线程协作"><a class="markdownIt-Anchor" href="#线程协作"></a> 线程协作</h2><h3 id="sleepyieldjoin"><a class="markdownIt-Anchor" href="#sleepyieldjoin"></a> sleep/yield/join</h3><p><strong>sleep()</strong></p><ul><li>让当前线程暂停指定的时间（毫秒）</li><li>wait方法依赖于同步，而sleep方法可以直接调用</li><li>sleep方法只是暂时让出CPU的执行权，并不释放锁，而wait方法则需要释放锁</li></ul><p><strong>yield()</strong></p><ul><li>暂停当前线程，让出当前CPU的使用权，以便其它线程有机会执行</li><li>不能指定暂停的时间，并且也不能保证当前线程马上停止</li><li>会让当前线程从运行状态转变为就绪状态</li><li>yield只能使同优先级或更高优先级的线程有执行的机会</li></ul><p><strong>join()</strong></p><ul><li>等待调用 join 方法的线程执行结束，才执行后面的代码</li><li>其调用一定要在 start 方法之后（看源码可知）</li><li>作用是父线程等待子线程执行完成后再执行（即将异步执行的线程合并为同步的线程）</li></ul><h3 id="waitnotifynotifyall"><a class="markdownIt-Anchor" href="#waitnotifynotifyall"></a> wait/notify/notifyAll</h3><p>一般需要配合<strong>synchronized</strong>一起使用。<strong>Object</strong>的主要方法如下：</p><ul><li><strong>wait()</strong>：阻塞当前线程，直到 notify 或者 notifyAll 来唤醒</li><li><strong>notify()</strong>：只能唤醒一个处于 wait 的线程</li><li><strong>notifyAll()</strong>：唤醒全部处于 wait 的线程</li></ul><h3 id="awaitsignalsignalall"><a class="markdownIt-Anchor" href="#awaitsignalsignalall"></a> await/signal/signalAll</h3><p>使用显式的 <strong>Lock</strong> 和 <strong>Condition</strong> 对象：</p><ul><li><strong>await()</strong>：当前线程进入等待状态，直到被通知（signal/signalAll）、中断或超时</li><li><strong>signal()</strong>：唤醒一个等待在Condition上的线程，将该线程从<strong>等待队列</strong>中转移到<strong>同步队列</strong>中</li><li><strong>signalAll()</strong>：能够唤醒所有等待在Condition上的线程</li></ul><h1 id="13threadlocal"><a class="markdownIt-Anchor" href="#13threadlocal"></a> 13.ThreadLocal</h1><blockquote><p>在多线程访问共享资源时会采取一定的线程同步方式（如：加锁）来解决带来的并发问题。（如图）</p></blockquote><p><img src="/2023/02/17/juc/image-20230319181907538.png" alt="image-20230319181907538"></p><p>使用ThreadLocal对共享资源的访问也可以解决并发问题</p><p>**作用：**ThreadLocal提供了线程的本地变量，即当创建一个变量后，每个线程对其进行访问的时候访问的是自己线程的变量。</p><p><img src="/2023/02/17/juc/image-20230319181918731.png" alt="image-20230319181918731"></p><blockquote><p>这里的本地内存并不是线程的工作内存，而是Thread类中的一个变量，而不是放在不是存放在ThreadLocal实例里面</p></blockquote><p><strong>这样做的好处：</strong></p><ul><li>线程安全，可以避免多线程访问同一个共享变量导致的并发问题。</li><li>不需要加锁，ThreadLocal比直接使用synchronized同步机制解决线程安全问题更简单，更方便，且结果程序拥有更高的并发性。</li></ul><h2 id="原理"><a class="markdownIt-Anchor" href="#原理"></a> 原理</h2><p><strong>ThreadLocalMap</strong></p><p>前面提到：每个线程的本地变量是放在调用线程Thread类中的一个变量<code>threadLocals</code>中，而不是放在不是存放在<code>ThreadLocal</code>实例里面</p><p><code>ThreadLocal</code>是基于每个线程对象内部的一个叫做<code>threadLocals</code>的属性来实现的，它的类型是<code>ThreadLocalMap</code>（说白了就是一个Map对象）。它以<code>ThreadLocal</code>本本身作为键值（注意：这里的引用为<strong>弱引用</strong>），副本对象作为value存储，这样当每个线程调用该对象时就可以直接从自身的<code>threadLocals</code>属性中获取变量副本来进行操作。</p><p><strong>为什么要用map？</strong></p><ul><li>这是因为在实际使用中可能会有多个<code>ThreadLocal</code>变量，因此需要将这些<code>ThreadLocal</code>添加到map中。</li></ul><p><strong>为什么要设置为弱引用？</strong></p><ul><li><p>如果为强引用： 由于<code>ThreadLocalMap</code>是属于线程的，而我们创建多线程时一般是使用线程池进行创建，线程池中的部分线程在任务结束后是不会关闭的，那么这部分线程中的<code>ThreadLocalMap</code>将会一直持有对<code>ThreadLocal</code>对象的强引用，导致<code>ThreadLocal</code>对象无法被垃圾回收，从而造成内存泄漏。</p></li><li><p>因此设置为弱引用：在下一次垃圾回收时，无论内存空间是否足够，只有弱引用指向的对象都会被直接回收。所以将<code>ThreadLocalMap</code>对<code>ThreadLocal</code>对象的引用设置成弱引用，就能避免<code>ThreadLocal</code>对象无法回收导致内存泄漏的问题。</p></li></ul><p><strong>内存泄露解决</strong></p><p><strong>解决</strong>：在finally中remove即可。</p><h1 id="14线程间异步传参"><a class="markdownIt-Anchor" href="#14线程间异步传参"></a> 14.线程间异步传参</h1><p>使用阿里开源的<strong>TransmittableThreadLocal（TTL）</strong></p><p>详见官网：<a href="https://gitcode.net/mirrors/alibaba/transmittable-thread-local?utm_source=csdn_github_accelerator">https://gitcode.net/mirrors/alibaba/transmittable-thread-local?utm_source=csdn_github_accelerator</a></p><h1 id="15进程间的通信方式"><a class="markdownIt-Anchor" href="#15进程间的通信方式"></a> 15.进程间的通信方式</h1><p><strong>管道</strong></p><p><strong>消息队列</strong></p><p><strong>共享内存</strong></p><ul><li><p>消息队列的读取和写入的过程，都会有发生用户态与内核态之间的消息拷贝过程。那共享内存的方式，就很好的解决了这一问题。</p></li><li><p>现代操作系统，对于内存管理，采用的是虚拟内存技术，也就是每个进程都有自己独立的虚拟内存空间，不同进程的虚拟内存映射到不同的物理内存中。所以，即使进程A和 进程B的虚拟地址是一样的，其实访问的是不同的物理内存地址，对于数据的增删查改互不影响。</p></li><li><p>共享内存的机制，就是拿出一块虚拟地址空间来，映射到相同的物理内存中。这样这个进程写入的东西，另外一个进程马上就能看到了，都不需要拷贝来拷贝去，传来传去， 大大提高了进程间通信的速度。</p></li></ul><p><strong>信号量</strong></p><ul><li>为了防止多进程竞争共享资源，而造成的数据错乱，所以需要保护机制，使得共享的资源，在任意时刻只能被一个进程访问。正好，<strong>信号量</strong>就实现了这一保护机制。</li><li><strong>信号量其实是一个整型的计数器，主要用于实现进程间的互斥与同步，而不是用于缓存进程间通信的数据</strong></li></ul><p><strong>信号</strong></p><ul><li>信号一般用于一些异常情况下的进程间通信，是一种异步通信，它的数据结构一般就是一个数字。</li></ul><p><strong>socket</strong></p><ul><li>前面提到的管道、消息队列、共享内存、信号量和信号都是在同一台主机上进行进程间通信，那要想<strong>跨网络与不同主机上的进程之间通信，就需要Socket通信了</strong>。</li><li>实际上，Socket通信不仅可以跨网络与不同主机的进程间通信，还可以在同主机上进程间通信。</li><li><img src="/2023/02/17/juc/image-20230319181948816.png" alt="image-20230319181948816"></li><li><img src="/2023/02/17/juc/image-20230319182006013.png" alt="image-20230319182006013"></li></ul><h1 id="16其他问题"><a class="markdownIt-Anchor" href="#16其他问题"></a> 16.其他问题</h1><p><strong>内核态和用户态的区别</strong></p><ul><li><p>内核态：cpu可以访问内存的所有数据，包括外围设备，例如硬盘，网卡，cpu也可以将自己从一个程序切换到另一个程序。</p></li><li><p>用户态：只能受限的访问内存，且不允许访问外围设备，占用cpu的能力被剥夺，cpu资源可以被其他程序获取。</p></li></ul><p>**string stringbuffer stringbuilder的区别，各自的使用场景 **</p><ul><li><p>1、String是一个final类，代表不可变的字符序列，也就是String引用的字符串是不能改变的</p></li><li><p>2、StringBuffer/StringBuilder表示的字符串对象可以直接进行修改，而且方法也一样</p></li><li><p>3、StringBuilder是java5中引入的，和StringBuffer的方法完全相同。区别在与它是单线程环境下使用的，因为他的所有方法都没有synchronized修饰，他的效率理论上比StringBuffer要高</p></li></ul><table><thead><tr><th>类</th><th>字符序列类型</th><th>效率</th><th>线程是否安全</th></tr></thead><tbody><tr><td>String</td><td>不可变字符序列</td><td>效率低，但是复用率高</td><td></td></tr><tr><td>StringBuffer</td><td>可变字符序列</td><td>效率较高（在增删情况下）</td><td>安全</td></tr><tr><td>StringBuilder</td><td>可变字符序列</td><td>效率最高</td><td>不安全</td></tr></tbody></table><p>​</p><p><strong>任务事件中 如何保障多线程情况下线程安全的进行上层的writeAndFlush？</strong></p><ul><li>synchronized方法</li><li>加锁机制（<strong>ReentrantLock</strong>等）</li><li>使用Atomic对象</li><li>使用无状态对象（同样的输入返回一致的结果）</li><li>使用不可变对象（final）</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1进程和线程&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1进程和线程&quot;&gt;&lt;/a&gt; 1.进程和线程&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;进程&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进程就是用来加载指令、管理内存、管理 IO 的&lt;/l</summary>
      
    
    
    
    <category term="juc" scheme="http://cloud-tour.github.io/categories/juc/"/>
    
    
    <category term="java" scheme="http://cloud-tour.github.io/tags/java/"/>
    
    <category term="juc" scheme="http://cloud-tour.github.io/tags/juc/"/>
    
  </entry>
  
  <entry>
    <title>javase</title>
    <link href="http://cloud-tour.github.io/2023/02/17/javase/"/>
    <id>http://cloud-tour.github.io/2023/02/17/javase/</id>
    <published>2023-02-17T12:58:55.387Z</published>
    <updated>2023-02-17T13:01:44.155Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1equals和hashcode的区别"><a class="markdownIt-Anchor" href="#1equals和hashcode的区别"></a> 1.equals和hashcode的区别</h1><p>在Java中任何一个对象都具备equals(Object obj)和hashCode()这两个方法，因为他们是在Object类中定义的。</p><p><strong>equals</strong>(Object obj)方法用来判断两个对象是否“相同”，如果“相同”则返回true，否则返回false。</p><p><strong>hashCode</strong>()方法返回一个int数，在Object类中的默认实现是“将该对象的<strong>内部地址</strong>转换成一个整数返回”。</p><p><strong>如果只重写equals不重写hashcode会有问题吗？</strong></p><ul><li>会有问题，如果我们想按照其他规则来判断两个对象相等与否，此时只重写equals而不重写hashcode，那么在将数据存储入set、list等散列表中时，java会默认采用目标地址进行hashcode，这是，我们认为的两个相同的对象就可能放入不同的数组位置上了，这样就造成了数据的不唯一性。</li></ul><p><strong>补充</strong>：</p><p>当集合要添加新的元素时，可分为两个步骤：</p><ul><li><p>先调用这个元素的 hashCode 方法，然后根据所得到的值计算出元素应该在数组的位置。如果这个位置上没有元素，那么直接将它存储在这个位置上；</p></li><li><p>如果这个位置上已经有元素了，那么调用它的equals方法与新元素进行比较：相同的话就不存了，否则，将其存在这个位置对应的链表中（Java 中 HashSet, HashMap 和 Hashtable的实现总将元素放到链表的表头）。</p></li></ul><h1 id="2树"><a class="markdownIt-Anchor" href="#2树"></a> 2.树</h1><h2 id="二叉搜索树二叉查找树"><a class="markdownIt-Anchor" href="#二叉搜索树二叉查找树"></a> 二叉搜索树（二叉查找树）</h2><p>二叉查找树具有的特性：</p><ol><li>左子树上所有结点的值均小于或等于它的根结点的值。</li><li>右子树上所有结点的值均大于或等于它的根结点的值。</li><li>左、右子树也分别为二叉排序树。</li></ol><h2 id="二叉平衡树alv"><a class="markdownIt-Anchor" href="#二叉平衡树alv"></a> 二叉平衡树（ALV）</h2><ol><li><p><strong>什么是二叉平衡树呢？</strong><br>1.具有二叉查找树的全部特性。</p><p>2.每个节点的左子树和右子树的高度差至多为1。<br><img src="https://img-blog.csdnimg.cn/2021011517325477.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppYWh1YW5f,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>平衡树基于这种特点就可以保证不会出现大量节点偏向于一边的情况了!（插入或者删除时，会发生左旋、右旋操作，使这棵树再次左右保持一定的平衡)</p></li></ol><p><strong>为什么有了平衡树还需要红黑树呢？</strong></p><p>虽然平衡树解决了二叉查找树退化为近似链表的缺点，能够把查找时间控制在O(logn)，不过却不是最佳的。</p><p>因为平衡树要求每个节点的左子树和右子树的高度差至多等于1，这个要求实在是太严了，导致每次进行插入删除节点的时候几乎都会破坏平衡树的第二个规则，进而我们都需要通过左旋和右旋来进行调整，使之再次成为一颗符合要求的平衡树。</p><p>显然，如果在那种插入、删除很频繁的场景中，平衡树需要频繁着进行调整，这会使平衡树的性能大打折扣，为了解决这个问题，于是有了红黑树!</p><h2 id="红黑树"><a class="markdownIt-Anchor" href="#红黑树"></a> 红黑树</h2><p>红黑树一种自平衡的二叉查找树。除了具有二叉查找的特性外，还具有的特性：</p><ul><li>节点是红色或黑色。</li><li>根节点是黑色。</li><li>每个叶子节点都是黑色的空节点(NIL节点)。</li><li>每个红色节点的两个子节点都是黑色。(从每个叶子到根的所有路径上不能有两个连续的红色节点)</li><li>从任一节点到其每个叶子的所有路径都包含相同数目的黑色节点。</li></ul><p><strong>hashmap为什么不使用AVL树而使用红黑树？</strong></p><ul><li><p>红黑树和AVL树都是<strong>最常用的平衡二叉搜索树</strong>，它们的查找、删除、修改都是O(lgn) time</p></li><li><p>AVL树和红黑树有几点比较和区别：<br>（1）AVL树是更加严格的平衡，因此可以提供更快的查找速度，一般读取查找密集型任务，适用AVL树。<br>（2）红黑树更适合于插入修改密集型任务。<br>（3）通常，AVL树的旋转比红黑树的旋转更加难以平衡和调试。</p></li><li><p><strong>在CurrentHashMap中是加锁了的，实际上是读写锁，如果写冲突就会等待，<br>如果插入时间过长必然等待时间更长，而红黑树相对AVL树他的插入更快！</strong></p></li></ul><h1 id="3java异常体系"><a class="markdownIt-Anchor" href="#3java异常体系"></a> 3.java异常体系</h1><p><img src="https://img-blog.csdnimg.cn/4fdce752e175433da01a0b98108bad7c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zi_5paH5LiN5Lya5YaZ5Luj56CB,size_14,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/a8d58114f57742a0b7686de13d05d1f1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zi_5paH5LiN5Lya5YaZ5Luj56CB,size_18,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p><strong>java异常体系</strong></p><ul><li><p><strong>Thorwable</strong>类（表示可抛出）是所有异常和错误的超类，两个直接子类为<strong>Error</strong>和<strong>Exception</strong>，分别表示错误和异常。</p></li><li><p>其中异常类<strong>Exception</strong>又分为运行时异常(<strong>RuntimeException</strong>)和非运行时异常， 这两种异常有很大的区别，也称之为不检查异常（<strong>Unchecked</strong> Exception）和检查异常（<strong>Checked</strong> Exception）。</p></li></ul><p><strong>Error与Exception</strong></p><ul><li><p><strong>Error</strong>错误：（这种错误无法处理）描述了Java运行时系统的内部错误和资源耗尽错误。一般是指虚拟机（JVM）相关的问题，如系统崩溃，虚拟机出错误等，这种错误无法恢复或不可能捕获，将导致应用程序中断，通常不处理。因为如果出现这样的内部错误，除了通告用户，并尽力使程序安全地终止之外，再也无能为力了。</p></li><li><p><strong>Exception</strong>异常：Java的异常分为两种，checked Exception（编译时异常也叫非运行时异常）和 RuntimeException（运行时异常）。</p></li></ul><p><strong>运行时异常与非运行时异常</strong></p><ul><li><p>运行时异常（逻辑方面）都是RuntimeException类及其子类异常，如<code>NullPointerException</code>、<code>IndexOutOfBoundsException</code>等，这些异常是不检查异常，程序中可以选择捕获处理，也可以不处理。这些异常一般是由程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常的发生。</p></li><li><p>非运行时异常（程序语法）是RuntimeException以外的异常，类型上都属于Exception类及其子类。从程序语法角度讲是必须进行处理的异常，如果不处理，程序就不能编译通过。如<code>IOException</code>、<code>SQLException</code>等以及用户自定义的Exception异常，一般情况下不自定义检查异常。</p></li></ul><p><strong>Java异常处理方法有</strong></p><ul><li><strong>抛出</strong>异常，<strong>捕捉</strong>异常。主要依赖于try、catch、finally、throw、throws五个关键字。</li></ul><h1 id="4面向对象"><a class="markdownIt-Anchor" href="#4面向对象"></a> 4.面向对象</h1><p><strong>面向对象理解</strong></p><ul><li><p>面向对象是模型化的，你只需抽象出一个类，这是一个封闭的盒子，在这里你拥有数据也拥有解决问题的方法。需要什么功能直接使用就可以了，不必去一步一步的实现，至于这个功能是如何实现的，管我们什么事？我们会用就 可以了。</p></li><li><p>面向对象的底层其实还是面向过程，把面向过程抽象成类，然后封装，方便我们使用的就是面向对象了。</p></li></ul><p><strong>面向过程理解</strong></p><ul><li>面向过程是具体化的，流程化的，解决一个问题，你需要一步一步的分析，一步一步的实现。</li></ul><p><strong>面向对象和面向过程的区别</strong></p><ul><li><strong>面向过程</strong><ul><li>优点：性能比面向对象高，因为类调用时需要实例化，开销比较大，比较消耗资源;比如单片机、 嵌入式开发、Linux/Unix等一般采用面向过程开发，性能是最重要的因素。</li><li>缺点：没有面向对象易维护、易复用、易扩展</li></ul></li><li><strong>面向对象</strong><ul><li>优点：易维护、易复用、易扩展，由于面向对象有封装、继承、多态性的特性，可以设计出 低耦合的系统，使系统更加灵活、更加易于维护</li><li>缺点：性能比面向过程低</li></ul></li></ul><h1 id="5接口与抽象类"><a class="markdownIt-Anchor" href="#5接口与抽象类"></a> 5.接口与抽象类</h1><p><strong>成员区别</strong></p><ul><li>抽象类<ul><li>构造方法：有构造方法，用于子类实例化使用。</li><li>成员变量：可以是变量，也可以是常量。</li><li>成员方法：可以是抽象的，也可以是非抽象的。</li></ul></li><li>接口<ul><li>构造方法：没有构造方法</li><li>成员变量：只能是常量。默认修饰符：public static final</li><li>成员方法：jdk1.7只能是抽象的。默认修饰符：public abstract (推荐：默认修饰符请自己永远手动给出)</li><li>jdk1.8可以写以default和static开头的具体方法</li></ul></li></ul><p><strong>类与接口的关系区别</strong></p><ul><li>类与类<ul><li>继承关系,只能单继承。可以多层继承。</li></ul></li><li>类与接口<ul><li>实现关系,可以单实现,也可以多实现。</li><li>类还可以在继承一个类的同时实现多个接口。</li></ul></li><li>接口与接口<ul><li>继承关系,可以单继承,也可以多继承。</li></ul></li></ul><p><strong>体现的理念不同</strong></p><ul><li>抽象类里面定义的都是一个继承体系中的共性内容。</li><li>接口是功能的集合,是一个体系额外的功能，是暴露出来的规则。</li></ul><p><strong>选择抽象类还是接口的依据</strong></p><ul><li>当你关注一个事物的本质的时候，用抽象类；当你关注一个操作的时候，用接口。</li><li>抽象类的功能要远超过接口，但是，定义抽象类的代价高。因为高级语言来说（从实际设计上来说也是）每个类只能继承一个类。在这个类中，你必须继承或编写出其所有子类的所有共性。虽然接口在功能上会弱化许多，但是它只是针对一个动作的描述。而且你可以在一个类中同时实现多个接口。在设计阶段会降低难度。</li></ul><h1 id="6静态变量和普通变量的区别"><a class="markdownIt-Anchor" href="#6静态变量和普通变量的区别"></a> 6.静态变量和普通变量的区别</h1><p><strong>所属目标不同</strong></p><ul><li>静态变量属于类的变量，普通变量属于对象的变量。</li></ul><p><strong>存储区域不同</strong></p><ul><li>静态变量存储在方法区的静态区，普通变量存储在堆区。</li></ul><p><strong>加载时间不同</strong></p><ul><li>静态变量是随时类的加载而加载的，随着类的消失而消失。</li><li>普通变量是随着对象的加载而加载，随着对象的消失而消失。</li></ul><p><strong>调用方式不同</strong></p><ul><li>静态变量只能通过类名，对象调用。</li><li>普通变量只能通过对象调用。</li></ul><p><strong>static可以修饰局部变量么？</strong></p><ul><li>不能是局部变量，可以是内部类，全局变量，方法，代码块。</li></ul><h1 id="7有了int为什么还要integer"><a class="markdownIt-Anchor" href="#7有了int为什么还要integer"></a> 7.有了int为什么还要Integer</h1><p>主要是因为面向对象的思想，因为Java语言是面向对象的，这也是它只所以流行的原因之一，对象封装有很多好处，可以把属性也就是数据跟处理这些数据的方法结合在一起，比如Integer就有parseInt()等方法来专门处理int型相关的数据，</p><p>另一个非常重要的原因就是在Java中绝大部分方法或类都是用来处理类类型对象的，如ArrayList集合类就只能以类作为他的存储对象，而这时如果想把一个int型的数据存入list是不可能的，必须把它包装成类，也就是Integer才能被List所接受。所以Integer的存在是很必要的。</p><h1 id="8java泛型的好处及底层原理"><a class="markdownIt-Anchor" href="#8java泛型的好处及底层原理"></a> 8.Java泛型的好处及底层原理</h1><p><strong>泛型好处</strong></p><ul><li>保证了类型的安全性，泛型可以使编译器知道一个对象的限定类型是什么，这样编译器就可以在一个高的程度上验证这个类型</li><li>消除了强制类型转换 使得代码可读性好，减少了很多出错的机会</li><li>泛型的好处是在编译的时候检查类型安全，并且所有的强制转换都是自动和隐式的，提高代码的重用率。</li><li>避免了不必要的装箱、拆箱操作，提高程序的性能</li></ul><p><strong>实现原理</strong></p><ul><li>泛型的实现是靠类型擦除技术 类型擦除是在编译期完成的 也就是在编译期 编译器会将泛型的类型参数都擦除成它的限定类型，如果没有则擦除为object类型之后在获取的时候再强制类型转换为对应的类型。</li><li>如果构建泛型实例时使用了泛型语法，那么编译器将标记该实例并关注该实例后续所有方法的调用，每次调用前都进行安全检查，非指定类型的方法都不能调用成功。</li></ul><h1 id="9java定时器实现"><a class="markdownIt-Anchor" href="#9java定时器实现"></a> 9.java定时器实现</h1><h2 id="使用timer和和timertask类"><a class="markdownIt-Anchor" href="#使用timer和和timertask类"></a> <strong>使用Timer和和TimerTask类</strong></h2><p>1、Timer和TimerTask是java.util包下的类，用于实现定时任务</p><p>步骤1：创建TimerTask定时器任务，可以通过匿名内部类的方式创建</p><p>步骤2：创建Timer定时器，调用定时器的方法执行定时器任务</p><p>2、Timer的两个方法schedule()和scheduleAtFixedRate()及其重载方法：</p><blockquote><p>void schedule(TimerTask task, long delay)：在指定时间后执行1次任务，其中delay表示时延，单位是毫秒，设置为1000，则表示1秒后执行一次定时器任务；</p><p>void schedule(TimerTask task, long delay, long period)：指定延迟指定时间后周期性地执行任务（delay毫秒后，每period毫秒执行一次）</p><p>void scheduleAtFixedRate(TimerTask task, long delay, long period)：指定延迟指定时间后周期性地执行任务（delay毫秒后，每period毫秒执行一次）</p><p>void scheduleAtFixedRate(TimerTask task, Date firstTime,long period) ：从指定日期firstTime开始，每period毫秒执行一次任务</p></blockquote><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TimerExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建定时器</span></span><br><span class="line">        <span class="type">Timer</span> <span class="variable">timer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Timer</span>();</span><br><span class="line">        <span class="comment">// 创建定时器任务</span></span><br><span class="line">        <span class="type">TimerTask</span> <span class="variable">timerTask</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TimerTask</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Hello world!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"> </span><br><span class="line">        timer.schedule(timerTask, <span class="number">1000</span>); <span class="comment">// 1秒后执行一次</span></span><br><span class="line">        timer.schedule(timerTask, <span class="number">2000</span>, <span class="number">2000</span>); <span class="comment">// 两秒后每两秒执行一次</span></span><br><span class="line">        timer.scheduleAtFixedRate(timerTask, <span class="number">3000</span>, <span class="number">3000</span>); <span class="comment">// 3秒后每3秒执行一次</span></span><br><span class="line">        timer.scheduleAtFixedRate(task, <span class="keyword">new</span> <span class="title class_">Date</span>(), <span class="number">4000</span>); <span class="comment">// 每4秒执行一次</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用线程池"><a class="markdownIt-Anchor" href="#使用线程池"></a> <strong>使用线程池</strong></h2><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TimerExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建定时器任务</span></span><br><span class="line">        <span class="type">TimerTask</span> <span class="variable">timerTask</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TimerTask</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Hello world!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"> </span><br><span class="line">        <span class="type">ScheduledExecutorService</span> <span class="variable">scheduledThreadPool</span> <span class="operator">=</span> Executors.newScheduledThreadPool(<span class="number">2</span>);</span><br><span class="line"> </span><br><span class="line">        scheduledThreadPool.schedule(timerTask, <span class="number">1000</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">        scheduledThreadPool.scheduleAtFixedRate(timerTask, <span class="number">1000</span>, <span class="number">1000</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用spring-task"><a class="markdownIt-Anchor" href="#使用spring-task"></a> 使用Spring Task</h2><p>步骤1：在springBoot启动类上添加@EnableScheduling注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringbootApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringbootApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>步骤2：创建一个定时任务类的bean，在类的方法上使用@Schedule注解，通过注解的cron属性设置定时器的属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TimerTask</span> &#123;</span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0 7 2 26 7 *&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">task</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;定时任务...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码指定在2022年7月26日02:07:00执行一次定时任务</p><h2 id="通过quartz任务调度工具"><a class="markdownIt-Anchor" href="#通过quartz任务调度工具"></a> 通过Quartz任务调度工具</h2><p>步骤1：在pom.xml中添加quartz的依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-quartz&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>步骤2：创建quartz的配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuartzConfig</span> &#123;</span><br><span class="line">    <span class="comment">// 创建一个JobDetail(工作详情)类对象,保存到Spring容器中，这个类用于封装我们编写的job接口实现类</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JobDetail <span class="title function_">jobDetail</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;showTime方法运行&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> JobBuilder.newJob(QuartzJob.class)   <span class="comment">// 绑定要运行的任务类的类对象</span></span><br><span class="line">                .withIdentity(<span class="string">&quot;job&quot;</span>)               <span class="comment">// 设置job的名称</span></span><br><span class="line">                .storeDurably()                     <span class="comment">// 信息持久</span></span><br><span class="line">                <span class="comment">// 设置storeDurably之后,当没有触发器指向这个JobDetail时,JobDetail也不会从</span></span><br><span class="line">                <span class="comment">// Spring容器中删除,如果不设置这行,就会自动从Spring容器中删除</span></span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 声明触发器，触发器决定我们的工作\任务何时触发</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Trigger <span class="title function_">trigger</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;showTime触发器运行&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 定义Cron表达式，每分钟触发一次</span></span><br><span class="line">    <span class="type">CronScheduleBuilder</span> <span class="variable">cronScheduleBuilder</span> <span class="operator">=</span> </span><br><span class="line">            CronScheduleBuilder.cronSchedule(<span class="string">&quot;0/10 * * * * ?&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> TriggerBuilder.newTrigger()</span><br><span class="line">            .forJob(jobDetail()) <span class="comment">// 绑定JobDetail对象</span></span><br><span class="line">            .withIdentity(<span class="string">&quot;trigger&quot;</span>) <span class="comment">// 定义触发器名称</span></span><br><span class="line">            .withSchedule(cronScheduleBuilder) <span class="comment">// 绑定Cron表达式</span></span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>}</p><p>步骤:3：定义Job</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuartzJob</span> <span class="keyword">implements</span> <span class="title class_">Job</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(JobExecutionContext jobExecutionContext)</span> &#123;</span><br><span class="line">        <span class="comment">// 输出当前时间</span></span><br><span class="line">        System.out.println(LocalDateTime.now());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="10java中有哪些队列"><a class="markdownIt-Anchor" href="#10java中有哪些队列"></a> 10.java中有哪些队列</h1><p>Java 中的队列可以从不同的维度进行分类，例如可以从阻塞和非阻塞进行分类，也可以从有界和无界进行分类，而这里将从队列的功能上进行分类，例如：优先队列、普通队列、双端队列、延迟队列等。</p><img src="https://mmbiz.qpic.cn/mmbiz_png/HrWw6ZuXCsggvBwoTc0Eia361vGz3pkchotZ21QmENJf0ZV23AZLFlwsHYTH4ficmHuYcE9K925FU9Jv1bpKPIWw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片" style="zoom:50%;"><ul><li><p><strong>普通队列</strong></p><ul><li>普通队列（Queue）是指实现了先进先出的基本队列，例如 <code>ArrayBlockingQueue</code> 和 <code>LinkedBlockingQueue</code>，其中 <code>ArrayBlockingQueue</code> 是用数组实现的普通队列，而 <code>LinkedBlockingQueue</code> 是使用链表实现的普通队列</li></ul></li><li><p><strong>双端队列</strong></p><ul><li>双端队列（Deque）是指队列的头部和尾部都可以同时入队和出队的数据结构。例如：LinkedBlockingDeque</li></ul></li><li><p><strong>优先队列</strong></p><ul><li><p>优先队列（PriorityQueue）是一种特殊的队列，它并不是先进先出的，而是优先级高的元素先出队。</p></li><li><p>优先队列是根据二叉堆实现的，二叉堆的数据结构如下图所示：</p><img src="https://mmbiz.qpic.cn/mmbiz_png/HrWw6ZuXCsggvBwoTc0Eia361vGz3pkchyZOWmqUvgOcwALfAUMA15FH7dyNxrDxd9lM0UabG2AEWrfQ7S11XcQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片" style="zoom:50%;"><p>二叉堆分为两种类型：一种是最大堆一种是最小堆。以上展示的是最大堆，<strong>在最大堆中，任意一个父节点的值都大于等于它左右子节点的值。</strong></p><blockquote><p>因为优先队列是基于二叉堆实现的，因此它可以将优先级最好的元素先出队。</p></blockquote></li><li><p><strong>优先队列的出队是不考虑入队顺序的，它始终遵循的是优先级高的元素先出队</strong>。</p></li></ul></li><li><p><strong>延迟队列</strong></p><ul><li>延迟队列（DelayQueue）是基于优先队列 <code>PriorityQueue</code> 实现的，它可以看作是一种以时间为度量单位的优先的队列，当入队的元素到达指定的延迟时间之后方可出队。</li></ul></li><li><p><strong>其他队列</strong>（例如SynchronousQueue同步移交队列）</p><ul><li>在 Java 的队列中有一个比较特殊的队列 <code>SynchronousQueue</code>，它的特别之处在于它内部没有容器，每次进行 <code>put()</code> 数据后（添加数据），必须等待另一个线程拿走数据后才可以再次添加数据</li></ul></li></ul><h1 id="11获取类中私有属性"><a class="markdownIt-Anchor" href="#11获取类中私有属性"></a> 11.获取类中私有属性</h1><p><strong>通过反射获得</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取学生类的字节码对象</span></span><br><span class="line">Class clazzClass=Class.forName(<span class="string">&quot;com.test2.Student&quot;</span>);</span><br><span class="line"><span class="comment">//获取学生对象</span></span><br><span class="line">Object stuObject=clazzClass.newInstance();</span><br><span class="line"><span class="comment">//获取私有的字段对象</span></span><br><span class="line">Field field=clazzClass.getDeclaredField(<span class="string">&quot;nameString&quot;</span>);</span><br><span class="line">field.setAccessible(<span class="literal">true</span>);<span class="comment">//设置发射时取消Java的访问检查，暴力访问</span></span><br><span class="line">System.out.println(field);</span><br><span class="line">field.set(stuObject, <span class="string">&quot;桂贤松&quot;</span>);</span><br><span class="line">System.out.println(stuObject);<span class="comment">//获取的是地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使其获取到值</span></span><br><span class="line">Object nameObject=field.get(stuObject);</span><br><span class="line">System.out.println(nameObject);</span><br></pre></td></tr></table></figure><h1 id="12分布式事务"><a class="markdownIt-Anchor" href="#12分布式事务"></a> 12.分布式事务</h1><p>满足<strong>ACID</strong>（原子性、一致性、隔离性、持久性）的一组操作，可以被称为一个事务。随着计算机系统的发展，越来越多的采用分布式的架构来对外提供服务，但是，不同的机器的处理性能、存储性能、网络状态等各有不同，让分布式集群始终对外提供可用的一致性服务一直是需要处理的问题。</p><p>为了保证数据变更请求在整个分布式环境下正确地执行，不会导致部分服务器暂时崩溃导致整个集群提供的服务和数据不再相同，在整个分布式系统处理数据变更请求的过程中，需要引入分布式事务的概念。常见的提交方式有<strong>二阶段提交</strong>（Two-phase Commit，2PC）和<strong>三阶段提交</strong>（Three-phase commit，3PC）。</p><h2 id="二阶段提交"><a class="markdownIt-Anchor" href="#二阶段提交"></a> 二阶段提交</h2><p>2PC，两阶段提交，将事务的提交过程分为资源准备和资源提交两个阶段，并且由事务协调者来协调所有事务参与者，如果准备阶段所有事务参与者都预留资源成功，则进行第二阶段的资源提交，否则事务协调者回滚资源。</p><p>第一阶段：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/1de66e95f974f92ea203bbf930cbd029.png" alt="img"></p><p>在XA分布式事务的第一阶段，作为事务协调者的节点会首先向所有的参与者节点发送Prepare请求。</p><p>在接到Prepare请求之后，每一个参与者节点会各自执行与事务有关的数据更新，写入Undo Log和Redo Log。如果参与者执行成功，暂时不提交事务，而是向事务协调节点返回“完成”消息。</p><p>当事务协调者接到了所有参与者的返回消息，整个分布式事务将会进入第二阶段。</p><p>第二阶段：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/98effcf44e4be9132f959c65d8b555ad.png" alt="img"></p><p>在XA分布式事务的第二阶段，如果事务协调节点在之前所收到都是正向返回，那么它将会向所有事务参与者发出Commit请求。</p><p>接到Commit请求之后，事务参与者节点会各自进行本地的事务提交，并释放锁资源。当本地事务完成提交后，将会向事务协调者返回“完成”消息。</p><p>当事务协调者接收到所有事务参与者的“完成”反馈，整个分布式事务完成。</p><p>以上所描述的是XA两阶段提交的正向流程，接下来我们看一看失败情况的处理流程：</p><p>第一阶段：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/cdb51a08cd77f37075796894f272ffda.png" alt="img"></p><p>第二阶段：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/1e51530a4364d398294996edb07f8349.png" alt="img"></p><p>在XA的第一阶段，如果某个事务参与者反馈失败消息，说明该节点的本地事务执行不成功，必须回滚。</p><p>于是在第二阶段，事务协调节点向所有的事务参与者发送Abort请求。接收到Abort请求之后，各个事务参与者节点需要在本地进行事务的回滚操作，回滚操作依照Undo Log来进行。</p><p><strong>两阶段提交的不足</strong></p><ul><li><p>1.性能问题</p><ul><li>XA协议遵循强一致性。在事务执行过程中，各个节点占用着数据库资源，只有当所有节点准备完毕，事务协调者才会通知提交，参与者提交后释放资源。这样的过程有着非常明显的性能问题。</li></ul></li><li><p>2.协调者单点故障问题</p><ul><li>事务协调者是整个XA模型的核心，一旦事务协调者节点挂掉，参与者收不到提交或是回滚通知，参与者会一直处于中间状态无法完成事务。</li></ul></li><li><p>3.丢失消息导致的不一致问题。</p><ul><li>在XA协议的第二个阶段，如果发生局部网络问题，一部分事务参与者收到了提交消息，另一部分事务参与者没收到提交消息，那么就导致了节点之间数据的不一致。</li></ul></li><li><p>二阶段无法解决的问题</p><ul><li>协调者在发出 commit 消息之后宕机，而唯一接收到这条消息的参与者同时也宕机了，那么即使协调者通过选举协议产生了新的协调者，这条事务的状态也是不确定的，没人知道事务是否被已经提交。</li></ul></li></ul><h2 id="三阶段提交"><a class="markdownIt-Anchor" href="#三阶段提交"></a> 三阶段提交</h2><p>3PC，三阶段提交协议，是二阶段提交协议的改进版本，三阶段提交有两个改动点：</p><p>（1）在协调者和参与者中都引入超时机制<br>（2）在第一阶段和第二阶段中插入一个准备阶段，保证了在最后提交阶段之前各参与节点的状态是一致的。<br>所以3PC会分为3个阶段，CanCommit 准备阶段、PreCommit 预提交阶段、DoCommit 提交阶段，处理流程如下：</p><p><img src="https://img-blog.csdnimg.cn/a7453220330b4aa1b4fcced3f839ca15.png" alt="img"></p><p><strong>1、阶段一：CanCommit 准备阶段</strong></p><p>​        协调者向参与者发送 canCommit 请求，参与者如果可以提交就返回Yes响应，否则返回No响应，具体流程如下：</p><ul><li><p>（1）事务询问：协调者向所有参与者发出包含事务内容的 canCommit 请求，询问是否可以提交事务，并等待所有参与者答复。</p></li><li><p>（2）响应反馈：参与者收到 canCommit 请求后，如果认为可以执行事务操作，则反馈 yes 并进入预备状态，否则反馈 no。</p></li></ul><p><strong>2、阶段二：PreCommit 阶段</strong></p><p>​        协调者根据参与者的反应情况来决定是否可以进行事务的 PreCommit 操作。根据响应情况，有以下两种可能：</p><p><strong>（1）执行事务：</strong></p><p>假如所有参与者均反馈 yes，协调者预执行事务，具体如下：</p><ul><li>① 发送预提交请求：协调者向参与者发送 PreCommit 请求，并进入准备阶段</li><li>② 事务预提交 ：参与者接收到 PreCommit 请求后，会执行本地事务操作，并将 undo 和 redo 信息记录到事务日志中（但不提交事务）</li><li>③ 响应反馈 ：如果参与者成功的执行了事务操作，则返回ACK响应，同时开始等待最终指令。</li></ul><p><img src="https://img-blog.csdnimg.cn/7cc0f781464f4844b0609a975e6bbede.png" alt="img"></p><p><strong>（2）中断事务：</strong></p><p>假如有任何一个参与者向协调者发送了No响应，或者等待超时之后，协调者都没有接到参与者的响应，那么就执行事务的中断，流程如下：</p><ul><li>① 发送中断请求 ：协调者向所有参与者发送 abort 请求。</li><li>② 中断事务 ：参与者收到来自协调者的 abort 请求之后（或超时之后，仍未收到协调者的请求），执行事务的中断。</li></ul><p><img src="https://img-blog.csdnimg.cn/198e269a57e24ebe89e7149f96228eda.png" alt="img"></p><p><strong>3、阶段三：doCommit阶段</strong></p><p>该阶段进行真正的事务提交，也可以分为以下两种情况：</p><p><strong>（1）提交事务：</strong></p><ul><li>① 发送提交请求：协调接收到所有参与者发送的ACK响应，那么他将从预提交状态进入到提交状态，并向所有参与者发送 doCommit 请求</li><li>② 本地事务提交：参与者接收到doCommit请求之后，执行正式的事务提交，并在完成事务提交之后释放所有事务资源</li><li>③ 响应反馈：事务提交完之后，向协调者发送ack响应。</li><li>④ 完成事务：协调者接收到所有参与者的ack响应之后，完成事务。</li></ul><p><img src="https://img-blog.csdnimg.cn/c5e9a0d708a441119b9b43c2dd897057.png" alt="img"></p><p><strong>（2）中断事务：</strong></p><p>任何一个参与者反馈 no，或者等待超时后协调者尚无法收到所有参与者的反馈，即中断事务</p><ul><li><p>① 发送中断请求：如果协调者处于工作状态，向所有参与者发出 abort 请求</p></li><li><p>② 事务回滚：参与者接收到abort请求之后，利用其在阶段二记录的undo信息来执行事务的回滚操作，并在完成回滚之后释放所有的事务资源。</p></li><li><p>③ 反馈结果：参与者完成事务回滚之后，向协调者反馈ACK消息</p></li><li><p>④ 中断事务：协调者接收到参与者反馈的ACK消息之后，执行事务的中断。</p><pre><code>  进入doCommit阶段后，无论协调者出现问题，或者协调者与参与者之间的网络出现问题，都会导致参与者无法接收到协调者发出的 doCommit 请求或 abort 请求。此时，参与者都会在等待超时之后，继续执行事务提交。这其实基于概率来决定的，当进入第三阶段时，说明第一阶段收到所有参与者的CanCommit响应都是Yes，意味着大家都同意修改了，并且第二阶段所有的参与者对协调者的PreCommit请求也都是同意的。所以，一句话概括就是，当进入第三阶段时，由于网络超时等原因，虽然参与者没有收到commit或者abort响应，但是他有理由相信：成功提交的几率很大。</code></pre></li></ul><p><strong>3PC的优缺点：</strong></p><p>与2PC相比，3PC降低了阻塞范围，并且在等待超时后，协调者或参与者会中断事务，避免了协调者单点问题，阶段三中协调者出现问题时，参与者会继续提交事务。</p><p>​    数据不一致问题依然存在，当在参与者收到 preCommit 请求后等待 doCommit 指令时，此时如果协调者请求中断事务，而协调者因为网络问题无法与参与者正常通信，会导致参与者继续提交事务，造成数据不一致。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2PC和3PC都无法保证数据绝对的一致性，一般为了预防这种问题，可以添加一个报警，比如监控到事务异常的时候，通过脚本自动补偿差异的信息。</span><br></pre></td></tr></table></figure><h2 id="ttc"><a class="markdownIt-Anchor" href="#ttc"></a> TTC</h2><p><strong>1、什么是TCC</strong>：<br>TCC（Try Confirm Cancel）是应用层的两阶段提交，所以对代码的侵入性强，其核心思想是：针对每个操作，都要实现对应的确认和补偿操作，也就是业务逻辑的每个分支都需要实现 try、confirm、cancel 三个操作，第一阶段由业务代码编排来调用Try接口进行资源预留，当所有参与者的 Try 接口都成功了，事务协调者提交事务，并调用参与者的 confirm 接口真正提交业务操作，否则调用每个参与者的 cancel 接口回滚事务，并且由于 confirm 或者 cancel 有可能会重试，因此对应的部分需要支持幂等。</p><p><strong>2、TCC的执行流程</strong>：</p><p>​        TCC的执行流程可以分为两个阶段，分别如下：</p><ul><li><p>（1）第一阶段：Try，业务系统做检测并预留资源 (加锁，锁住资源)，比如常见的下单，在try阶段，我们不是真正的减库存，而是把下单的库存给锁定住。</p></li><li><p>（2）第二阶段：根据第一阶段的结果决定是执行confirm还是cancel</p><ul><li>Confirm：执行真正的业务（执行业务，释放锁）</li><li>Cancle：是对Try阶段预留资源的释放（出问题，释放锁）</li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/fff26246488d4638a321ab656303a216.png" alt="img"></p><p><strong>3、TCC如何保证最终一致性</strong>：</p><ul><li>TCC 事务机制以 Try 为中心的，Confirm 确认操作和 Cancel 取消操作都是围绕 Try 而展开。因此，Try 阶段中的操作，其保障性是最好的，即使失败，仍然有 Cancel 取消操作可以将其执行结果撤销。</li><li>Try阶段执行成功并开始执行 Confirm 阶段时，默认 Confirm 阶段是不会出错的，也就是说只要 Try 成功，Confirm 一定成功（TCC设计之初的定义）</li><li>Confirm 与 Cancel 如果失败，由TCC框架进行重试补偿存在极低概率在CC环节彻底失败，则需要定时任务或人工介入</li></ul><p><strong>4、TCC的注意事项</strong>：</p><ul><li><p>（1）<strong>允许空回滚</strong>：</p><pre><code>  空回滚出现的原因是 Try 超时或者丢包，导致 TCC 分布式事务二阶段的 回滚，触发 Cancel 操作，此时事务参与者未收到Try，但是却收到了Cancel 请求。  所以 cancel 接口在实现时需要允许空回滚，也就是 Cancel 执行时如果发现没有对应的事务 xid 或主键时，需要返回回滚成功，让事务服务管理器认为已回滚。</code></pre></li><li><p>（2）<strong>防悬挂控制</strong>：</p><pre><code>  悬挂指的是二阶段的 Cancel 比 一阶段的Try 操作先执行，出现该问题的原因是 Try 由于网络拥堵而超时，导致事务管理器生成回滚，触发 Cancel 接口，但之后拥堵在网络的 Try 操作又被资源管理器收到了，但是 Cancel 比 Try 先到。但按照前面允许空回滚的逻辑，回滚会返回成功，事务管理器认为事务已回滚成功，所以此时应该拒绝执行空回滚之后到来的 Try 操作，否则会产生数据不一致。因此我们可以在 Cancel 空回滚返回成功之前，先记录该条事务 xid 或业务主键，标识这条记录已经回滚过，Try 接口执行前先检查这条事务xid或业务主键是否已经标记为回滚成功，如果是则不执行 Try 的业务操作。</code></pre></li><li><p>（3）<strong>幂等控制</strong>：</p><pre><code>  由于网络原因或者重试操作都有可能导致 Try - Confirm - Cancel 3个操作的重复执行，所以使用 TCC 时需要注意这三个操作的幂等控制，通常我们可以使用事务 xid 或业务主键判重来控制。</code></pre></li></ul><p><strong>5、TCC方案的优缺点</strong>：</p><ul><li>（1）TCC 事务机制相比于上面介绍的 XA 事务机制，有以下优点：<ul><li>性能提升：具体业务来实现，控制资源锁的粒度变小，不会锁定整个资源。</li><li>数据最终一致性：基于 Confirm 和 Cancel 的幂等性，保证事务最终完成确认或者取消，保证数据的一致性。</li><li>可靠性：解决了 XA 协议的协调者单点故障问题，由主业务方发起并控制整个业务活动，业务活动管理器也变成多点，引入集群。</li></ul></li><li>（2）缺点<ul><li>TCC 的 Try、Confirm 和 Cancel 操作功能要按具体业务来实现，业务耦合度较高，提高了开发成本。</li></ul></li></ul><h2 id="saga事务"><a class="markdownIt-Anchor" href="#saga事务"></a> Saga事务</h2><p><strong>1、什么是Saga事务</strong>：</p><p>​        Saga 事务核心思想是将长事务拆分为多个本地短事务并依次正常提交，如果所有短事务均执行成功，那么分布式事务提交；如果出现某个参与者执行本地事务失败，则由 Saga 事务协调器协调根据相反顺序调用补偿操作，回滚已提交的参与者，使分布式事务回到最初始的状态。Saga 事务基本协议如下：</p><ul><li>（1）每个 Saga 事务由一系列幂等的有序子事务(sub-transaction) Ti 组成。</li><li>（2）每个 Ti 都有对应的幂等补偿动作 Ci，补偿动作用于撤销 Ti 造成的结果。</li></ul><p>与TCC事务补偿机制相比，TCC有一个预留(Try)动作，相当于先报存一个草稿，然后才提交；Saga事务没有预留动作，直接提交。</p><p><strong>2、Saga的恢复策略</strong>：</p><p>对于事务异常，Saga提供了两种恢复策略，分别如下：</p><p><strong>（1）向后恢复(backward recovery)</strong>：</p><p>当执行事务失败时，补偿所有已完成的事务，是“一退到底”的方式，这种做法的效果是撤销掉之前所有成功的子事务，使得整个 Saga 的执行结果撤销。如下图：</p><p><img src="https://img-blog.csdnimg.cn/c7048a60065248c9988386df94e651c3.png" alt="img"></p><pre><code>     从上图可知事务执行到了支付事务T3，但是失败了，因此事务回滚需要从C3,C2,C1依次进行回滚补偿，对应的执行顺序为：T1,T2,T3,C3,C2,C1。</code></pre><p><strong>（2）向前恢复(forward recovery)</strong>：</p><p>​    对于执行不通过的事务，会尝试重试事务，这里有一个假设就是每个子事务最终都会成功，这种方式适用于必须要成功的场景，事务失败了重试，不需要补偿。流程如下图：</p><p><img src="https://img-blog.csdnimg.cn/4e6d3c22855748bfa78d93e17a46762e.png" alt="img"></p><p><strong>3、Saga事务的实现方式</strong>：</p><p>Saga事务有两种不同的实现方式，分别如下：</p><ul><li>命令协调（Order Orchestrator）</li><li>事件编排（Event Choreographyo）</li></ul><p><strong>（1）命令协调</strong>：</p><p>​    中央协调器（Orchestrator，简称 OSO）以命令/回复的方式与每项服务进行通信，全权负责告诉每个参与者该做什么以及什么时候该做什么。整体流程如下图：</p><p><img src="https://img-blog.csdnimg.cn/eec3c06422d342a1a2e8c30c3b2e60fb.png" alt="img"></p><ul><li>① 事务发起方的主业务逻辑请求 OSO 服务开启订单事务</li><li>② OSO 向库存服务请求扣减库存，库存服务回复处理结果。</li><li>③ OSO 向订单服务请求创建订单，订单服务回复创建结果。</li><li>④ OSO 向支付服务请求支付，支付服务回复处理结果。</li><li>⑤ 主业务逻辑接收并处理 OSO 事务处理结果回复。</li></ul><p>​        中央协调器 OSO 必须事先知道执行整个事务所需的流程，如果有任何失败，它还负责通过向每个参与者发送命令来撤销之前的操作来协调分布式的回滚，基于中央协调器协调一切时，回滚要容易得多，因为协调器默认是执行正向流程，回滚时只要执行反向流程即可。</p><p><strong>（2）事件编排</strong>：</p><p>​    命令协调方式基于中央协调器实现，所以有单点风险，但是事件编排方式没有中央协调器。事件编排的实现方式中，每个服务产生自己的时间并监听其他服务的事件来决定是否应采取行动。</p><p>​    在事件编排方法中，第一个服务执行一个事务，然后发布一个事件，该事件被一个或多个服务进行监听，这些服务再执行本地事务并发布（或不发布）新的事件。当最后一个服务执行本地事务并且不发布任何事件时，意味着分布式事务结束，或者它发布的事件没有被任何 Saga 参与者听到都意味着事务结束。</p><p><img src="https://img-blog.csdnimg.cn/1b89cf537a1b408f8683a90f7e8b0c85.png" alt="img"></p><ul><li><p>① 事务发起方的主业务逻辑发布开始订单事件。</p></li><li><p>② 库存服务监听开始订单事件，扣减库存，并发布库存已扣减事件。</p></li><li><p>③ 订单服务监听库存已扣减事件，创建订单，并发布订单已创建事件。</p></li><li><p>④ 支付服务监听订单已创建事件，进行支付，并发布订单已支付事件。</p></li><li><p>⑤ 主业务逻辑监听订单已支付事件并处理。</p><p>如果事务涉及 2 至 4 个步骤，则非常合适使用事件编排方式，它是实现 Saga 模式的自然方式，它很简单，容易理解，不需要太多的代码来构建。</p></li></ul><p><strong>4、Saga事务的优缺点</strong>：</p><p><strong>（1）命令协调设计的优缺点</strong>：</p><p>① 优点：</p><ul><li>服务之间关系简单，避免服务间循环依赖，因为 Saga 协调器会调用 Saga 参与者，但参与者不会调用协调器。</li><li>程序开发简单，只需要执行命令/回复(其实回复消息也是一种事件消息)，降低参与者的复杂性。</li><li>易维护扩展，在添加新步骤时，事务复杂性保持线性，回滚更容易管理，更容易实施和测试。</li></ul><p>② 缺点：</p><ul><li>中央协调器处理逻辑容易变得庞大复杂，导致难以维护。</li><li>存在协调器单点故障风险。</li></ul><p><strong>（2）事件编排设计的优缺点</strong>：</p><p>① 优点：</p><ul><li>避免中央协调器单点故障风险。</li><li>当涉及的步骤较少服务开发简单，容易实现。</li></ul><p>② 缺点：</p><ul><li>服务之间存在循环依赖的风险。</li><li>当涉及的步骤较多，服务间关系混乱，难以追踪调测。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">由于 Saga 模型没有 Prepare 阶段，因此事务间不能保证隔离性。当多个 Saga 事务操作同一资源时，就会产生更新丢失、脏数据读取等问题，这时需要在业务层控制并发，例如：在应用层面加锁，或者应用层面预先冻结资源。</span><br></pre></td></tr></table></figure><h2 id="本地消息表"><a class="markdownIt-Anchor" href="#本地消息表"></a> 本地消息表</h2><p><strong>1、什么是本地消息表</strong>：<br>本地消息表的核心思路就是将分布式事务拆分成本地事务进行处理，在该方案中主要有两种角色：事务主动方和事务被动方。事务主动发起方需要额外新建事务消息表，并在本地事务中完成业务处理和记录事务消息，并轮询事务消息表的数据发送事务消息，事务被动方基于消息中间件消费事务消息表中的事务。</p><p>​    这样可以避免以下两种情况导致的数据不一致性：</p><ul><li>业务处理成功、事务消息发送失败</li><li>业务处理失败、事务消息发送成功</li></ul><p><strong>2、本地消息表的执行流程</strong>：</p><p><img src="https://img-blog.csdnimg.cn/4ae385034213403fa74f5374b226e505.png" alt="img"></p><ul><li>① 事务主动方在同一个本地事务中处理业务和写消息表操作</li><li>② 事务主动方通过消息中间件，通知事务被动方处理事务消息。消息中间件可以基于 Kafka、RocketMQ 消息队列，事务主动方主动写消息到消息队列，事务消费方消费并处理消息队列中的消息。</li><li>③ 事务被动方通过消息中间件，通知事务主动方事务已处理的消息。</li><li>④ 事务主动方接收中间件的消息，更新消息表的状态为已处理。</li></ul><p>一些必要的容错处理如下：</p><ul><li>当①处理出错，由于还在事务主动方的本地事务中，直接回滚即可</li><li>当②、③处理出错，由于事务主动方本地保存了消息，只需要轮询消息重新通过消息中间件发送，通知事务被动方重新读取消息处理业务即可。</li><li>如果是业务上处理失败，事务被动方可以发消息给事务主动方回滚事务</li><li>如果事务被动方已经消费了消息，事务主动方需要回滚事务的话，需要发消息通知事务主动方进行回滚事务。</li></ul><p><strong>3、本地消息表的优缺点</strong>：</p><p>（1）优点：</p><ul><li>从应用设计开发的角度实现了消息数据的可靠性，消息数据的可靠性不依赖于消息中间件，弱化了对 MQ 中间件特性的依赖。<br>方案轻量，容易实现。</li></ul><p>（2）缺点：</p><ul><li>与具体的业务场景绑定，耦合性强，不可公用</li><li>消息数据与业务数据同库，占用业务系统资源</li><li>业务系统在使用关系型数据库的情况下，消息服务性能会受到关系型数据库并发性能的局限</li></ul><p>##　MQ事务消息</p><p>1、MQ事务消息的执行流程：</p><p>​        基于MQ的分布式事务方案本质上是对本地消息表的封装，整体流程与本地消息表一致，唯一不同的就是将本地消息表存在了MQ内部，而不是业务数据库中，如下图：</p><p><img src="https://img-blog.csdnimg.cn/c01e11f8061e462baccad1404c82e8d7.png" alt="img"></p><p>​     由于将本地消息表存在了MQ内部，那么MQ内部的处理尤为重要，下面主要基于 RocketMQ4.3 之后的版本介绍 MQ 的分布式事务方案</p><p><strong>2、RocketMQ事务消息</strong>：</p><p>​        在本地消息表方案中，保证事务主动方发写业务表数据和写消息表数据的一致性是基于数据库事务，而 RocketMQ 的事务消息相对于普通 MQ提供了 2PC 的提交接口，方案如下：</p><p><img src="https://img-blog.csdnimg.cn/033c99659a5349f6bfc9f8afb83709b1.png" alt="img"></p><p><strong>（1）正常情况</strong>：</p><p>在事务主动方服务正常，没有发生故障的情况下，发消息流程如下：</p><ul><li>步骤①：发送方向 MQ Server(MQ服务方)发送 half 消息</li><li>步骤②：MQ Server 将消息持久化成功之后，向发送方 ack 确认消息已经发送成功</li><li>步骤③：发送方开始执行本地事务逻辑</li><li>步骤④：发送方根据本地事务执行结果向 MQ Server 提交二次确认（commit 或是 rollback）。</li><li>最终步骤：MQ Server 如果收到的是 commit 操作，则将半消息标记为可投递，MQ订阅方最终将收到该消息；若收到的是 rollback 操作则删除 half 半消息，订阅方将不会接受该消息</li></ul><p><strong>（2）异常情况</strong>：</p><p>在断网或者应用重启等异常情况下，图中的步骤④提交的二次确认超时未到达 MQ Server，此时的处理逻辑如下：</p><ul><li>步骤⑤：MQ Server 对该消息发起消息回查</li><li>步骤⑥：发送方收到消息回查后，需要检查对应消息的本地事务执行的最终结果</li><li>步骤⑦：发送方根据检查得到的本地事务的最终状态再次提交二次确认。</li><li>最终步骤：MQ Server基于 commit/rollback 对消息进行投递或者删除。</li></ul><p><strong>3、MQ事务消息的优缺点</strong>：</p><p>（1）优点：相比本地消息表方案，MQ 事务方案优点是：</p><ul><li>消息数据独立存储 ，降低业务系统与消息系统之间的耦合</li><li>吞吐量大于使用本地消息表方案</li></ul><p>（2）缺点：</p><ul><li>一次消息发送需要两次网络请求(half 消息 + commit/rollback 消息) 。</li><li>业务处理服务需要实现消息状态回查接口。</li></ul><h2 id="最大努力通知"><a class="markdownIt-Anchor" href="#最大努力通知"></a> 最大努力通知</h2><p>最大努力通知也称为定期校对，是对MQ事务方案的进一步优化。它在事务主动方增加了消息校对的接口，如果事务被动方没有接收到主动方发送的消息，此时可以调用事务主动方提供的消息校对的接口主动获取</p><p><img src="https://img-blog.csdnimg.cn/0b96a31afd174dceaf295d826cbaa787.png" alt="img"></p><p>​     在可靠消息事务中，事务主动方需要将消息发送出去，并且让接收方成功接收消息，这种可靠性发送是由事务主动方保证的；但是最大努力通知，事务主动方仅仅是尽最大努力（重试，轮询…）将事务发送给事务接收方，所以存在事务被动方接收不到消息的情况，此时需要事务被动方主动调用事务主动方的消息校对接口查询业务消息并消费，这种通知的可靠性是由事务被动方保证的。</p><p>​    所以最大努力通知适用于业务通知类型，例如微信交易的结果，就是通过最大努力通知方式通知各个商户，既有回调通知，也有交易查询接口。</p><h2 id="各方案常见使用场景"><a class="markdownIt-Anchor" href="#各方案常见使用场景"></a> 各方案常见使用场景</h2><ul><li><strong>2PC/3PC</strong>：依赖于数据库，能够很好的提供强一致性和强事务性，但延迟比较高，比较适合传统的单体应用，在同一个方法中存在跨库操作的情况，不适合高并发和高性能要求的场景。</li><li><strong>TCC</strong>：适用于执行时间确定且较短，实时性要求高，对数据一致性要求高，比如互联网金融企业最核心的三个服务：交易、支付、账务。</li><li><strong>本地消息表/MQ 事务</strong>：适用于事务中参与方支持操作幂等，对一致性要求不高，业务上能容忍数据不一致到一个人工检查周期，事务涉及的参与方、参与环节较少，业务上有对账/校验系统兜底。</li><li><strong>Saga 事务</strong>：由于 Saga 事务不能保证隔离性，需要在业务层控制并发，适合于业务场景事务并发操作同一资源较少的情况。Saga 由于缺少预提交动作，导致补偿动作的实现比较麻烦，例如业务是发送短信，补偿动作则得再发送一次短信说明撤销，用户体验比较差。所以，Saga 事务较适用于补偿动作容易处理的场景</li></ul><h1 id="13其他"><a class="markdownIt-Anchor" href="#13其他"></a> 13.其他</h1><p><strong>字符串数据结构在C语言的底层实现，是字节数组吗。</strong></p><ul><li>jdk1.8及以前String底层使用是char[]，1.9开始使用byte[]</li></ul><p><strong>原子变量的实现原理</strong></p><ul><li>底层用到都是cas，类中用了unsafe来实现cas<ul><li>Unsafe 对象提供了非常底层的，操作内存、线程的方法，Unsafe 对象不能直接调用，只能通过反射获得</li></ul></li></ul><p><strong>有没有更好的计数器解决策略</strong></p><ul><li>LongAdder</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1equals和hashcode的区别&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1equals和hashcode的区别&quot;&gt;&lt;/a&gt; 1.equals和hashcode的区别&lt;/h1&gt;
&lt;p&gt;在Java中任何一个对象都具备equal</summary>
      
    
    
    
    <category term="javase" scheme="http://cloud-tour.github.io/categories/javase/"/>
    
    
    <category term="java" scheme="http://cloud-tour.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>debian系统下安装nginx</title>
    <link href="http://cloud-tour.github.io/2022/10/08/debian%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85nginx/"/>
    <id>http://cloud-tour.github.io/2022/10/08/debian%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85nginx/</id>
    <published>2022-10-08T04:14:18.807Z</published>
    <updated>2022-10-08T04:29:18.082Z</updated>
    
    <content type="html"><![CDATA[<p>​博主在工作学习时，经常性使用到nginx，但是某些时候有一些指令总是忘记，去网上收缩有甚是繁琐，因此用本篇博客记录安装的指令，与最后各种文件存放的位置</p><h1 id="debian下安装nginx"><a class="markdownIt-Anchor" href="#debian下安装nginx"></a> debian下安装nginx</h1><ul><li>在安装nginx之前，需要先安装一些插件，使得后面nginx能够正常运行</li><li>gcc</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install -y build-essential</span><br></pre></td></tr></table></figure><ul><li>正则库</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install -y libpcre3 libpcre3-dev</span><br></pre></td></tr></table></figure><ul><li>zlib库</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install -y zlib1g-dev</span><br></pre></td></tr></table></figure><ul><li>OpenSSL库</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install -y openssl libssl-dev</span><br></pre></td></tr></table></figure><ul><li>下载nginx源码</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 下载源码</span><br><span class="line"></span><br><span class="line">wget http://nginx.org/download/nginx-1.20.2.tar.gz</span><br><span class="line"></span><br><span class="line"># 解压源码</span><br><span class="line"></span><br><span class="line">tar -xf nginx-1.20.2.tar.gz</span><br><span class="line"></span><br><span class="line"># 进入源代码内</span><br><span class="line"></span><br><span class="line">cd nginx-1.20.2</span><br></pre></td></tr></table></figure><ul><li>配置</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">./configure \</span><br><span class="line">--prefix=/usr/local/nginx \</span><br><span class="line">--user=www \</span><br><span class="line">--group=www \</span><br><span class="line">--sbin-path=/usr/local/nginx/sbin/nginx \</span><br><span class="line">--conf-path=/usr/local/nginx/nginx.conf \</span><br><span class="line">--error-log-path=/var/log/nginx/error.log \</span><br><span class="line">--http-log-path=/var/log/nginx/access.log \</span><br><span class="line">--pid-path=/var/run/nginx.pid \</span><br><span class="line">--lock-path=/var/run/nginx.lock \</span><br><span class="line">--http-client-body-temp-path=/var/cache/nginx/client_temp \</span><br><span class="line">--http-proxy-temp-path=/var/cache/nginx/proxy_temp \</span><br><span class="line">--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \</span><br><span class="line">--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \</span><br><span class="line">--http-scgi-temp-path=/var/cache/nginx/scgi_temp \</span><br><span class="line">--with-file-aio \</span><br><span class="line">--with-threads \</span><br><span class="line">--with-http_addition_module \</span><br><span class="line">--with-http_auth_request_module \</span><br><span class="line">--with-http_dav_module \</span><br><span class="line">--with-http_flv_module \</span><br><span class="line">--with-http_gunzip_module \</span><br><span class="line">--with-http_gzip_static_module \</span><br><span class="line">--with-http_mp4_module \</span><br><span class="line">--with-http_random_index_module \</span><br><span class="line">--with-http_realip_module \</span><br><span class="line">--with-http_secure_link_module \</span><br><span class="line">--with-http_slice_module \</span><br><span class="line">--with-http_ssl_module \</span><br><span class="line">--with-http_stub_status_module \</span><br><span class="line">--with-http_sub_module \</span><br><span class="line">--with-http_v2_module \</span><br><span class="line">--with-mail \</span><br><span class="line">--with-mail_ssl_module \</span><br><span class="line">--with-stream \</span><br><span class="line">--with-stream_realip_module \</span><br><span class="line">--with-stream_ssl_module \</span><br><span class="line">--with-stream_ssl_preread_module</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li><p><code>--prefix</code>：Nginx主要安装路径，后续Nginx子目录依照这个变量展开</p></li><li><p><code>--user</code>：设置Nginx进程启动时，所属的用户</p></li><li><p><code>--group</code>：设置Nginx进程启动时，所属的用户组</p></li><li><p>编译</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><ul><li>安装</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure><ul><li>创建<code>systemctl</code>守护，管理Nginx：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/lib/systemd/system/nginx.service</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=nginx</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/local/nginx/sbin/nginx</span><br><span class="line">ExecReload=/usr/local/nginx/sbin/nginx -s reload</span><br><span class="line">ExecStop=/usr/local/nginx/sbin/nginx -s quit</span><br><span class="line">PrivateTmp=true   </span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><ul><li>启动各服务</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">-------------------</span><br><span class="line">systemctl start nginx</span><br><span class="line">-------------------</span><br><span class="line">#观察nginx启动状态</span><br><span class="line">systemctl status nginx.service</span><br><span class="line">-------------------</span><br><span class="line">#查看80线程状态</span><br><span class="line">lsof -i:80</span><br></pre></td></tr></table></figure><h1 id="nginx命令"><a class="markdownIt-Anchor" href="#nginx命令"></a> nginx命令</h1><p>如果你是按我的方法编译，那么，需要注意。</p><ul><li><code>/usr/local/nginx</code>：为Nginx编译安装的地址。</li><li><code>/usr/local/nginx/conf/nginx.conf</code>：Nginx默认配置文件。</li></ul><p>同时，我们使用<code>systemctl</code>对Nginx进行管理：</p><ul><li><code>systemctl start nginx</code>：启动Nginx服务。</li><li><code>systemctl reload nginx</code>：Nginx配置重载。</li><li><code>systemctl stop nginx</code>：停止Nginx服务。</li></ul><hr><p>本片文章参考<a href="https://www.php.cn/nginx/488924.html">https://www.php.cn/nginx/488924.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​	博主在工作学习时，经常性使用到nginx，但是某些时候有一些指令总是忘记，去网上收缩有甚是繁琐，因此用本篇博客记录安装的指令，与最后各种文件存放的位置&lt;/p&gt;
&lt;h1 id=&quot;debian下安装nginx&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; hr</summary>
      
    
    
    
    <category term="linux" scheme="http://cloud-tour.github.io/categories/linux/"/>
    
    
    <category term="debian" scheme="http://cloud-tour.github.io/tags/debian/"/>
    
    <category term="nginx" scheme="http://cloud-tour.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>debian系统配置java11环境</title>
    <link href="http://cloud-tour.github.io/2022/10/08/debian%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AEjava11%E7%8E%AF%E5%A2%83/"/>
    <id>http://cloud-tour.github.io/2022/10/08/debian%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AEjava11%E7%8E%AF%E5%A2%83/</id>
    <published>2022-10-08T03:31:36.963Z</published>
    <updated>2022-10-08T03:47:19.584Z</updated>
    
    <content type="html"><![CDATA[<p>​博主最近在工作中使用到debian系统，在初始系统中要进行一些配置，使后续的程序能正常运行，因此用该篇文章记录一些配置的步骤。</p><ul><li>博主用的debian系统为11.2版本</li></ul><h1 id="下载jdk11"><a class="markdownIt-Anchor" href="#下载jdk11"></a> 下载jdk11</h1><ul><li>分别输入下列两条指令</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt search openjdk</span><br><span class="line">------------------------------</span><br><span class="line">sudo apt install default-jdk</span><br></pre></td></tr></table></figure><ul><li>输入查看java版本</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><ul><li>出现下列信息即为安装成功</li></ul><img src="/2022/10/08/debian%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AEjava11%E7%8E%AF%E5%A2%83/image-20221008114032830.png" alt="image-20221008114032830" style="zoom:67%;"><h1 id="其他操作"><a class="markdownIt-Anchor" href="#其他操作"></a> 其他操作</h1><p>​其实在上述操作后应该就可以正常运行java程序了，但是为了以防万一，再贴出其他操作</p><h2 id="debian的系统环境变量"><a class="markdownIt-Anchor" href="#debian的系统环境变量"></a> debian的系统环境变量</h2><ul><li>debian系统的环境变量位置位于/etc/profile</li><li>入若需要进行配置环境变量，直接vim即可</li></ul><p>配置方式：</p><img src="/2022/10/08/debian%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AEjava11%E7%8E%AF%E5%A2%83/image-20221008114456095.png" alt="image-20221008114456095"><p>​配置环境变量时，需要先在windows中下载jdk11的安装包，然后传到debian的/etc/java中，再解压。具体信息步骤博主就不在这贴出了。自行百度，很简单的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​		博主最近在工作中使用到debian系统，在初始系统中要进行一些配置，使后续的程序能正常运行，因此用该篇文章记录一些配置的步骤。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;博主用的debian系统为11.2版本&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;下载jdk11&quot;&gt;&lt;a class=</summary>
      
    
    
    
    <category term="linux" scheme="http://cloud-tour.github.io/categories/linux/"/>
    
    
    <category term="debian" scheme="http://cloud-tour.github.io/tags/debian/"/>
    
    <category term="java11" scheme="http://cloud-tour.github.io/tags/java11/"/>
    
  </entry>
  
  <entry>
    <title>proteus8.9与keil4的简单使用</title>
    <link href="http://cloud-tour.github.io/2022/10/07/proteus8.9%E4%B8%8Ekeil4%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>http://cloud-tour.github.io/2022/10/07/proteus8.9%E4%B8%8Ekeil4%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</id>
    <published>2022-10-07T13:45:21.243Z</published>
    <updated>2022-10-07T14:28:39.430Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><p>最近博主在学51单片机，因此接触到proteus和keil，本篇文章简单介绍一下这两款软件的使用以及如何结合起来，并用这两款软件简单操作一个51单片机实现一个LED灯的闪烁操作。</p><h1 id="keil4"><a class="markdownIt-Anchor" href="#keil4"></a> keil4</h1><p>​对于keil4，简单来说就是用来写代码的，将代码编译后生成**.hex**文件，将此文件烧入单片机中便可驱动单片机实现某些特定的操作。</p><h2 id="创建工程"><a class="markdownIt-Anchor" href="#创建工程"></a> 创建工程</h2><h3 id="新建项目"><a class="markdownIt-Anchor" href="#新建项目"></a> 新建项目</h3><ul><li>new一个project</li></ul><img src="/2022/10/07/proteus8.9%E4%B8%8Ekeil4%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20221007202849099.png" style="zoom:50%;"><ul><li>选择Atmel下的AT89C51（即51单片机）</li></ul><img src="/2022/10/07/proteus8.9%E4%B8%8Ekeil4%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20221007203430394.png" style="zoom:50%;"><ul><li>下面这个是提醒是否使用汇编，直接选择否，因为我们使用的是c语言</li></ul><img src="/2022/10/07/proteus8.9%E4%B8%8Ekeil4%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20221007203533512.png" alt="image-20221007203533512" style="zoom:50%;"><h3 id="新建c文件"><a class="markdownIt-Anchor" href="#新建c文件"></a> 新建.c文件</h3><ul><li>接下来new一个file文件</li></ul><img src="/2022/10/07/proteus8.9%E4%B8%8Ekeil4%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20221007203706405.png" style="zoom:50%;"><ul><li><p>ctrl+s保存为.c文件</p></li><li><p>将该c文件假如到project中</p></li></ul><img src="/2022/10/07/proteus8.9%E4%B8%8Ekeil4%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20221007203951783.png" alt="image-20221007203951783" style="zoom:50%;"><img src="/2022/10/07/proteus8.9%E4%B8%8Ekeil4%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20221007204013441.png" style="zoom:50%;"><ul><li>配置项目编译时自动生成.hex文件</li></ul><img src="/2022/10/07/proteus8.9%E4%B8%8Ekeil4%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20221007204103786.png" alt="image-20221007204103786" style="zoom:50%;"><img src="/2022/10/07/proteus8.9%E4%B8%8Ekeil4%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20221007204124726.png" style="zoom:50%;"><h3 id="编写功能代码"><a class="markdownIt-Anchor" href="#编写功能代码"></a> 编写功能代码</h3><ul><li>编写代码 下面写的代码是控制p2的0口间隔输出高低电平</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;reg51.h&quot;</span></span></span><br><span class="line"><span class="comment">//代表p2口的0处</span></span><br><span class="line">sbit LED0=P2^<span class="number">0</span>;</span><br><span class="line"><span class="comment">//睡眠函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">sleep</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> i = <span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">120</span>;j++);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="comment">//输出低电平</span></span><br><span class="line">LED0=<span class="number">0</span>;</span><br><span class="line">sleep(<span class="number">5</span>);</span><br><span class="line">    <span class="comment">//输出高电平</span></span><br><span class="line">LED0=<span class="number">1</span>;</span><br><span class="line">sleep(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>写完编译 无error即可</li></ul><img src="/2022/10/07/proteus8.9%E4%B8%8Ekeil4%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20221007204630763.png" alt="image-20221007204630763" style="zoom:50%;"><ul><li>观察项目路径，已生成,hex文件</li></ul><img src="/2022/10/07/proteus8.9%E4%B8%8Ekeil4%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20221007204752374.png" style="zoom:50%;"><h1 id="proteus89"><a class="markdownIt-Anchor" href="#proteus89"></a> proteus8.9</h1><p>​对于proteus来说，可简单理解为是一个用来对单片机仿真的软件，可以用.hex文件驱动单片机进行特定的功能并显现出来。</p><h2 id="创建工程-2"><a class="markdownIt-Anchor" href="#创建工程-2"></a> 创建工程</h2><ul><li>new一个新的工程，不用选择什么，一直下一步直至完成</li></ul><img src="/2022/10/07/proteus8.9%E4%B8%8Ekeil4%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20221007205316982.png" style="zoom:50%;"><h2 id="制作仿真图"><a class="markdownIt-Anchor" href="#制作仿真图"></a> 制作仿真图</h2><ul><li>添加元器件仓库</li></ul><img src="/2022/10/07/proteus8.9%E4%B8%8Ekeil4%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20221007205535316.png" style="zoom:50%;"><ul><li>添加AT89C51 选中双击即可</li></ul><img src="/2022/10/07/proteus8.9%E4%B8%8Ekeil4%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20221007205637595.png" alt="image-20221007205637595" style="zoom:50%;"><ul><li>同理添加RES和LED-BIBY</li></ul><img src="/2022/10/07/proteus8.9%E4%B8%8Ekeil4%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20221007205804288.png" style="zoom:50%;"><ul><li>置放元器件（单击后即可在图中置放元器件）添加一个电源</li></ul><img src="/2022/10/07/proteus8.9%E4%B8%8Ekeil4%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20221007210010477.png" alt="image-20221007210010477" style="zoom:50%;"><ul><li>连线</li></ul><img src="/2022/10/07/proteus8.9%E4%B8%8Ekeil4%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20221007210132137.png" style="zoom:50%;"><ul><li>修改电阻值（电阻的值必须大于250，否则可能出错）</li></ul><img src="/2022/10/07/proteus8.9%E4%B8%8Ekeil4%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20221007210240296.png" alt="image-20221007210240296" style="zoom:50%;"><h2 id="烧入程序"><a class="markdownIt-Anchor" href="#烧入程序"></a> 烧入程序</h2><ul><li>将.hex文件烧入程序中。双击单片机</li></ul><img src="/2022/10/07/proteus8.9%E4%B8%8Ekeil4%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20221007210417736.png" style="zoom:50%;"><ul><li>烧入成功后即可仿真</li></ul><img src="/2022/10/07/proteus8.9%E4%B8%8Ekeil4%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20221007210553539.png" alt="image-20221007210553539" style="zoom: 33%;"><h1 id="end"><a class="markdownIt-Anchor" href="#end"></a> end</h1><p>​这样就利用proteus和keil完成一个简单的单片机电路，实现对led控制闪烁。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;p&gt;最近博主在学51单片机，因此接触到proteus和keil，本篇文章简单介绍一下这两款软件的使用以及如何结合起来，并用这两款软件简单操作一个51单片机实现一个LED灯的闪烁操作。&lt;/p&gt;
&lt;h1 id=&quot;keil4&quot;&gt;&lt;a class=&quot;markd</summary>
      
    
    
    
    <category term="51单片机" scheme="http://cloud-tour.github.io/categories/51%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    
    <category term="proteus" scheme="http://cloud-tour.github.io/tags/proteus/"/>
    
    <category term="keil" scheme="http://cloud-tour.github.io/tags/keil/"/>
    
  </entry>
  
</feed>
